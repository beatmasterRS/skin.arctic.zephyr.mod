<?xml version="1.0" encoding="UTF-8"?>
<includes>

    <include name="scrollbar_dialog">
        <param name="visible" value="$PARAM[visible]" default="true"/>
        <param name="height" value="$PARAM[height]" default="687"/>
        <param name="posy" value="$PARAM[posy]" default="120"/>
        <param name="centerright" value="$PARAM[centerright]" default="375"/>
        <definition>
        <control type="scrollbar" id="$PARAM[scrollid]">
            <visible>$PARAM[visible]</visible>
            <centerright>$PARAM[centerright]</centerright>
            <posy>$PARAM[posy]</posy>
            <height>$PARAM[height]</height>
            <width>8</width>
            <onleft>$PARAM[onleft]</onleft>
            <onright>$PARAM[onright]</onright>
            <texturesliderbackground border="4" colordiffuse="Dark4">scrollbar/scrollv.png</texturesliderbackground>
            <texturesliderbar border="4" colordiffuse="Dark3">scrollbar/scrollv.png</texturesliderbar>
            <texturesliderbarfocus border="4" colordiffuse="Dark2">scrollbar/scrollv.png</texturesliderbarfocus>
            <orientation>vertical</orientation>
            <showonepage>false</showonepage>
            <animation effect="fade" start="100" end="0" time="400" condition="!Control.HasFocus($PARAM[scrollid]) + !Container.Scrolling">Conditional</animation>
        </control>
        </definition>
    </include>

    <include name="scrollbar_filemanager">
        <param name="left" value="$PARAM[left]" default="873"/>
        <definition>
        <control type="scrollbar" id="$PARAM[scrollid]">
            <top>5</top>
            <left>$PARAM[left]</left>
            <height>590</height>
            <width>8</width>
            <onleft>$PARAM[onleft]</onleft>
            <onright>$PARAM[onright]</onright>
            <texturesliderbackground border="4" colordiffuse="Dark4">scrollbar/scrollv.png</texturesliderbackground>
            <texturesliderbar border="4" colordiffuse="Dark3">scrollbar/scrollv.png</texturesliderbar>
            <texturesliderbarfocus border="4" colordiffuse="Dark2">scrollbar/scrollv.png</texturesliderbarfocus>
            <orientation>vertical</orientation>
            <showonepage>false</showonepage>
            <animation effect="fade" start="100" end="0" time="400" condition="!Control.HasFocus($PARAM[scrollid]) + !Container.Scrolling">Conditional</animation>
        </control>
        </definition>
    </include>

    <include name="scrollbar_vertical">
        <param name="jumpbar" default="true"/>
        <param name="posy" default="PosterPad"/>
        <param name="height" default="PosterH"/>
        <definition>
        <onback>50</onback>
        <centerright>60</centerright>
        <posy>$PARAM[posy]</posy>
        <height>$PARAM[height]</height>
        <width>8</width>
        <onleft>50</onleft>
        <onright condition="$PARAM[jumpbar]">390000</onright>
        <texturesliderbackground border="4" colordiffuse="Dark4">scrollbar/scrollv.png</texturesliderbackground>
        <texturesliderbar border="4" colordiffuse="Dark3">scrollbar/scrollv.png</texturesliderbar>
        <texturesliderbarfocus border="4" colordiffuse="Dark2">scrollbar/scrollv.png</texturesliderbarfocus>
        <orientation>vertical</orientation>
        <showonepage>false</showonepage>
        <animation effect="fade" start="100" end="0" time="400" condition="!Control.HasFocus($PARAM[scrollid]) + !Container.Scrolling">Conditional</animation>
        </definition>
    </include>

    <include name="scrollbar_hor">
        <param name="showscroll" default="true" />
        <param name="jumpbar" default="true"/>
        <param name="onup" default="50"/>
        <param name="bottom" default="200"/>
        <definition>
        <onback>50</onback>
        <left>SidePad</left>
        <width>1760</width>
        <bottom>$PARAM[bottom]</bottom>
        <orientation>horizontal</orientation>
        <height>8</height>
        <onup>$PARAM[onup]</onup>
        <ondown condition="$PARAM[jumpbar]">390000</ondown>
        <texturesliderbackground border="4" colordiffuse="Dark4">scrollbar/scrollv.png</texturesliderbackground>
        <texturesliderbar border="4" colordiffuse="Dark3">scrollbar/scrollv.png</texturesliderbar>
        <texturesliderbarfocus border="4" colordiffuse="Dark2">scrollbar/scrollv.png</texturesliderbarfocus>
        <animation effect="fade" start="100" end="0" time="400" condition="!Control.HasFocus($PARAM[scrollid]) + [!Container.Scrolling | [$PARAM[showscroll] + [Control.IsVisible(510) | Control.IsVisible(520) | Control.IsVisible(521) | Control.IsVisible(522) | Control.IsVisible(523) | Control.IsVisible(524)]]]">Conditional</animation>
        </definition>
    </include>

    <include name="Furniture_Scrollbar">
        <control type="scrollbar" id="60">
            <onback>50</onback>
            <centerright>60</centerright>
            <posy>PosterPad</posy>
            <height>PosterH</height>
            <width>8</width>
            <onleft>50</onleft>
            <onright>390000</onright>
            <showonepage>false</showonepage>
            <orientation>vertical</orientation>
            <onright condition="!Skin.HasSetting(global.kioskmode)">9000</onright>
            <texturesliderbackground border="4" colordiffuse="Dark4">scrollbar/scrollv.png</texturesliderbackground>
            <texturesliderbar border="4" colordiffuse="Dark3">scrollbar/scrollv.png</texturesliderbar>
            <texturesliderbarfocus border="4" colordiffuse="Dark2">scrollbar/scrollv.png</texturesliderbarfocus>
            <animation effect="fade" start="100" end="0" time="400" condition="!Control.HasFocus(60) + !Container.Scrolling">Conditional</animation>
        </control>
    </include>

    <include name="JumpBarHorizontal2">
        <control type="group">
            <animation effect="slide" start="0,0" end="-120,0" time="400" tween="quadratic" easing="out" condition="ControlGroup(290000).HasFocus()">Conditional</animation>
            <animation effect="slide" start="0,0" end="32,0" time="400" reversible="true" tween="quadratic" easing="out" condition="ControlGroup(290000).HasFocus()">Conditional</animation>
            <left>1931</left>
            <top>215</top>
            <control type="image">
                <left>-8</left>
                <top>-8</top>
                <width>230</width>
                <height>656</height>
                <texture border="16" colordiffuse="Background">common/rounded-shadow8.png</texture>
            </control>
            <control type="image">
                <width>230</width>
                <height>641</height>
                <texture colordiffuse="Box2" border="4" background="true">common/box21.png</texture>
            </control>
            <control type="grouplist" id="290000">
                <left>28</left>
                <top>-28</top>
                <width>26</width>
                <height>700</height>
                <onup>290001</onup>
                <ondown>290001</ondown>
                <onback>50</onback>
                <itemgap>9</itemgap>
                <onleft>$VAR[ClickToJump]</onleft>
                <onright>$VAR[ClickToJump]</onright>
                <orientation>vertical</orientation>
                <align>center</align>
                <control type="list" id="290001">
                    <height>615</height>
                    <width>26</width>
                    <onright>50</onright>
                    <scrolltime>100</scrolltime>
                    <focusposition>0</focusposition>
                    <onleft>50</onleft>
                    <itemlayout height="55" width="26">
                        <control type="label">
                            <width>100%</width>
                            <height>100%</height>
                            <align>center</align>
                            <aligny>center</aligny>
                            <left>$PARAM[left]</left>
                            <label>$INFO[ListItem.Label]</label>
                            <font>Small333</font>
                            <textcolor>Black70</textcolor>
                            <animation effect="fade" start="100" end="33" time="0" condition="!String.IsEmpty(ListItem.Property(NotAvailable))">Conditional</animation>
                        </control>
                    </itemlayout>
                    <focusedlayout height="55" width="26">
                        <control type="label">
                            <visible>Control.HasFocus(290001) + String.IsEmpty(ListItem.Property(NotAvailable))</visible>
                            <width>100%</width>
                            <top>1</top>
                            <height>100%</height>
                            <align>center</align>
                            <aligny>center</aligny>
                            <left>$PARAM[left]</left>
                            <label>[B]$INFO[ListItem.Label][/B]</label>
                            <font>Small33</font>
                            <textcolor>$VAR[ColorHighlight]</textcolor>
                        </control>
                        <control type="label">
                            <visible>!Control.HasFocus(290001) + String.IsEmpty(ListItem.Property(NotAvailable))</visible>
                            <width>100%</width>
                            <top>1</top>
                            <height>100%</height>
                            <align>center</align>
                            <aligny>center</aligny>
                            <left>$PARAM[left]</left>
                            <label>[B]$INFO[ListItem.Label][/B]</label>
                            <font>Small33</font>
                            <textcolor>$VAR[ColorHighlight]</textcolor>
                        </control>
                        <control type="label">
                            <visible>Control.HasFocus(290001) + !String.IsEmpty(ListItem.Property(NotAvailable))</visible>
                            <width>100%</width>
                            <top>1</top>
                            <height>100%</height>
                            <align>center</align>
                            <aligny>center</aligny>
                            <left>$PARAM[left]</left>
                            <label>[B]$INFO[ListItem.Label][/B]</label>
                            <font>Small33</font>
                            <textcolor>Black70</textcolor>
                            <animation effect="fade" start="100" end="33" time="0" condition="true">Conditional</animation>
                        </control>
                        <control type="label">
                            <visible>!Control.HasFocus(290001) + !String.IsEmpty(ListItem.Property(NotAvailable))</visible>
                            <width>100%</width>
                            <top>1</top>
                            <height>100%</height>
                            <align>center</align>
                            <aligny>center</aligny>
                            <left>$PARAM[left]</left>
                            <label>[B]$INFO[ListItem.Label][/B]</label>
                            <font>Small33</font>
                            <textcolor>Black70</textcolor>
                            <animation effect="fade" start="100" end="33" time="0" condition="true">Conditional</animation>
                        </control>
                    </focusedlayout>
                    <include>NewJumpbar</include>
                </control>
            </control>
        </control>
    </include>

    <variable name="FlagstarMusic1">
        <value condition="Integer.IsGreater(MusicPlayer.UserRating,1)">star10</value>
        <value condition="Integer.IsGreater(MusicPlayer.UserRating,0)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarMusic2">
        <value condition="Integer.IsGreater(MusicPlayer.UserRating,3)">star10</value>
        <value condition="Integer.IsGreater(MusicPlayer.UserRating,2)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarMusic3">
        <value condition="Integer.IsGreater(MusicPlayer.UserRating,5)">star10</value>
        <value condition="Integer.IsGreater(MusicPlayer.UserRating,4)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarMusic4">
        <value condition="Integer.IsGreater(MusicPlayer.UserRating,7)">star10</value>
        <value condition="Integer.IsGreater(MusicPlayer.UserRating,6)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarMusic5">
        <value condition="Integer.IsGreater(MusicPlayer.UserRating,9)">star10</value>
        <value condition="Integer.IsGreater(MusicPlayer.UserRating,8)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="Flagstar1">
        <value condition="Integer.IsGreater(ListItem.Rating,1)">star10</value>
        <value condition="Integer.IsGreater(ListItem.Rating,0)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="Flagstar2">
        <value condition="Integer.IsGreater(ListItem.Rating,3)">star10</value>
        <value condition="Integer.IsGreater(ListItem.Rating,2)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="Flagstar3">
        <value condition="Integer.IsGreater(ListItem.Rating,5)">star10</value>
        <value condition="Integer.IsGreater(ListItem.Rating,4)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="Flagstar4">
        <value condition="Integer.IsGreater(ListItem.Rating,7)">star10</value>
        <value condition="Integer.IsGreater(ListItem.Rating,6)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="Flagstar5">
        <value condition="Integer.IsGreater(ListItem.Rating,9)">star10</value>
        <value condition="Integer.IsGreater(ListItem.Rating,8)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarSong1">
        <value condition="Integer.IsGreater(ListItem.UserRating,1)">star10</value>
        <value condition="Integer.IsGreater(ListItem.UserRating,0)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarSong2">
        <value condition="Integer.IsGreater(ListItem.UserRating,3)">star10</value>
        <value condition="Integer.IsGreater(ListItem.UserRating,2)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarSong3">
        <value condition="Integer.IsGreater(ListItem.UserRating,5)">star10</value>
        <value condition="Integer.IsGreater(ListItem.UserRating,4)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarSong4">
        <value condition="Integer.IsGreater(ListItem.UserRating,7)">star10</value>
        <value condition="Integer.IsGreater(ListItem.UserRating,6)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarSong5">
        <value condition="Integer.IsGreater(ListItem.UserRating,9)">star10</value>
        <value condition="Integer.IsGreater(ListItem.UserRating,8)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="Flagstar199">
        <value condition="Integer.IsGreater(VideoPlayer.Rating,1)">star10</value>
        <value condition="Integer.IsGreater(VideoPlayer.Rating,0)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="Flagstar299">
        <value condition="Integer.IsGreater(VideoPlayer.Rating,3)">star10</value>
        <value condition="Integer.IsGreater(VideoPlayer.Rating,2)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="Flagstar399">
        <value condition="Integer.IsGreater(VideoPlayer.Rating,5)">star10</value>
        <value condition="Integer.IsGreater(VideoPlayer.Rating,4)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="Flagstar499">
        <value condition="Integer.IsGreater(VideoPlayer.Rating,7)">star10</value>
        <value condition="Integer.IsGreater(VideoPlayer.Rating,6)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="Flagstar599">
        <value condition="Integer.IsGreater(VideoPlayer.Rating,9)">star10</value>
        <value condition="Integer.IsGreater(VideoPlayer.Rating,8)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarSelect1">
        <value condition="Integer.IsGreater(Container(3).ListItem.Label,1)">star10</value>
        <value condition="Integer.IsGreater(Container(3).ListItem.Label,0)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarSelect2">
        <value condition="Integer.IsGreater(Container(3).ListItem.Label,3)">star10</value>
        <value condition="Integer.IsGreater(Container(3).ListItem.Label,2)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarSelect3">
        <value condition="Integer.IsGreater(Container(3).ListItem.Label,5)">star10</value>
        <value condition="Integer.IsGreater(Container(3).ListItem.Label,4)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarSelect4">
        <value condition="Integer.IsGreater(Container(3).ListItem.Label,7)">star10</value>
        <value condition="Integer.IsGreater(Container(3).ListItem.Label,6)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="FlagstarSelect5">
        <value condition="Integer.IsGreater(Container(3).ListItem.Label,9)">star10</value>
        <value condition="Integer.IsGreater(Container(3).ListItem.Label,8)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="HubFlagstar1">
        <value condition="Integer.IsGreater(Container(9500).ListItem.Rating,1)">star10</value>
        <value condition="Integer.IsGreater(Container(9500).ListItem.Rating,0)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="HubFlagstar2">
        <value condition="Integer.IsGreater(Container(9500).ListItem.Rating,3)">star10</value>
        <value condition="Integer.IsGreater(Container(9500).ListItem.Rating,2)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="HubFlagstar3">
        <value condition="Integer.IsGreater(Container(9500).ListItem.Rating,5)">star10</value>
        <value condition="Integer.IsGreater(Container(9500).ListItem.Rating,4)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="HubFlagstar4">
        <value condition="Integer.IsGreater(Container(9500).ListItem.Rating,7)">star10</value>
        <value condition="Integer.IsGreater(Container(9500).ListItem.Rating,6)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="HubFlagstar5">
        <value condition="Integer.IsGreater(Container(9500).ListItem.Rating,9)">star10</value>
        <value condition="Integer.IsGreater(Container(9500).ListItem.Rating,8)">star5</value>
        <value>star0</value>
    </variable>

    <variable name="ClearLogoTopVar">
        <value condition="!String.IsEmpty(ListItem.Art(clearlogo))">$INFO[ListItem.Art(clearlogo)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(tvshow.clearlogo))">$INFO[ListItem.Art(tvshow.clearlogo)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(artist.clearlogo))">$INFO[ListItem.Art(artist.clearlogo)]</value>
        <value condition="!String.IsEmpty(Container(9500).ListItem.Art(clearlogo))">$INFO[Container(9500).ListItem.Art(clearlogo)]</value>
        <value condition="!String.IsEmpty(Container(9500).ListItem.Art(tvshow.clearlogo))">$INFO[Container(9500).ListItem.Art(tvshow.clearlogo)]</value>
        <value condition="!String.IsEmpty(Container(9500).ListItem.Art(artist.clearlogo))">$INFO[Container(9500).ListItem.Art(artist.clearlogo)]</value>
    </variable>

    <include name="Furniture_Flags_DialogInfo">
        <control type="group">
            <include>Animation.Flags_DialogInfoVisible</include>
            <top>70</top>
            <left>-90</left>
            <control type="grouplist">
                <include>Animation.FadeIn</include>
                <include>Animation.FadeOut</include>
                <left>SidePad</left>
                <bottom>10</bottom>
                <width>1400</width>
                <height>64</height>
                <orientation>horizontal</orientation>
                <visible>false</visible>
                <itemgap>5</itemgap>
                <control type="image">
                    <width min="20" max="70">auto</width>
                    <height>40</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[ListItem.VideoResolution,flags/resolution/,.png]</texture>
                    <aspectratio align="left">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution) + !String.Contains(ListItem.Path,videodb://movies/sets,left)</visible>
                </control>
                <control type="image">
                    <width min="20" max="150">auto</width>
                    <height>40</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[ListItem.VideoCodec,flags/source/,.png]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoCodec)</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>40</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[ListItem.VideoAspect,flags/aspectratio/,.png]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoAspect)</visible>
                </control>
                <control type="image">
                    <width min="20" max="128">auto</width>
                    <height>40</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">$VAR[ListItemAudioCodec,flags/audio/,.png]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>40</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[ListItem.AudioChannels,flags/channels/,.png]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioChannels)</visible>
                </control>
            </control>
            <control type="grouplist">
                <visible>!Skin.HasSetting(furniture.coloredicons)</visible>
                <visible>!String.IsEqual(ListItem.Label,..)</visible>
                <include>Animation.FadeIn</include>
                <include>Animation.FadeOut</include>
                <left>SidePad</left>
                <width>1400</width>
                <height>120</height>
                <orientation>horizontal</orientation>
                <align>left</align>
                <itemgap>3</itemgap>
                <usecontrolcoords>true</usecontrolcoords>
                <control type="group">
                    <visible>[[Container.Content(tvshows) | Container.Content(seasons)] + [!String.IsEmpty(ListItem.Property(TotalEpisodes)) | !String.IsEmpty(ListItem.Property(UnWatchedEpisodes))]] | ListItem.IsCollection | [!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution)]</visible>
                    <centertop>50%</centertop>
                    <width>70</width>
                    <height>40</height>
                    <control type="image" description="button back">
                        <width>45</width>
                        <height>45</height>
                        <left>10</left>
                        <align>center</align>
                        <texture border="0" colordiffuse="Dark1">common/circle.png</texture>
                        <visible>!ListItem.IsCollection</visible>
                    </control>
                    <control type="image" description="Sets">
                        <width>70</width>
                        <height>50</height>
                        <align>center</align>
                        <texture border="0" colordiffuse="Dark1">flags/sets.png</texture>
                        <visible>ListItem.IsCollection</visible>
                        <centertop>50%</centertop>
                    </control>
                    <control type="label">
                        <width>45</width>
                        <height>40</height>
                        <align>center</align>
                        <left>10</left>
                        <centertop>53%</centertop>
                        <label>$VAR[HDSD]</label>
                        <font>Tiny44</font>
                        <textcolor>Dark1</textcolor>
                        <visible>!ListItem.IsCollection</visible>
                    </control>
                </control>
                <control type="image">
                    <width min="20" max="70">auto</width>
                    <height>48</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/resolution/fallback.png">$INFO[ListItem.VideoResolution,flags/white/resolution/,.png]</texture>
                    <aspectratio align="left">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution) + !String.Contains(ListItem.Path,videodb://movies/sets,left)</visible>
                </control>
                <include content="Def_Flags_Furniture_Small">
                    <param name="Star" value="Flagstar" />
                    <param name="visible" value="!Skin.HasSetting(furniture.numericrating)" />
                    <param name="color" value="Dark1" />
                </include>
                <control type="label">
                    <left>-16</left>
                    <width min="48">auto</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <align>left</align>
                    <aligny>center</aligny>
                    <label>$INFO[ListItem.Rating]</label>
                    <font>Flag</font>
                    <textcolor>Dark1</textcolor>
                    <visible>Skin.HasSetting(furniture.numericrating)</visible>
                </control>
                <control type="image">
                    <width>48</width>
                    <height>64</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1">flags/airing.png</texture>
                    <aspectratio align="left">scale</aspectratio>
                    <visible>!Skin.HasSetting(furniture.flags.nextaired) + $EXP[HasNextAired]</visible>
                </control>
                <control type="label">
                    <width min="128">auto</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <align>left</align>
                    <aligny>center</aligny>
                    <label>$VAR[LabelNextAiredDetails]</label>
                    <font>Flag</font>
                    <textcolor>Dark2</textcolor>
                    <visible>!Skin.HasSetting(furniture.flags.nextaired) + $EXP[HasNextAired]</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>48</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[ListItem.VideoCodec,flags/white/source/,.png]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoCodec) + !Skin.HasSetting(furniture.coloredicons)</visible>
                </control>
                <control type="image">
                    <width min="20" max="80">auto</width>
                    <height>55</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[ListItem.VideoAspect,flags/aspectratio/,.png]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoAspect) + !Skin.HasSetting(furniture.coloredicons)</visible>
                </control>
                <control type="image">
                    <width min="20" max="128">auto</width>
                    <height>64</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">$VAR[ListItemAudioCodec,flags3/audio/,.png]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec) + !Skin.HasSetting(furniture.coloredicons)</visible>
                </control>
                <control type="image">
                    <width min="20" max="80">auto</width>
                    <height>45</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[ListItem.AudioChannels,flags/channels/,.png]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioChannels)</visible>
                </control>
                <control type="image">
                    <width>48</width>
                    <height>64</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1">flags/video.png</texture>
                    <aspectratio align="left">scale</aspectratio>
                    <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution)</visible>
                </control>
                <control type="label">
                    <width min="128">auto</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <align>left</align>
                    <aligny>center</aligny>
                    <label>$INFO[ListItem.VideoCodec,,  •  ]$INFO[ListItem.VideoResolution]$INFO[ListItem.VideoAspect,  •  ,]$VAR[ListItemHDR,  •  ,]</label>
                    <font>Flag</font>
                    <textcolor>Dark1</textcolor>
                    <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution)</visible>
                </control>
                <control type="image">
                    <width>48</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <texture colordiffuse="Dark1">flags/audio.png</texture>
                    <aspectratio align="left">scale</aspectratio>
                    <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
                </control>
                <control type="label">
                    <width>auto</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <align>left</align>
                    <aligny>center</aligny>
                    <label>$VAR[ListItemAudioCodec]$VAR[LabelAudioChannels,  •  ,]</label>
                    <font>Flag</font>
                    <textcolor>Dark1</textcolor>
                    <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>60</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/hdr10plus.png</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + $EXP[IsVideoHDR10Plus]</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>60</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/hdr10.png</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + $EXP[IsVideoHDR10]</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>60</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/hdr.png</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + $EXP[IsVideoHDR]</visible>
                </control>
                <control type="image">
                    <width min="20" max="80">auto</width>
                    <height>60</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/hlg.png</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + $EXP[IsVideoHLG]</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>60</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/dolbyvision.png</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + $EXP[IsVideoDolbyVision]</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>64</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">$VAR[RatingFlagVar]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.MPAA) + !Skin.HasSetting(furniture.coloredicons)</visible>
                </control>
                <control type="image">
                    <width>48</width>
                    <height>64</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1">flags/time.png</texture>
                    <aspectratio align="left">scale</aspectratio>
                    <visible>!String.IsEmpty(ListItem.Duration(mins)) + [Control.IsVisible(500) | Control.IsVisible(53) | Control.IsVisible(52) | Control.IsVisible(55)]</visible>
                </control>
                <control type="label">
                    <width>auto</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <align>left</align>
                    <aligny>center</aligny>
                    <label>$VAR[LabelDurationTimeCheck]  </label>
                    <font>Flag</font>
                    <textcolor>Dark1</textcolor>
                    <visible>!String.IsEmpty(ListItem.Duration(mins)) + [Control.IsVisible(500) | Control.IsVisible(53) | Control.IsVisible(52) | Control.IsVisible(55)]</visible>
                </control>
                <control type="image">
                    <width>64</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <left>10</left>
                    <texture colordiffuse="Dark1">flags/3D.png</texture>
                    <visible>ListItem.IsStereoscopic</visible>
                </control>
                <control type="image">
                    <width>84</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <left>10</left>
                    <texture colordiffuse="Dark1">flags/$VAR[ImageBluray].png</texture>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons)</visible>
                    <visible>[String.Contains(ListItem.FilenameAndPath,bluray) | String.Contains(ListItem.FilenameAndPath,bdrip) | String.Contains(ListItem.FilenameAndPath,bd25) | String.Contains(ListItem.FilenameAndPath,bd50) | String.Contains(ListItem.FilenameAndPath,blu-ray)]</visible>
                </control>
                <control type="image" description="WEB-DL">
                    <width>84</width>
                    <height>64</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/web-dl.png</texture>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + [String.Contains(ListItem.Filenameandpath,.web.) | String.Contains(ListItem.Filenameandpath,.web-dl.) | String.Contains(ListItem.Filenameandpath,.webrip.)]</visible>
                </control>
                <control type="image">
                    <width>94</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <left>10</left>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <texture colordiffuse="Dark1">flags/hddvd.png</texture>
                    <visible>Skin.HasSetting(furniture.flagicons)</visible>
                    <visible>String.Contains(ListItem.FilenameAndPath,hddvd)</visible>
                </control>
                <control type="image">
                    <width>84</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <left>10</left>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <texture colordiffuse="Dark1">flags/dvd.png</texture>
                    <visible>Skin.HasSetting(furniture.flagicons)</visible>
                    <visible>String.Contains(ListItem.FilenameAndPath,dvd) + !String.Contains(ListItem.FilenameAndPath,hddvd)</visible>
                </control>
                <control type="image">
                    <width>84</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <left>10</left>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <texture colordiffuse="Dark1">flags/imdb.png</texture>
                    <visible>!String.IsEmpty(ListItem.Top250)</visible>
                </control>
                <control type="label" description="IMDB Top 250">
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>-15</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[ListItem.Top250,#,]</label>
                    <visible>!String.IsEmpty(ListItem.Top250) + Skin.HasSetting(furniture.flags.top250.enable.labels)</visible>
                </control>
                <include condition="Skin.HasSetting(furniture.showsubtitles)">Subtitles_Furniture</include>
                <include condition="Skin.HasSetting(furniture.show.audiotracks)">Audiostreams_Furniture</include>
                <control type="image">
                    <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + !Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>33</width>
                    <height>33</height>
                    <left>15</left>
                    <texture colordiffuse="Dark1" background="true">misc/userrating_white.png</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + !Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[ListItem.UserRating].0</label>
                </control>
                <control type="image">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                    <include>Animation.FadeIn</include>
                    <centertop>50%</centertop>
                    <width>33</width>
                    <height>33</height>
                    <left>15</left>
                    <texture colordiffuse="Dark1" background="true">misc/mc_white.png</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]%</label>
                </control>
                <control type="image">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                    <fadetime>ExtendedFlagIconsFadetime</fadetime>
                    <centertop>50%</centertop>
                    <width>33</width>
                    <height>33</height>
                    <left>15</left>
                    <texture colordiffuse="Dark1" background="true">$VAR[RottenTomatoes]</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]%</label>
                </control>
                <control type="image">
                    <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>38</width>
                    <height>38</height>
                    <left>35</left>
                    <texture colordiffuse="Dark1" background="true">misc/userrating_white.png</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[ListItem.UserRating].0</label>
                </control>
                <control type="image">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>38</width>
                    <height>38</height>
                    <left>30</left>
                    <texture colordiffuse="Dark1" background="true">misc/mc_white.png</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]%</label>
                </control>
                <control type="image">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                    <fadetime>ExtendedFlagIconsFadetime</fadetime>
                    <centertop>50%</centertop>
                    <width>38</width>
                    <height>38</height>
                    <left>35</left>
                    <texture colordiffuse="Dark1" background="true">$VAR[RottenTomatoes]</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]%</label>
                </control>
                <control type="image">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)) + !ListItem.IsCollection  + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                    <fadetime>ExtendedFlagIconsFadetime</fadetime>
                    <centertop>50%</centertop>
                    <width>38</width>
                    <height>38</height>
                    <left>35</left>
                    <texture colordiffuse="Dark1" background="true">$VAR[RottenTomatoesAudience]</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)) + !ListItem.IsCollection  + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)]%</label>
                </control>
            </control>
            <control type="grouplist">
                <visible>Skin.HasSetting(furniture.coloredicons)</visible>
                <include>Animation.FadeIn</include>
                <include>Animation.FadeOut</include>
                <left>SidePad</left>
                <width>1400</width>
                <height>120</height>
                <orientation>horizontal</orientation>
                <align>left</align>
                <itemgap>3</itemgap>
                <usecontrolcoords>true</usecontrolcoords>
                <control type="group">
                    <visible>[[Container.Content(tvshows) | Container.Content(seasons)] + [!String.IsEmpty(ListItem.Property(TotalEpisodes)) | !String.IsEmpty(ListItem.Property(UnWatchedEpisodes))]] | ListItem.IsCollection | [!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution)]</visible>
                    <centertop>50%</centertop>
                    <width>70</width>
                    <height>40</height>
                    <control type="image" description="button back">
                        <width>45</width>
                        <height>45</height>
                        <align>center</align>
                        <left>10</left>
                        <texture border="0" colordiffuse="Dark1">common/circle.png</texture>
                        <visible>!ListItem.IsCollection</visible>
                    </control>
                    <control type="image" description="Sets">
                        <width>70</width>
                        <height>50</height>
                        <align>center</align>
                        <texture border="0" colordiffuse="Dark1">flags/sets.png</texture>
                        <visible>ListItem.IsCollection</visible>
                        <centertop>50%</centertop>
                    </control>
                    <control type="label">
                        <width>45</width>
                        <height>40</height>
                        <align>center</align>
                        <centertop>53%</centertop>
                        <label>$VAR[HDSD]</label>
                        <font>Tiny44</font>
                        <left>10</left>
                        <textcolor>Dark1</textcolor>
                        <visible>!ListItem.IsCollection</visible>
                    </control>
                </control>
                <control type="image">
                    <width min="20" max="90">auto</width>
                    <height>70</height>
                    <left>-10</left>
                    <centertop>50%</centertop>
                    <texture fallback="flags/fallback.png">$INFO[ListItem.VideoResolution,flags/color/resolution/,.png]</texture>
                    <aspectratio align="left">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution) + !String.Contains(ListItem.Path,videodb://movies/sets,left)</visible>
                </control>
                <include content="Def_Flags_Furniture_Small">
                    <param name="Star" value="Flagstar" />
                    <param name="visible" value="!Skin.HasSetting(furniture.numericrating)" />
                </include>
                <control type="label">
                    <left>-16</left>
                    <width min="48">auto</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <align>left</align>
                    <aligny>center</aligny>
                    <label>$INFO[ListItem.Rating]</label>
                    <font>Flag</font>
                    <textcolor>Dark1</textcolor>
                    <visible>Skin.HasSetting(furniture.numericrating)</visible>
                </control>
                <control type="image">
                    <width>48</width>
                    <height>64</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1">flags/airing.png</texture>
                    <aspectratio align="left">scale</aspectratio>
                    <visible>!Skin.HasSetting(furniture.flags.nextaired) + $EXP[HasNextAired]</visible>
                </control>
                <control type="label">
                    <width min="128">auto</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <align>left</align>
                    <aligny>center</aligny>
                    <label>$VAR[LabelNextAiredDetails]</label>
                    <font>Flag</font>
                    <textcolor>Dark2</textcolor>
                    <visible>!Skin.HasSetting(furniture.flags.nextaired) + $EXP[HasNextAired]</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>60</height>
                    <centertop>50%</centertop>
                    <texture fallback="flags/fallback.png">$INFO[ListItem.VideoCodec,flags/color/source/,.png]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoCodec)</visible>
                </control>
                <control type="image">
                    <width min="20" max="80">auto</width>
                    <height>60</height>
                    <centertop>50%</centertop>
                    <texture fallback="flags/fallback.png">$INFO[ListItem.VideoAspect,flags/color/aspectratio/,.png]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoAspect)</visible>
                </control>
                <control type="image">
                    <width min="20" max="108">auto</width>
                    <height>60</height>
                    <centertop>50%</centertop>
                    <texture fallback="flags/fallback.png">$VAR[ListItemAudioCodec,flags/color/audio/,.png]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
                </control>
                <control type="image">
                    <width min="20" max="80">auto</width>
                    <height>60</height>
                    <centertop>50%</centertop>
                    <texture fallback="flags/fallback.png">$INFO[ListItem.AudioChannels,flags/color/channels/,.png]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioChannels)</visible>
                </control>
                <control type="image">
                    <width>48</width>
                    <height>64</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1">flags/video.png</texture>
                    <aspectratio align="left">scale</aspectratio>
                    <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution)</visible>
                </control>
                <control type="label">
                    <width min="128">auto</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <align>left</align>
                    <aligny>center</aligny>
                    <label>$INFO[ListItem.VideoCodec,,  •  ]$INFO[ListItem.VideoResolution]$INFO[ListItem.VideoAspect,  •  ,]$VAR[ListItemHDR,  •  ,]</label>
                    <font>Flag</font>
                    <textcolor>Dark1</textcolor>
                    <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution)</visible>
                </control>
                <control type="image">
                    <width>48</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <texture colordiffuse="Dark1">flags/audio.png</texture>
                    <aspectratio align="left">scale</aspectratio>
                    <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
                </control>
                <control type="label">
                    <width>auto</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <align>left</align>
                    <aligny>center</aligny>
                    <label>$VAR[ListItemAudioCodec]$VAR[LabelAudioChannels,  •  ,]</label>
                    <font>Flag</font>
                    <textcolor>Dark1</textcolor>
                    <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>64</height>
                    <left>10</left>
                    <centertop>50%</centertop>
                    <texture fallback="flags/fallback.png">flags/color/other/hdr10plus.png</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + $EXP[IsVideoHDR10Plus]</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>64</height>
                    <left>10</left>
                    <centertop>50%</centertop>
                    <texture fallback="flags/fallback.png">flags/color/other/hdr10.png</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + $EXP[IsVideoHDR10]</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>64</height>
                    <left>10</left>
                    <centertop>50%</centertop>
                    <texture fallback="flags/fallback.png">flags/color/other/hdrnew.png</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + $EXP[IsVideoHDR]</visible>
                </control>
                <control type="image">
                    <width min="20" max="80">auto</width>
                    <height>64</height>
                    <left>10</left>
                    <centertop>50%</centertop>
                    <texture fallback="flags/fallback.png">flags/color/other/hlg.png</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + $EXP[IsVideoHLG]</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>64</height>
                    <left>10</left>
                    <centertop>50%</centertop>
                    <texture fallback="flags/fallback.png">flags/color/other/dolbyvision.png</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + $EXP[IsVideoDolbyVision]</visible>
                </control>
                <control type="image">
                    <width min="20" max="100">auto</width>
                    <height>64</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="$VAR[ColorRating]" fallback="flags/fallback.png">$VAR[RatingFlagVar]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.MPAA) + Skin.HasSetting(furniture.coloredicons) + Skin.HasSetting(furniture.disable.default.icons.mpaa)</visible>
                </control>
                <control type="image" description="MPAA">
                    <width min="20" max="100">auto</width>
                    <height>64</height>
                    <centertop>50%</centertop>
                    <texture fallback="flags/fallback.png">flags4/$VAR[RatingFlagVar]</texture>
                    <aspectratio align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.MPAA) + Skin.HasSetting(furniture.coloredicons) + !Skin.HasSetting(furniture.disable.default.icons.mpaa)</visible>
                </control>
                <control type="image">
                    <width>48</width>
                    <height>64</height>
                    <centertop>50%</centertop>
                    <texture colordiffuse="Dark1">flags/time.png</texture>
                    <aspectratio align="left">scale</aspectratio>
                    <visible>!String.IsEmpty(ListItem.Duration(mins)) + [Control.IsVisible(500) | Control.IsVisible(53) | Control.IsVisible(52) | Control.IsVisible(55)]</visible>
                </control>
                <control type="label">
                    <width>auto</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <align>left</align>
                    <aligny>center</aligny>
                    <label>$VAR[LabelDurationTimeCheck]  </label>
                    <font>Flag</font>
                    <textcolor>Dark1</textcolor>
                    <visible>!String.IsEmpty(ListItem.Duration(mins)) + [Control.IsVisible(500) | Control.IsVisible(53) | Control.IsVisible(52) | Control.IsVisible(55)]</visible>
                </control>
                <control type="image">
                    <width>64</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <left>10</left>
                    <texture>flags/color/other/3D.png</texture>
                    <visible>ListItem.IsStereoscopic</visible>
                </control>
                <control type="image">
                    <width>84</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <left>10</left>
                    <texture>flags/color/other/$VAR[ImageBluray].png</texture>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons)</visible>
                    <visible>[String.Contains(ListItem.FilenameAndPath,bluray) | String.Contains(ListItem.FilenameAndPath,bdrip) | String.Contains(ListItem.FilenameAndPath,bd25) | String.Contains(ListItem.FilenameAndPath,bd50) | String.Contains(ListItem.FilenameAndPath,blu-ray)]</visible>
                </control>
                <control type="image" description="WEB-DL">
                    <width>84</width>
                    <height>64</height>
                    <centertop>50%</centertop>
                    <texture fallback="flags/fallback.png">flags/color/other/web-dl.png</texture>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <visible>Skin.HasSetting(furniture.flagicons) + [String.Contains(ListItem.Filenameandpath,.web.) | String.Contains(ListItem.Filenameandpath,.web-dl.) | String.Contains(ListItem.Filenameandpath,.webrip.)]</visible>
                </control>
                <control type="image">
                    <width>94</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <texture>flags/hddvd.png</texture>
                    <visible>Skin.HasSetting(furniture.flagicons)</visible>
                    <visible>String.Contains(ListItem.FilenameAndPath,hddvd)</visible>
                </control>
                <control type="image">
                    <width>84</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <texture>flags/color/other/dvd.png</texture>
                    <visible>Skin.HasSetting(furniture.flagicons)</visible>
                    <visible>String.Contains(ListItem.FilenameAndPath,dvd) + !String.Contains(ListItem.FilenameAndPath,hddvd)</visible>
                </control>
                <control type="image">
                    <width>84</width>
                    <centertop>50%</centertop>
                    <height>64</height>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <texture colordiffuse="Dark1">flags/imdb.png</texture>
                    <visible>!String.IsEmpty(ListItem.Top250)</visible>
                </control>
                <control type="label" description="IMDB Top 250">
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>-15</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[ListItem.Top250,#,]</label>
                    <visible>!String.IsEmpty(ListItem.Top250) + Skin.HasSetting(furniture.flags.top250.enable.labels)</visible>
                </control>
                <include condition="Skin.HasSetting(furniture.showsubtitles)">Subtitles_Furniture</include>
                <include condition="Skin.HasSetting(furniture.show.audiotracks)">Audiostreams_Furniture</include>
                <control type="image">
                    <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + !Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>33</width>
                    <height>33</height>
                    <left>15</left>
                    <texture background="true" colordiffuse="$VAR[ColorUserrating]">misc/userrating_white.png</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + !Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[ListItem.UserRating].0</label>
                </control>
                <control type="image">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>33</width>
                    <height>33</height>
                    <left>15</left>
                    <texture background="true">misc/mc.png</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]%</label>
                </control>
                <control type="image">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                    <fadetime>ExtendedFlagIconsFadetime</fadetime>
                    <centertop>50%</centertop>
                    <width>33</width>
                    <height>33</height>
                    <left>15</left>
                    <texture background="true">$VAR[RottenTomatoesColored]</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]%</label>
                </control>
                <control type="image">
                    <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>40</width>
                    <height>40</height>
                    <left>30</left>
                    <texture background="true" colordiffuse="$VAR[ColorUserrating]">misc/userrating_white.png</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[ListItem.UserRating].0</label>
                </control>
                <control type="image">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>40</width>
                    <height>40</height>
                    <left>30</left>
                    <texture background="true">misc/mc.png</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]%</label>
                </control>
                <control type="image">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                    <fadetime>ExtendedFlagIconsFadetime</fadetime>
                    <centertop>50%</centertop>
                    <width>40</width>
                    <height>40</height>
                    <left>30</left>
                    <texture background="true">$VAR[RottenTomatoesColored]</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]%</label>
                </control>
                <control type="image">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)) + !ListItem.IsCollection  + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                    <fadetime>ExtendedFlagIconsFadetime</fadetime>
                    <centertop>50%</centertop>
                    <width>40</width>
                    <height>40</height>
                    <left>30</left>
                    <texture background="true">$VAR[RottenTomatoesAudienceColored]</texture>
                </control>
                <control type="label">
                    <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)) + !ListItem.IsCollection  + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                    <centertop>50%</centertop>
                    <width>auto</width>
                    <height>64</height>
                    <font>Tiny</font>
                    <left>3</left>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)]%</label>
                </control>
            </control>
        </control>
    </include>

    <include name="Furniture_Flags">
        <control type="grouplist">
            <include>Animation.FurnitureVisible</include>
            <visible>!Skin.HasSetting(furniture.coloredicons)</visible>
            <visible>!Skin.HasSetting(furniture.flags)</visible>
            <visible>[Container.Content(movies) | Container.Content(musicvideos) | Container.Content(episodes) | Container.Content(tvshows) | Container.Content(sets) | Container.Content(seasons)] | [Window.IsVisible(home) + ControlGroup(301).HasFocus() + [String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,episode) | String.IsEqual(ListItem.DBType,tvshow) | String.IsEqual(ListItem.DBType,season)] + [Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] + !Skin.HasSetting(hide.furniture.flags.vertical.widgets)]</visible>
            <visible>!String.IsEqual(ListItem.Label,..)</visible>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <left>SidePad</left>
            <centerbottom>NavBarPad</centerbottom>
            <include content="def_right" condition="Skin.HasSetting(furniture.clock)">
                <param name="right" value="SidePad" />
            </include>
            <include content="def_right" condition="!Skin.HasSetting(furniture.clock)">
                <param name="right" value="440" />
            </include>
            <height>120</height>
            <orientation>horizontal</orientation>
            <align>left</align>
            <itemgap>3</itemgap>
            <usecontrolcoords>true</usecontrolcoords>
            <control type="group">
                <visible>[[Container.Content(tvshows) | Container.Content(seasons) | String.IsEqual(ListItem.DBType,tvshow) | String.IsEqual(ListItem.DBType,season)] + [!String.IsEmpty(ListItem.Property(TotalEpisodes)) | !String.IsEmpty(ListItem.Property(UnWatchedEpisodes))]] | ListItem.IsCollection | [!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution)]</visible>
                <centertop>50%</centertop>
                <width>70</width>
                <height>40</height>
                <control type="image" description="button back">
                    <width>45</width>
                    <height>45</height>
                    <left>10</left>
                    <align>center</align>
                    <texture border="0" colordiffuse="Dark1">common/circle.png</texture>
                    <visible>!ListItem.IsCollection</visible>
                </control>
                <control type="image" description="Sets">
                    <width>70</width>
                    <height>50</height>
                    <align>center</align>
                    <texture border="0" colordiffuse="Dark1">flags/sets.png</texture>
                    <visible>ListItem.IsCollection</visible>
                    <centertop>50%</centertop>
                </control>
                <control type="label">
                    <width>45</width>
                    <height>40</height>
                    <align>center</align>
                    <left>10</left>
                    <centertop>53%</centertop>
                    <label>$VAR[HDSD]</label>
                    <font>Tiny44</font>
                    <textcolor>Dark1</textcolor>
                    <visible>!ListItem.IsCollection</visible>
                </control>
            </control>
            <control type="image" description="Video Resolution">
                <width min="20" max="70">auto</width>
                <height>48</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/resolution/fallback.png">$INFO[ListItem.VideoResolution,flags/white/resolution/,.png]</texture>
                <aspectratio align="left">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.resolution) + !String.IsEmpty(ListItem.VideoResolution) + !String.Contains(ListItem.Path,videodb://movies/sets,left)</visible>
            </control>
            <include content="Def_Flags_Furniture_Small" condition="!Skin.HasSetting(furniture.flags.rating)">
                <param name="Star" value="Flagstar" />
                <param name="visible" value="!Skin.HasSetting(furniture.numericrating)" />
                <param name="color" value="Dark1" />
            </include>
            <control type="label" description="Rating">
                <left>-16</left>
                <width min="48">auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.Rating]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>Skin.HasSetting(furniture.numericrating) + !Skin.HasSetting(furniture.flags.rating)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1">flags/airing.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flags.nextaired) + $EXP[HasNextAired]</visible>
            </control>
            <control type="label">
                <width min="128">auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$VAR[LabelNextAiredDetails]</label>
                <font>Flag</font>
                <textcolor>Dark2</textcolor>
                <visible>!Skin.HasSetting(furniture.flags.nextaired) + $EXP[HasNextAired]</visible>
            </control>
            <control type="image" description="Video Codec">
                <width min="20" max="120">auto</width>
                <height>48</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[ListItem.VideoCodec,flags/white/source/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.videocodec) + !String.IsEmpty(ListItem.VideoCodec) + !Skin.HasSetting(furniture.coloredicons)</visible>
            </control>
            <control type="image" description="Aspect Ratio">
                <width min="20" max="80">auto</width>
                <height>55</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[ListItem.VideoAspect,flags/aspectratio/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.aspectratio) + !String.IsEmpty(ListItem.VideoAspect) + !Skin.HasSetting(furniture.coloredicons)</visible>
            </control>
            <control type="image" description="Audio Codec">
                <width min="20" max="108">auto</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">$VAR[ListItemAudioCodec,flags3/audio/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.audiocodec) + !String.IsEmpty(ListItem.AudioCodec) + !Skin.HasSetting(furniture.coloredicons)</visible>
            </control>
            <control type="image" description="Audio Channels">
                <width min="20" max="80">auto</width>
                <height>45</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[ListItem.AudioChannels,flags/channels/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.audiochannels) + !String.IsEmpty(ListItem.AudioChannels)</visible>
            </control>
            <control type="image" description="Video Resolution">
                <width>48</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1">flags/video.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution)</visible>
            </control>
            <control type="label" description="Video">
                <width min="128">auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.VideoCodec,,  •  ]$INFO[ListItem.VideoResolution]$INFO[ListItem.VideoAspect,  •  ,]$VAR[ListItemHDR,  •  ,]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution)</visible>
            </control>
            <control type="image" description="Audio">
                <width>48</width>
                <centertop>50%</centertop>
                <height>64</height>
                <texture colordiffuse="Dark1">flags/audio.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
            </control>
            <control type="label" description="Audio">
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$VAR[ListItemAudioCodec]$VAR[LabelAudioChannels,  •  ,]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
            </control>
            <control type="image" description="HDR10+">
                <width min="20" max="130">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/hdr10plus.png</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.hdr) + $EXP[IsVideoHDR10Plus]</visible>
            </control>
            <control type="image" description="HDR10">
                <width min="20" max="130">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/hdr10.png</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.hdr) + $EXP[IsVideoHDR10]</visible>
            </control>
            <control type="image" description="HDR">
                <width min="20" max="100">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/hdr.png</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.hdr) + $EXP[IsVideoHDR]</visible>
            </control>
            <control type="image" description="HLG">
                <width min="20" max="80">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/hlg.png</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.hdr) + $EXP[IsVideoHLG]</visible>
            </control>
            <control type="image" description="Dolby Vision">
                <width min="20" max="130">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/dolbyvision.png</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.hdr) + $EXP[IsVideoDolbyVision]</visible>
            </control>
            <control type="image" description="MPAA">
                <width min="20" max="100">auto</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">$VAR[RatingFlagVar]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.mpaa) + !String.IsEmpty(ListItem.MPAA) + !Skin.HasSetting(furniture.coloredicons)</visible>
            </control>
            <control type="image" description="Duration">
                <width>48</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1">flags/time.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!String.IsEmpty(ListItem.Duration(mins)) + [Control.IsVisible(500) | Control.IsVisible(53) | Control.IsVisible(52) | Control.IsVisible(55)]</visible>
            </control>
            <control type="label" description="Duration">
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$VAR[LabelDurationTimeCheck]  </label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!String.IsEmpty(ListItem.Duration(mins)) + [Control.IsVisible(500) | Control.IsVisible(53) | Control.IsVisible(52) | Control.IsVisible(55)]</visible>
            </control>
            <control type="image" description="3D">
                <width>64</width>
                <centertop>50%</centertop>
                <height>64</height>
                <left>10</left>
                <texture colordiffuse="Dark1">flags/3D.png</texture>
                <visible>ListItem.IsStereoscopic</visible>
            </control>
            <control type="image" description="Bluray">
                <width>84</width>
                <centertop>50%</centertop>
                <height>64</height>
                <left>10</left>
                <texture colordiffuse="Dark1">flags/$VAR[ImageBluray].png</texture>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.bluray)</visible>
                <visible>[String.Contains(ListItem.FilenameAndPath,bluray) | String.Contains(ListItem.FilenameAndPath,bdrip) | String.Contains(ListItem.FilenameAndPath,bd25) | String.Contains(ListItem.FilenameAndPath,bd50) | String.Contains(ListItem.FilenameAndPath,blu-ray)]</visible>
            </control>
            <control type="image" description="WEB-DL">
                <width>84</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/web-dl.png</texture>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.bluray) + [String.Contains(ListItem.Filenameandpath,.web.) | String.Contains(ListItem.Filenameandpath,.web-dl.) | String.Contains(ListItem.Filenameandpath,.webrip.)]</visible>
            </control>
            <control type="image" description="HD DVD">
                <width>94</width>
                <centertop>50%</centertop>
                <height>64</height>
                <left>10</left>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture colordiffuse="Dark1">flags/hddvd.png</texture>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.bluray)</visible>
                <visible>String.Contains(ListItem.FilenameAndPath,hddvd)</visible>
            </control>
            <control type="image" description="DVD">
                <width>84</width>
                <centertop>50%</centertop>
                <height>64</height>
                <left>10</left>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture colordiffuse="Dark1">flags/dvd.png</texture>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.bluray)</visible>
                <visible>String.Contains(ListItem.FilenameAndPath,dvd) + !String.Contains(ListItem.FilenameAndPath,hddvd)</visible>
            </control>
            <control type="image" description="IMDB Top 250">
                <width>84</width>
                <centertop>50%</centertop>
                <height>64</height>
                <left>0</left>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture colordiffuse="Dark1">flags/imdb.png</texture>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.top250) + !String.IsEmpty(ListItem.Top250)</visible>
            </control>
            <control type="label" description="IMDB Top 250">
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>-15</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[ListItem.Top250,#,]</label>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.top250) + !String.IsEmpty(ListItem.Top250) + Skin.HasSetting(furniture.flags.top250.enable.labels)</visible>
            </control>
            <include condition="Skin.HasSetting(furniture.showsubtitles)">Subtitles_Furniture</include>
            <include condition="Skin.HasSetting(furniture.show.audiotracks)">Audiostreams_Furniture</include>
            <control type="image" description="User rating">
                <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>33</width>
                <height>33</height>
                <left>15</left>
                <texture colordiffuse="Dark1" background="true">misc/userrating_white.png</texture>
            </control>
            <control type="label" description="User rating">
                <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[ListItem.UserRating].0</label>
            </control>
            <control type="image" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                <include>Animation.FadeIn</include>
                <centertop>50%</centertop>
                <width>33</width>
                <height>33</height>
                <left>15</left>
                <texture colordiffuse="Dark1" background="true">misc/mc_white.png</texture>
            </control>
            <control type="label" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]%</label>
            </control>
            <control type="image" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                <fadetime>ExtendedFlagIconsFadetime</fadetime>
                <centertop>50%</centertop>
                <width>33</width>
                <height>33</height>
                <left>15</left>
                <texture colordiffuse="Dark1" background="true">$VAR[RottenTomatoes]</texture>
            </control>
            <control type="label" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]%</label>
            </control>
            <control type="image" description="User rating">
                <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>38</width>
                <height>38</height>
                <left>20</left>
                <texture colordiffuse="Dark1" background="true">misc/userrating_white.png</texture>
            </control>
            <control type="label" description="User rating">
                <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[ListItem.UserRating].0</label>
            </control>
            <control type="image" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>38</width>
                <height>38</height>
                <left>35</left>
                <texture colordiffuse="Dark1" background="true">misc/mc_white.png</texture>
            </control>
            <control type="label" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]%</label>
            </control>
            <control type="image" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <fadetime>ExtendedFlagIconsFadetime</fadetime>
                <centertop>50%</centertop>
                <width>38</width>
                <height>38</height>
                <left>35</left>
                <texture colordiffuse="Dark1" background="true">$VAR[RottenTomatoes]</texture>
            </control>
            <control type="label" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]%</label>
            </control>
            <control type="image" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)) + !ListItem.IsCollection  + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <fadetime>ExtendedFlagIconsFadetime</fadetime>
                <centertop>50%</centertop>
                <width>38</width>
                <height>38</height>
                <left>35</left>
                <texture colordiffuse="Dark1" background="true">$VAR[RottenTomatoesAudience]</texture>
            </control>
            <control type="label" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)) + !ListItem.IsCollection  + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)]%</label>
            </control>
        </control>
        <control type="grouplist">
            <include>Animation.FurnitureVisible</include>
            <visible>Skin.HasSetting(furniture.coloredicons)</visible>
            <visible>!Skin.HasSetting(furniture.flags)</visible>
            <visible>[Container.Content(movies) | Container.Content(musicvideos) | Container.Content(episodes) | Container.Content(sets) | Container.Content(tvshows) | Container.Content(seasons)] | [Window.IsVisible(home) + ControlGroup(301).HasFocus() + [String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,episode) | String.IsEqual(ListItem.DBType,tvshow) | String.IsEqual(ListItem.DBType,season)] + [Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] + !Skin.HasSetting(hide.furniture.flags.vertical.widgets)]</visible>
            <visible>!String.IsEqual(ListItem.Label,..)</visible>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <left>SidePad</left>
            <centerbottom>NavBarPad</centerbottom>
            <include content="def_right" condition="Skin.HasSetting(furniture.clock)">
                <param name="right" value="SidePad" />
            </include>
            <include content="def_right" condition="!Skin.HasSetting(furniture.clock)">
                <param name="right" value="440" />
            </include>
            <height>120</height>
            <orientation>horizontal</orientation>
            <align>left</align>
            <itemgap>3</itemgap>
            <usecontrolcoords>true</usecontrolcoords>
            <control type="group">
                <visible>[[Container.Content(tvshows) | Container.Content(seasons) | String.IsEqual(ListItem.DBType,tvshow) | String.IsEqual(ListItem.DBType,season)] + [!String.IsEmpty(ListItem.Property(TotalEpisodes)) | !String.IsEmpty(ListItem.Property(UnWatchedEpisodes))]] | ListItem.IsCollection | [!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution)]</visible>
                <centertop>50%</centertop>
                <width>70</width>
                <height>40</height>
                <control type="image" description="button back">
                    <width>45</width>
                    <height>45</height>
                    <align>center</align>
                    <left>10</left>
                    <texture border="0" colordiffuse="Dark1">common/circle.png</texture>
                    <visible>!ListItem.IsCollection</visible>
                </control>
                <control type="image" description="Sets">
                    <width>70</width>
                    <height>50</height>
                    <align>center</align>
                    <texture border="0" colordiffuse="Dark1">flags/sets.png</texture>
                    <visible>ListItem.IsCollection</visible>
                    <centertop>50%</centertop>
                </control>
                <control type="label">
                    <width>45</width>
                    <height>40</height>
                    <align>center</align>
                    <centertop>53%</centertop>
                    <label>$VAR[HDSD]</label>
                    <font>Tiny44</font>
                    <left>10</left>
                    <textcolor>Dark1</textcolor>
                    <visible>!ListItem.IsCollection</visible>
                </control>
            </control>
            <control type="image" description="Video Resolution">
                <width min="20" max="90">auto</width>
                <height>70</height>
                <left>-10</left>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">$INFO[ListItem.VideoResolution,flags/color/resolution/,.png]</texture>
                <aspectratio align="left">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.resolution) + !String.IsEmpty(ListItem.VideoResolution) + !String.Contains(ListItem.Path,videodb://movies/sets,left)</visible>
            </control>
            <include content="Def_Flags_Furniture_Small" condition="!Skin.HasSetting(furniture.flags.rating)">
                <param name="Star" value="Flagstar" />
                <param name="visible" value="!Skin.HasSetting(furniture.numericrating)" />
            </include>
            <control type="label" description="Rating">
                <left>-16</left>
                <width min="48">auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.Rating]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>Skin.HasSetting(furniture.numericrating) + !Skin.HasSetting(furniture.flags.rating)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1">flags/airing.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flags.nextaired) + $EXP[HasNextAired]</visible>
            </control>
            <control type="label">
                <width min="128">auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$VAR[LabelNextAiredDetails]</label>
                <font>Flag</font>
                <textcolor>Dark2</textcolor>
                <visible>!Skin.HasSetting(furniture.flags.nextaired) + $EXP[HasNextAired]</visible>
            </control>
            <control type="image" description="Video Codec">
                <width min="20" max="100">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">$INFO[ListItem.VideoCodec,flags/color/source/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.videocodec) + !String.IsEmpty(ListItem.VideoCodec)</visible>
            </control>
            <control type="image" description="Aspect Ratio">
                <width min="20" max="80">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">$INFO[ListItem.VideoAspect,flags/color/aspectratio/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.aspectratio) + !String.IsEmpty(ListItem.VideoAspect)</visible>
            </control>
            <control type="image" description="Audio Codec">
                <width min="20" max="108">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">$VAR[ListItemAudioCodec,flags/color/audio/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.audiocodec) + !String.IsEmpty(ListItem.AudioCodec)</visible>
            </control>
            <control type="image" description="Audio Channels">
                <width min="20" max="80">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">$INFO[ListItem.AudioChannels,flags/color/channels/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.audiochannels) + !String.IsEmpty(ListItem.AudioChannels)</visible>
            </control>
            <control type="image" description="Video Resolution">
                <width>48</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1">flags/video.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution)</visible>
            </control>
            <control type="label" description="Video">
                <width min="128">auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.VideoCodec,,  •  ]$INFO[ListItem.VideoResolution]$INFO[ListItem.VideoAspect,  •  ,]$VAR[ListItemHDR,  •  ,]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.VideoResolution)</visible>
            </control>
            <control type="image" description="Audio">
                <width>48</width>
                <centertop>50%</centertop>
                <height>64</height>
                <texture colordiffuse="Dark1">flags/audio.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
            </control>
            <control type="label" description="Audio">
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$VAR[ListItemAudioCodec]$VAR[LabelAudioChannels,  •  ,]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
            </control>
            <control type="image" description="HDR10+">
                <width min="20" max="100">auto</width>
                <height>64</height>
                <left>10</left>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">flags/color/other/hdr10plus.png</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.hdr) + $EXP[IsVideoHDR10Plus]</visible>
            </control>
            <control type="image" description="HDR10">
                <width min="20" max="100">auto</width>
                <height>64</height>
                <left>10</left>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">flags/color/other/hdr10.png</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.hdr) + $EXP[IsVideoHDR10]</visible>
            </control>
            <control type="image" description="HDR">
                <width min="20" max="100">auto</width>
                <height>64</height>
                <left>10</left>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">flags/color/other/hdrnew.png</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.hdr) + $EXP[IsVideoHDR]</visible>
            </control>
            <control type="image" description="HLG">
                <width min="20" max="80">auto</width>
                <height>64</height>
                <left>10</left>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">flags/color/other/hlg.png</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.hdr) + $EXP[IsVideoHLG]</visible>
            </control>
            <control type="image" description="Dolby Vision">
                <width min="20" max="100">auto</width>
                <height>64</height>
                <left>10</left>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">flags/color/other/dolbyvision.png</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.hdr) + $EXP[IsVideoDolbyVision]</visible>
            </control>
            <control type="image" description="MPAA">
                <width min="20" max="100">auto</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="$VAR[ColorRating]" fallback="flags/fallback.png">$VAR[RatingFlagVar]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.mpaa) + !String.IsEmpty(ListItem.MPAA) + Skin.HasSetting(furniture.coloredicons) + Skin.HasSetting(furniture.disable.default.icons.mpaa)</visible>
            </control>
            <control type="image" description="MPAA">
                <width min="20" max="100">auto</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">flags4/$VAR[RatingFlagVar]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.mpaa) + !String.IsEmpty(ListItem.MPAA) + Skin.HasSetting(furniture.coloredicons) + !Skin.HasSetting(furniture.disable.default.icons.mpaa)</visible>
            </control>
            <control type="image" description="Duration">
                <width>48</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1">flags/time.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!String.IsEmpty(ListItem.Duration(mins)) + [Control.IsVisible(500) | Control.IsVisible(53) | Control.IsVisible(52) | Control.IsVisible(55)]</visible>
            </control>
            <control type="label" description="Duration">
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$VAR[LabelDurationTimeCheck]  </label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!String.IsEmpty(ListItem.Duration(mins)) + [Control.IsVisible(500) | Control.IsVisible(53) | Control.IsVisible(52) | Control.IsVisible(55)]</visible>
            </control>
            <control type="image" description="3D">
                <width>64</width>
                <centertop>50%</centertop>
                <height>64</height>
                <left>10</left>
                <texture>flags/color/other/3D.png</texture>
                <visible>ListItem.IsStereoscopic</visible>
            </control>
            <control type="image" description="Bluray">
                <width>84</width>
                <centertop>50%</centertop>
                <height>64</height>
                <left>10</left>
                <texture>flags/color/other/$VAR[ImageBluray].png</texture>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.bluray)</visible>
                <visible>[String.Contains(ListItem.FilenameAndPath,bluray) | String.Contains(ListItem.FilenameAndPath,bdrip) | String.Contains(ListItem.FilenameAndPath,bd25) | String.Contains(ListItem.FilenameAndPath,bd50) | String.Contains(ListItem.FilenameAndPath,blu-ray)]</visible>
            </control>
            <control type="image" description="WEB-DL">
                <width>84</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">flags/color/other/web-dl.png</texture>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.bluray) + [String.Contains(ListItem.Filenameandpath,.web.) | String.Contains(ListItem.Filenameandpath,.web-dl.) | String.Contains(ListItem.Filenameandpath,.webrip.)]</visible>
            </control>
            <control type="image" description="HD DVD">
                <width>94</width>
                <centertop>50%</centertop>
                <height>64</height>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture>flags/hddvd.png</texture>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.bluray)</visible>
                <visible>String.Contains(ListItem.FilenameAndPath,hddvd)</visible>
            </control>
            <control type="image" description="DVD">
                <width>84</width>
                <centertop>50%</centertop>
                <height>64</height>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture>flags/color/other/dvd.png</texture>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.bluray)</visible>
                <visible>String.Contains(ListItem.FilenameAndPath,dvd) + !String.Contains(ListItem.FilenameAndPath,hddvd)</visible>
            </control>
            <control type="image" description="IMDB Top 250">
                <width>84</width>
                <centertop>50%</centertop>
                <height>64</height>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture colordiffuse="Dark1">flags/imdb.png</texture>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.top250) + !String.IsEmpty(ListItem.Top250)</visible>
            </control>
            <control type="label" description="IMDB Top 250">
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>-15</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[ListItem.Top250,#,]</label>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.top250) + !String.IsEmpty(ListItem.Top250) + Skin.HasSetting(furniture.flags.top250.enable.labels)</visible>
            </control>
            <include condition="Skin.HasSetting(furniture.showsubtitles)">Subtitles_Furniture</include>
            <include condition="Skin.HasSetting(furniture.show.audiotracks)">Audiostreams_Furniture</include>
            <control type="image" description="User rating">
                <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>33</width>
                <height>33</height>
                <left>15</left>
                <texture background="true" colordiffuse="$VAR[ColorUserrating]">misc/userrating_white.png</texture>
            </control>
            <control type="label" description="User rating">
                <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[ListItem.UserRating].0</label>
            </control>
            <control type="image" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>33</width>
                <height>33</height>
                <left>15</left>
                <texture background="true">misc/mc.png</texture>
            </control>
            <control type="label" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]%</label>
            </control>
            <control type="image" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                <fadetime>ExtendedFlagIconsFadetime</fadetime>
                <centertop>50%</centertop>
                <width>33</width>
                <height>33</height>
                <left>15</left>
                <texture background="true">$VAR[RottenTomatoesColored]</texture>
            </control>
            <control type="label" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]%</label>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>40</width>
                <height>40</height>
                <left>20</left>
                <texture background="true" colordiffuse="$VAR[ColorUserrating]">misc/userrating_white.png</texture>
            </control>
            <control type="label" description="User rating">
                <visible>!String.IsEmpty(ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[ListItem.UserRating].0</label>
            </control>
            <control type="image" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>40</width>
                <height>40</height>
                <left>30</left>
                <texture background="true">misc/mc.png</texture>
            </control>
            <control type="label" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]%</label>
            </control>
            <control type="image" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <fadetime>ExtendedFlagIconsFadetime</fadetime>
                <centertop>50%</centertop>
                <width>40</width>
                <height>40</height>
                <left>30</left>
                <texture background="true">$VAR[RottenTomatoesColored]</texture>
            </control>
            <control type="label" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]%</label>
            </control>
            <control type="image" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)) + !ListItem.IsCollection  + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <fadetime>ExtendedFlagIconsFadetime</fadetime>
                <centertop>50%</centertop>
                <width>40</width>
                <height>40</height>
                <left>30</left>
                <texture background="true">$VAR[RottenTomatoesAudienceColored]</texture>
            </control>
            <control type="label" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)) + !ListItem.IsCollection  + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)]%</label>
            </control>
        </control>
        <control type="grouplist">
            <include>Animation.FurnitureVisible</include>
            <visible>Skin.HasSetting(furniture.flags)</visible>
            <visible>[Container.Content(movies) | Container.Content(episodes)] | [Window.IsVisible(home) + ControlGroup(301).HasFocus() + [String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,episode)] + [Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] + !Skin.HasSetting(hide.furniture.flags.vertical.widgets)]</visible>
            <visible>!String.IsEqual(ListItem.Label,..)</visible>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <left>SidePad</left>
            <centerbottom>NavBarPad</centerbottom>
            <include content="def_right" condition="Skin.HasSetting(furniture.clock)">
                <param name="right" value="SidePad" />
            </include>
            <include content="def_right" condition="!Skin.HasSetting(furniture.clock)">
                <param name="right" value="440" />
            </include>
            <height>120</height>
            <orientation>horizontal</orientation>
            <align>left</align>
            <itemgap>3</itemgap>
            <usecontrolcoords>true</usecontrolcoords>
            <control type="image" description="Duration">
                <width>48</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1">flags/time.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!String.IsEmpty(ListItem.Duration(mins)) + [Control.IsVisible(500) | Control.IsVisible(53) | Control.IsVisible(52) | Control.IsVisible(55)]</visible>
            </control>
            <control type="label" description="Duration">
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$VAR[LabelDurationTimeCheck]  </label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!String.IsEmpty(ListItem.Duration(mins)) + [Control.IsVisible(500) | Control.IsVisible(53) | Control.IsVisible(52) | Control.IsVisible(55)]</visible>
            </control>
        </control>
    </include>

    <include name="Furniture_Hub_Flags">
        <control type="grouplist">
            <include>Animation.FurnitureVisible</include>
            <visible>!Skin.HasSetting(furniture.coloredicons)</visible>
            <visible>!Skin.HasSetting(furniture.flags)</visible>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <left>SidePad</left>
            <centerbottom>NavBarPad</centerbottom>
            <include content="def_right" condition="Skin.HasSetting(furniture.clock)">
                <param name="right" value="SidePad" />
            </include>
            <include content="def_right" condition="!Skin.HasSetting(furniture.clock)">
                <param name="right" value="440" />
            </include>
            <height>64</height>
            <orientation>horizontal</orientation>
            <align>left</align>
            <itemgap>3</itemgap>
            <usecontrolcoords>true</usecontrolcoords>
            <control type="group">
                <visible>!Skin.HasSetting(furniture.flagicons) | String.IsEmpty(Container(9500).ListItem.VideoResolution)</visible>
                <width>70</width>
                <height>40</height>
                <centertop>50%</centertop>
                <control type="image" description="button back">
                    <width>45</width>
                    <height>45</height>
                    <left>10</left>
                    <texture border="0" colordiffuse="Dark1">common/circle.png</texture>
                </control>
                <control type="label">
                    <width>45</width>
                    <height>40</height>
                    <align>center</align>
                    <centertop>53%</centertop>
                    <label>$VAR[HDSD]</label>
                    <font>Tiny44</font>
                    <left>10</left>
                    <textcolor>Dark1</textcolor>
                    <visible>!String.Contains(Container(9500).ListItem.Path,videodb://movies/sets,left)</visible>
                </control>
                <control type="image">
                    <width>70</width>
                    <height>50</height>
                    <left>10</left>
                    <texture colordiffuse="Light1">flags/sets.png</texture>
                    <visible>String.Contains(Container(9500).ListItem.Path,videodb://movies/sets,left)</visible>
                </control>
            </control>
            <control type="image">
                <width min="20" max="70">auto</width>
                <height>48</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/resolution/fallback.png">$INFO[Container(9500).ListItem.VideoResolution,flags/white/resolution/,.png]</texture>
                <aspectratio align="left">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.VideoResolution) + !String.Contains(ListItem.Path,videodb://movies/sets,left)</visible>
            </control>
            <include content="Def_Flags_Furniture_Small">
                <param name="Star" value="HubFlagstar" />
                <param name="visible" value="!Skin.HasSetting(furniture.numericrating)" />
                <param name="color" value="Dark1" />
            </include>
            <control type="label">
                <left>-16</left>
                <width min="48">auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[Container(9500).ListItem.Rating]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>Skin.HasSetting(furniture.numericrating)</visible>
            </control>
            <control type="image">
                <width min="20" max="100">auto</width>
                <height>48</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[Container(9500).ListItem.VideoCodec,flags/white/source/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.VideoCodec) + !Skin.HasSetting(furniture.coloredicons)</visible>
            </control>
            <control type="image">
                <width min="20" max="80">auto</width>
                <height>55</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[Container(9500).ListItem.VideoAspect,flags/aspectratio/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.VideoAspect) + !Skin.HasSetting(furniture.coloredicons)</visible>
            </control>
            <control type="image">
                <width min="20" max="108">auto</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[Container(9500).ListItem.AudioCodec,flags3/audio/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.AudioCodec) + !Skin.HasSetting(furniture.coloredicons)</visible>
            </control>
            <control type="image">
                <width min="20" max="80">auto</width>
                <height>45</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[Container(9500).ListItem.AudioChannels,flags/channels/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.AudioChannels)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <height>64</height>
                <texture colordiffuse="Dark1">flags/video.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.VideoResolution)</visible>
            </control>
            <control type="label">
                <width min="128">auto</width>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[Container(9500).ListItem.VideoCodec,,  •  ]$INFO[Container(9500).ListItem.VideoResolution]$INFO[Container(9500).ListItem.VideoAspect,  •  ,]$VAR[ListItemHDR,  •  ,]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.VideoResolution)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <height>64</height>
                <texture colordiffuse="Dark1">flags/audio.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.AudioCodec)</visible>
            </control>
            <control type="label">
                <width min="128">auto</width>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[Container(9500).ListItem.AudioCodec]$VAR[LabelHubAudioChannels,  •  ,]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.AudioCodec)</visible>
            </control>
            <control type="image">
                <width min="20" max="100">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/hdr.png</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>$EXP[IsVideoHDR]</visible>
            </control>
            <control type="image">
                <width min="20" max="100">auto</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">$VAR[RatingFlagVarHub]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.MPAA) + !Skin.HasSetting(furniture.coloredicons)</visible>
            </control>
            <control type="image">
                <width>64</width>
                <height>64</height>
                <left>10</left>
                <texture colordiffuse="Dark1">flags/3D.png</texture>
                <visible>Container(9500).ListItem.IsStereoscopic</visible>
            </control>
            <control type="image">
                <width>84</width>
                <centertop>50%</centertop>
                <height>64</height>
                <left>10</left>
                <texture colordiffuse="Dark1">flags/$VAR[ImageBluray].png</texture>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons)</visible>
                <visible>[String.Contains(Container(9500).ListItem.FilenameAndPath,bluray) | String.Contains(Container(9500).ListItem.FilenameAndPath,bdrip) | String.Contains(Container(9500).ListItem.FilenameAndPath,bd25) | String.Contains(Container(9500).ListItem.FilenameAndPath,bd50) | String.Contains(Container(9500).ListItem.FilenameAndPath,blu-ray)]</visible>
            </control>
            <control type="image" description="WEB-DL">
                <width>84</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">flags/other/web-dl.png</texture>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.bluray) + [String.Contains(Container(9500).ListItem.Filenameandpath,.web.) | String.Contains(Container(9500).ListItem.Filenameandpath,.web-dl.) | String.Contains(Container(9500).ListItem.Filenameandpath,.webrip.)]</visible>
            </control>
            <control type="image">
                <width>94</width>
                <centertop>50%</centertop>
                <height>64</height>
                <left>10</left>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture colordiffuse="Dark1">flags/hddvd.png</texture>
                <visible>String.Contains(Container(9500).ListItem.FilenameAndPath,hddvd)</visible>
            </control>
            <control type="image">
                <width>64</width>
                <centertop>50%</centertop>
                <height>64</height>
                <left>10</left>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture colordiffuse="Dark1">flags/dvd.png</texture>
                <visible>String.Contains(Container(9500).ListItem.FilenameAndPath,dvd) + !String.Contains(Container(9500).ListItem.FilenameAndPath,hddvd)</visible>
            </control>
            <control type="image">
                <width>84</width>
                <centertop>50%</centertop>
                <height>64</height>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture colordiffuse="Dark1">flags/imdb.png</texture>
                <visible>!String.IsEmpty(Container(9500).ListItem.Top250)</visible>
            </control>
            <control type="label" description="IMDB Top 250">
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>-15</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Container(9500).ListItem.Top250,#,]</label>
                <visible>!String.IsEmpty(Container(9500).ListItem.Top250) + Skin.HasSetting(furniture.flags.top250.enable.labels)</visible>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(Container(9500).ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating)+ !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>33</width>
                <height>33</height>
                <left>15</left>
                <texture colordiffuse="Dark1" background="true">misc/userrating_white.png</texture>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(Container(9500).ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating)+ !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Container(9500).ListItem.UserRating].0</label>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics)+ !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>33</width>
                <height>33</height>
                <left>15</left>
                <texture colordiffuse="Dark1" background="true">misc/mc_white.png</texture>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics)+ !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]%</label>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics)+ !Skin.HasSetting(furniture.flagicons)</visible>
                <fadetime>ExtendedFlagIconsFadetime</fadetime>
                <centertop>50%</centertop>
                <width>33</width>
                <height>33</height>
                <left>15</left>
                <texture colordiffuse="Dark1" background="true">$VAR[RottenTomatoes]</texture>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics)+ !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]%</label>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(Container(9500).ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating)+ Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>38</width>
                <height>38</height>
                <left>30</left>
                <texture colordiffuse="Dark1" background="true">misc/userrating_white.png</texture>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(Container(9500).ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating)+ Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Container(9500).ListItem.UserRating].0</label>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics)+ Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>38</width>
                <height>38</height>
                <left>30</left>
                <texture colordiffuse="Dark1" background="true">misc/mc_white.png</texture>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics)+ Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]%</label>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics)+ Skin.HasSetting(furniture.flagicons)</visible>
                <fadetime>ExtendedFlagIconsFadetime</fadetime>
                <centertop>50%</centertop>
                <width>38</width>
                <height>38</height>
                <left>30</left>
                <texture colordiffuse="Dark1" background="true">$VAR[RottenTomatoes]</texture>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics)+ Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]%</label>
            </control>
            <control type="image" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <fadetime>ExtendedFlagIconsFadetime</fadetime>
                <centertop>50%</centertop>
                <width>38</width>
                <height>38</height>
                <left>35</left>
                <texture colordiffuse="Dark1" background="true">$VAR[RottenTomatoesAudience]</texture>
            </control>
            <control type="label" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)]%</label>
            </control>
        </control>
        <control type="grouplist">
            <include>Animation.FurnitureVisible</include>
            <visible>Skin.HasSetting(furniture.coloredicons)</visible>
            <visible>!Skin.HasSetting(furniture.flags)</visible>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <left>SidePad</left>
            <centerbottom>NavBarPad</centerbottom>
            <include content="def_right" condition="Skin.HasSetting(furniture.clock)">
                <param name="right" value="SidePad" />
            </include>
            <include content="def_right" condition="!Skin.HasSetting(furniture.clock)">
                <param name="right" value="440" />
            </include>
            <height>64</height>
            <orientation>horizontal</orientation>
            <align>left</align>
            <itemgap>3</itemgap>
            <usecontrolcoords>true</usecontrolcoords>
            <control type="group">
                <visible>!Skin.HasSetting(furniture.flagicons) | String.IsEmpty(Container(9500).ListItem.VideoResolution)</visible>
                <width>70</width>
                <height>40</height>
                <centertop>50%</centertop>
                <control type="image" description="button back">
                    <width>45</width>
                    <height>45</height>
                    <left>10</left>
                    <texture border="0" colordiffuse="Dark1">common/circle.png</texture>
                </control>
                <control type="label">
                    <width>45</width>
                    <height>40</height>
                    <align>center</align>
                    <centertop>53%</centertop>
                    <label>$VAR[HDSD]</label>
                    <font>Tiny44</font>
                    <left>10</left>
                    <textcolor>Dark1</textcolor>
                    <visible>!String.Contains(Container(9500).ListItem.Path,videodb://movies/sets,left)</visible>
                </control>
                <control type="image">
                    <width>70</width>
                    <height>50</height>
                    <left>10</left>
                    <texture colordiffuse="Light1">flags/sets.png</texture>
                    <visible>String.Contains(Container(9500).ListItem.Path,videodb://movies/sets,left)</visible>
                </control>
            </control>
            <control type="image">
                <width min="20" max="90">auto</width>
                <height>70</height>
                <left>-10</left>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">$INFO[Container(9500).ListItem.VideoResolution,flags/color/resolution/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.VideoResolution)</visible>
            </control>
            <include content="Def_Flags_Furniture_Small">
                <param name="Star" value="HubFlagstar" />
                <param name="visible" value="!Skin.HasSetting(furniture.numericrating)" />
            </include>
            <control type="label">
                <left>-16</left>
                <width min="48">auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[Container(9500).ListItem.Rating]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>Skin.HasSetting(furniture.numericrating)</visible>
            </control>
            <control type="image">
                <width min="20" max="100">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">$INFO[Container(9500).ListItem.VideoCodec,flags/color/source/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.VideoCodec)</visible>
            </control>
            <control type="image">
                <width min="20" max="80">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">$INFO[Container(9500).ListItem.VideoAspect,flags/color/aspectratio/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.VideoAspect)</visible>
            </control>
            <control type="image">
                <width min="20" max="108">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">$INFO[Container(9500).ListItem.AudioCodec,flags/color/audio/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.AudioCodec)</visible>
            </control>
            <control type="image">
                <width min="20" max="80">auto</width>
                <height>60</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">$INFO[Container(9500).ListItem.AudioChannels,flags/color/channels/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.AudioChannels)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <height>64</height>
                <texture colordiffuse="Dark1">flags/video.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.VideoResolution)</visible>
            </control>
            <control type="label">
                <width min="128">auto</width>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[Container(9500).ListItem.VideoCodec,,  •  ]$INFO[Container(9500).ListItem.VideoResolution]$INFO[Container(9500).ListItem.VideoAspect,  •  ,]$VAR[ListItemHDR,  •  ,]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.VideoResolution)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <height>64</height>
                <texture colordiffuse="Dark1">flags/audio.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.AudioCodec)</visible>
            </control>
            <control type="label">
                <width min="128">auto</width>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[Container(9500).ListItem.AudioCodec]$VAR[LabelHubAudioChannels,  •  ,]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.AudioCodec)</visible>
            </control>
            <control type="image">
                <width min="20" max="100">auto</width>
                <height>64</height>
                <left>10</left>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">flags/color/other/hdrnew.png</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + $EXP[IsVideoHDR]</visible>
            </control>
            <control type="image">
                <width min="20" max="100">auto</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="$VAR[ColorRating]" fallback="flags/fallback.png">$VAR[RatingFlagVarHub]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.MPAA) + Skin.HasSetting(furniture.coloredicons) + Skin.HasSetting(furniture.disable.default.icons.mpaa)</visible>
            </control>
            <control type="image" description="MPAA">
                <width min="20" max="100">auto</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">flags4/$VAR[RatingFlagVarHub]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(Container(9500).ListItem.MPAA) + Skin.HasSetting(furniture.coloredicons) + !Skin.HasSetting(furniture.disable.default.icons.mpaa)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <height>64</height>
                <left>10</left>
                <texture>flags/color/other/3D.png</texture>
                <visible>Container(9500).ListItem.IsStereoscopic</visible>
            </control>
            <control type="image">
                <width>84</width>
                <left>10</left>
                <centertop>50%</centertop>
                <height>64</height>
                <texture>flags/color/other/$VAR[ImageBluray9500].png</texture>
                <visible>Skin.HasSetting(furniture.flagicons)</visible>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <visible>[String.Contains(Container(9500).ListItem.FilenameAndPath,bluray) | String.Contains(Container(9500).ListItem.FilenameAndPath,bdrip) | String.Contains(Container(9500).ListItem.FilenameAndPath,bd25) | String.Contains(Container(9500).ListItem.FilenameAndPath,bd50) | String.Contains(Container(9500).ListItem.FilenameAndPath,blu-ray)]</visible>
            </control>
            <control type="image" description="WEB-DL">
                <width>84</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">flags/color/other/web-dl.png</texture>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !Skin.HasSetting(furniture.flags.bluray) + [String.Contains(Container(9500).ListItem.Filenameandpath,.web.) | String.Contains(Container(9500).ListItem.Filenameandpath,.web-dl.) | String.Contains(Container(9500).ListItem.Filenameandpath,.webrip.)]</visible>
            </control>
            <control type="image">
                <width>94</width>
                <centertop>50%</centertop>
                <height>64</height>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture>flags/color/other/dvd.png</texture>
                <visible>Skin.HasSetting(furniture.flagicons)</visible>
                <visible>String.Contains(Container(9500).ListItem.FilenameAndPath,hddvd)</visible>
            </control>
            <control type="image">
                <width>64</width>
                <centertop>50%</centertop>
                <height>64</height>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture>flags/color/other/dvd.png</texture>
                <visible>Skin.HasSetting(furniture.flagicons)</visible>
                <visible>String.Contains(Container(9500).ListItem.FilenameAndPath,dvd) + !String.Contains(Container(9500).ListItem.FilenameAndPath,hddvd)</visible>
            </control>
            <control type="image">
                <width>84</width>
                <centertop>50%</centertop>
                <height>64</height>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture colordiffuse="Dark1">flags/imdb.png</texture>
                <visible>!String.IsEmpty(Container(9500).ListItem.Top250)</visible>
            </control>
            <control type="label" description="IMDB Top 250">
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>-15</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Container(9500).ListItem.Top250,#,]</label>
                <visible>!String.IsEmpty(Container(9500).ListItem.Top250) + Skin.HasSetting(furniture.flags.top250.enable.labels)</visible>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(Container(9500).ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>33</width>
                <height>33</height>
                <left>15</left>
                <texture background="true" colordiffuse="$VAR[ColorUserrating]">misc/userrating_white.png</texture>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(Container(9500).ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Container(9500).ListItem.UserRating].0</label>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>33</width>
                <height>33</height>
                <left>15</left>
                <texture background="true">misc/mc.png</texture>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]%</label>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                <fadetime>ExtendedFlagIconsFadetime</fadetime>
                <centertop>50%</centertop>
                <width>33</width>
                <height>33</height>
                <left>15</left>
                <texture background="true">$VAR[RottenTomatoesColored]</texture>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + !Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]%</label>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(Container(9500).ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>40</width>
                <height>40</height>
                <left>30</left>
                <texture background="true" colordiffuse="$VAR[ColorUserrating]">misc/userrating_white.png</texture>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(Container(9500).ListItem.UserRating) + Skin.HasSetting(furniture.showuserrating) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Container(9500).ListItem.UserRating].0</label>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>40</width>
                <height>40</height>
                <left>30</left>
                <texture background="true">misc/mc.png</texture>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.Metacritic_Rating)]%</label>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <fadetime>ExtendedFlagIconsFadetime</fadetime>
                <centertop>50%</centertop>
                <width>40</width>
                <height>40</height>
                <left>30</left>
                <texture background="true">$VAR[RottenTomatoesColored]</texture>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating)]%</label>
            </control>
            <control type="image" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)) + Skin.HasSetting(furniture.showtomatoesandmetacritics) + Skin.HasSetting(furniture.flagicons)</visible>
                <fadetime>ExtendedFlagIconsFadetime</fadetime>
                <centertop>50%</centertop>
                <width>40</width>
                <height>40</height>
                <left>30</left>
                <texture background="true">$VAR[RottenTomatoesAudienceColored]</texture>
            </control>
            <control type="label" description="Rotten Tomatoes">
                <visible>!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)) + Skin.HasSetting(furniture.showtomatoesandmetacritics)</visible>
                <centertop>50%</centertop>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <left>3</left>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(Home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter)]%</label>
            </control>
        </control>
    </include>

    <variable name="HeaderIcon">
        <value condition="Player.Muted">special://skin/extras/icons/mute.png</value>
        <value condition="Window.IsVisible(DialogButtonMenu.xml)">special://skin/extras/icons/power.png</value>
        <value condition="Window.IsVisible(script-globalsearch.xml)">special://skin/extras/icons/search.png</value>
        <value condition="Window.IsVisible(service-CoreELEC-Settings-mainWindow.xml)">special://skin/extras/icons/coreelec.png</value>
        <value condition="Window.IsVisible(DialogFavourites.xml)">special://skin/extras/icons/favourites.png</value>
        <value condition="Window.IsVisible(EventLog.xml)">special://skin/extras/icons/antenna.png</value>
        <value condition="Window.IsVisible(1104) | Window.IsVisible(1105)">special://skin/extras/icons/director.png</value>
        <value condition="Player.HasAudio + [Window.IsVisible(fullscreenvideo) | Window.IsVisible(visualisation) | Window.IsVisible(home)]">special://skin/extras/icons/songs.png</value>
        <value condition="Player.HasVideo + VideoPlayer.Content(livetv) + [Window.IsVisible(fullscreenvideo) | Window.IsVisible(visualisation) | Window.IsVisible(home)]">special://skin/extras/icons/livetv.png</value>
        <value condition="Player.HasVideo + VideoPlayer.Content(movies) + [Window.IsVisible(fullscreenvideo) | Window.IsVisible(visualisation) | Window.IsVisible(home)]">special://skin/extras/icons/film.png</value>
        <value condition="Player.HasVideo + VideoPlayer.Content(episodes) + [Window.IsVisible(fullscreenvideo) | Window.IsVisible(visualisation) | Window.IsVisible(home)]">special://skin/extras/icons/tv.png</value>
        <value condition="Player.HasVideo + [Window.IsVisible(fullscreenvideo) | Window.IsVisible(visualisation) | Window.IsVisible(home)]">special://skin/extras/icons/eye.png</value>
        <value condition="Window.IsVisible(DialogVideoInfo.xml)">special://skin/extras/icons/info.png</value>
        <value condition="String.Contains(Container.FolderPath,sources://,Left)">special://skin/extras/icons/files.png</value>
        <value condition="String.Contains(Container.FolderPath,special://videoplaylists/,Left)">special://skin/extras/icons/playlist.png</value>
        <value condition="String.IsEqual(Container.FolderPath,special://profile/playlists/)">special://skin/extras/icons/playlist.png</value>
        <value condition="String.IsEqual(Container.FolderPath,special://profile/playlists/video/)">special://skin/extras/icons/playlist.png</value>
        <value condition="String.IsEqual(Container.FolderPath,special://profile/playlists/music/)">special://skin/extras/icons/playlist.png</value>
        <value condition="String.IsEqual(Container.FolderPath,special://profile/playlists/mixed/)">special://skin/extras/icons/playlist.png</value>
        <value condition="Window.IsVisible(MyMusicPlaylistEditor.xml) | Window.IsVisible(MyMusicNav.xml) | Window.IsVisible(MyMusicSongs.xml)">special://skin/extras/icons/songs.png</value>
        <value condition="String.Contains(Container.FolderPath,library://video/movies/,Left)">special://skin/extras/icons/film.png</value>
        <value condition="String.Contains(Container.FolderPath,library://video/tvshows/,Left)">special://skin/extras/icons/tv.png</value>
        <value condition="String.Contains(Container.FolderPath,videodb://movies/,Left)">special://skin/extras/icons/film.png</value>
        <value condition="String.Contains(Container.FolderPath,videodb://tvshows/,Left)">special://skin/extras/icons/tv.png</value>
        <value condition="String.Contains(Container.FolderPath,plugin://,Left)">special://skin/extras/icons/video-addons.png</value>
        <value condition="Container.Content(movies)">special://skin/extras/icons/film.png</value>
        <value condition="Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)">special://skin/extras/icons/tv.png</value>
        <value condition="Container.Content(songs)">special://skin/extras/icons/songs.png</value>
        <value condition="Container.Content(livetv)">special://skin/extras/icons/livetv.png</value>
        <value condition="Container.Content(files)">special://skin/extras/icons/files.png</value>
        <value condition="Container.Content(plugins)">special://skin/extras/icons/video-addons.png</value>
        <value condition="Container.Content(addons)">special://skin/extras/icons/addons.png</value>
        <value condition="String.Contains(Container.FolderPath,videodb://musicvideos/,Left)">special://skin/extras/icons/musicvideo.png</value>
        <value condition="Window.IsVisible(script-skin_helper_service-ColorPicker.xml)">special://skin/extras/icons/wand.png</value>
        <value condition="Window.IsVisible(Custom_1297_Blur.xml)">special://skin/extras/icons/wand.png</value>
        <value condition="Window.IsVisible(MyPVRChannels.xml) | Window.IsVisible(MyPVRSearch.xml) | Window.IsVisible(MyPVRTimers.xml) | Window.IsVisible(MyPVRGuide.xml) | Window.IsVisible(MyPVRRecordings.xml)">special://skin/extras/icons/livetv.png</value>
        <value condition="Window.IsVisible(MyMusicPlaylistEditor.xml) | Window.IsVisible(MyMusicNav.xml) | Window.IsVisible(MyMusicSongs.xml)">special://skin/extras/icons/songs.png</value>
        <value condition="Window.IsVisible(MyPics.xml)">special://skin/extras/icons/pictures.png</value>
        <value condition="Window.IsVisible(MyPrograms.xml) | Window.IsVisible(AddonBrowser.xml)">special://skin/extras/icons/addons.png</value>
        <value condition="Window.IsVisible(weather)">special://skin/extras/icons/sun.png</value>
        <value condition="Window.IsVisible(SettingsSystemInfo.xml) | Window.IsVisible(SettingsCategory.xml) | Window.IsVisible(settings) | Window.IsVisible(SkinSettings.xml)">special://skin/extras/icons/settings.png</value>
        <value condition="Window.IsVisible(MyPlaylist.xml)">special://skin/extras/icons/playlist.png</value>
        <value condition="Window.IsVisible(FileManager.xml)">special://skin/extras/icons/database.png</value>
        <value condition="Window.IsVisible(Home.xml)">special://skin/extras/icons/home.png</value>
        <value condition="Window.IsVisible(MyVideoNav.xml)">special://skin/extras/icons/video-addons.png</value>
        <value>special://skin/extras/icons/artist.png</value>
    </variable>

    <variable name="GlobalSearchHeaderLabel">
        <value condition="Control.HasFocus(211)">[COLOR=$VAR[ColorHighlight]]$INFO[Control.GetLabel(210)][/COLOR] $LOCALIZE[20337] $LOCALIZE[31101]</value>
        <value condition="Control.HasFocus(111)">[COLOR=$VAR[ColorHighlight]]$INFO[Control.GetLabel(110)][/COLOR] $LOCALIZE[20342]</value>
        <value condition="Control.HasFocus(121)">[COLOR=$VAR[ColorHighlight]]$INFO[Control.GetLabel(120)][/COLOR] $LOCALIZE[20343]</value>
        <value condition="Control.HasFocus(131)">[COLOR=$VAR[ColorHighlight]]$INFO[Control.GetLabel(130)][/COLOR] $LOCALIZE[33054]</value>
        <value condition="Control.HasFocus(141)">[COLOR=$VAR[ColorHighlight]]$INFO[Control.GetLabel(140)][/COLOR] $LOCALIZE[20360]</value>
        <value condition="Control.HasFocus(151)">[COLOR=$VAR[ColorHighlight]]$INFO[Control.GetLabel(150)][/COLOR] $LOCALIZE[20389]</value>
        <value condition="Control.HasFocus(161)">[COLOR=$VAR[ColorHighlight]]$INFO[Control.GetLabel(160)][/COLOR] $LOCALIZE[133]</value>
        <value condition="Control.HasFocus(171)">[COLOR=$VAR[ColorHighlight]]$INFO[Control.GetLabel(170)][/COLOR] $LOCALIZE[132]</value>
        <value condition="Control.HasFocus(181)">[COLOR=$VAR[ColorHighlight]]$INFO[Control.GetLabel(180)][/COLOR] $LOCALIZE[134]</value>
    </variable>

    <variable name="weatherlabel">
        <value>$INFO[Control.GetLabel(9100)]</value>
    </variable>

    <variable name="MainHeaderLabel">
        <value condition="Skin.HasSetting(hide.busydialog) + Window.IsVisible(DialogBusy.xml)">$LOCALIZE[20186]...</value>
        <value condition="Window.IsVisible(Custom_1297_Blur.xml)">$LOCALIZE[31580]</value>
        <value condition="Window.IsVisible(script-skin_helper_service-ColorPicker.xml)">$LOCALIZE[31238] $VAR[ColorPickerHeaderLabel,$LOCALIZE[31520] ,]</value>
        <value condition="Window.IsVisible(script-globalsearch.xml)">$LOCALIZE[31324] $INFO[Window.Property(GlobalSearch.SearchString),","]</value>
        <value condition="Window.IsVisible(service-CoreELEC-Settings-mainWindow.xml)">$LOCALIZE[31472]</value>
        <value condition="Window.IsVisible(MyMusicPlaylistEditor.xml)">$LOCALIZE[20011]</value>
        <value condition="Window.IsVisible(DialogButtonMenu.xml)">$LOCALIZE[33060]</value>
        <value condition="Window.IsVisible(DialogFavourites.xml)">$LOCALIZE[1036]</value>
        <value condition="Window.IsVisible(EventLog.xml)">$LOCALIZE[14111]</value>
        <value condition="[Window.IsVisible(script-globalsearch-main.xml) | Window.IsVisible(script-globalsearch-info.xml)] + [!String.IsEmpty(Control.GetLabel(190)) | !String.IsEmpty(Control.GetLabel(191)) | !String.IsEmpty(Control.GetLabel(199))]">$INFO[Control.GetLabel(190)]$INFO[Control.GetLabel(191)]$INFO[Control.GetLabel(199)]</value>
        <value condition="[Window.IsVisible(script-globalsearch-main.xml) | Window.IsVisible(script-globalsearch-info.xml)] + String.IsEmpty(Control.GetLabel(190)) + String.IsEmpty(Control.GetLabel(191)) + String.IsEmpty(Control.GetLabel(199))">$LOCALIZE[283]</value>
        <value condition="Window.IsVisible(MyGames.xml) + !String.IsEmpty(Container.FolderName)">$INFO[Container.FolderName]</value>
        <value condition="Window.IsVisible(MyGames.xml)">$LOCALIZE[10821]</value>
        <value condition="Window.IsVisible(MyVideoNav.xml) + String.IsEqual(Container.FolderPath,videodb://movies/titles/)">$LOCALIZE[20342]</value>
        <value condition="Window.IsVisible(MyVideoNav.xml) + String.IsEqual(Container.FolderPath,videodb://tvshows/titles/)">$LOCALIZE[20343]</value>
        <value condition="Window.IsVisible(MyVideoNav.xml) + String.Contains(Container.FolderPath,videodb://movies/,Left)">$INFO[Container.FolderName]</value>
        <value condition="Window.IsVisible(MyVideoNav.xml) + String.Contains(Container.FolderPath,videodb://tvshows/,Left) + Container.Content(episodes) + !String.IsEmpty(ListItem.TvShowTitle)">$INFO[ListItem.TvShowTitle]$INFO[Container.FolderName, - ,]</value>
        <value condition="Window.IsVisible(MyVideoNav.xml) + String.Contains(Container.FolderPath,videodb://tvshows/,Left)">$INFO[Container.FolderName]</value>
        <value condition="Window.IsVisible(MyVideoNav.xml) + !String.IsEmpty(Container.FolderName)">$INFO[Container.FolderName]</value>
        <value condition="Window.IsVisible(MyVideoNav.xml)">$LOCALIZE[3]</value>
        <value condition="Window.IsVisible(MyPVRChannels.xml)">$LOCALIZE[19019]</value>
        <value condition="Window.IsVisible(MyPVRGuide.xml)">$LOCALIZE[4]</value>
        <value condition="Window.IsVisible(MyPVRRecordings.xml)">$LOCALIZE[19017]</value>
        <value condition="Window.IsVisible(MyPVRTimers.xml)">$LOCALIZE[19040]</value>
        <value condition="Window.IsVisible(MyPVRSearch.xml)">$LOCALIZE[137]</value>
        <value condition="!String.IsEmpty(Container.FolderName) + [Window.IsVisible(MyMusicNav.xml) | Window.IsVisible(MyMusicSongs.xml)]">$INFO[Container.FolderName]</value>
        <value condition="Window.IsVisible(MyMusicNav.xml) | Window.IsVisible(MyMusicSongs.xml)">$LOCALIZE[2]</value>
        <value condition="Window.IsVisible(SettingsSystemInfo.xml) | Window.IsVisible(SettingsCategory.xml) | Window.IsVisible(settings) | Window.IsVisible(SkinSettings.xml)">$LOCALIZE[5]</value>
        <value condition="Window.IsVisible(weather) + Control.HasFocus(9100)">$LOCALIZE[8] $VAR[weatherlabel,- ]</value>
        <value condition="Window.IsVisible(weather) + Control.HasFocus(548)">$LOCALIZE[8] - $LOCALIZE[31093]</value>
        <value condition="Window.IsVisible(weather)">$LOCALIZE[8]</value>
        <value condition="!String.IsEmpty(Container.FolderName) + Window.IsVisible(MyPics.xml)">$INFO[Container.FolderName]</value>
        <value condition="Window.IsVisible(MyPics.xml)">$LOCALIZE[1]</value>
        <value condition="Window.IsVisible(MyPrograms.xml)">$LOCALIZE[0]</value>
        <value condition="Window.IsVisible(AddonBrowser.xml)">$LOCALIZE[24001]</value>
        <value condition="Window.IsVisible(MyPlaylist.xml)">$LOCALIZE[559]</value>
        <value condition="Window.IsVisible(FileManager.xml)">$LOCALIZE[744]</value>
        <value condition="Window.IsVisible(1104) + String.IsEqual(Window(1104).Property(content),1)">$LOCALIZE[31211]</value>
        <value condition="Window.IsVisible(1104) + String.IsEqual(Window(1104).Property(content),2)">$LOCALIZE[31210]</value>
        <value condition="Window.IsVisible(1104) + String.IsEqual(Window(1104).Property(content),3)">$LOCALIZE[31209]</value>
        <value condition="Window.IsVisible(1104)">$LOCALIZE[31208]</value>
        <value condition="Window.IsVisible(1105) + String.IsEqual(Window(1105).Property(content),1)">$LOCALIZE[31211]</value>
        <value condition="Window.IsVisible(1105) + String.IsEqual(Window(1105).Property(content),2)">$LOCALIZE[31210]</value>
        <value condition="Window.IsVisible(1105) + String.IsEqual(Window(1105).Property(content),3)">$LOCALIZE[31212]</value>
        <value condition="Window.IsVisible(1105)">$LOCALIZE[31213]</value>
        <value condition="String.Contains(Window.Property(xmlfile),Custom_hub_)">$INFO[Window(home).Property(WindowTitle)]</value>
        <value>$LOCALIZE[10000]</value>
    </variable>

    <variable name="SubHeaderLabel">
        <value condition="Window.IsVisible(DialogVideoInfo.xml)">$LOCALIZE[31242]</value>
        <value condition="[Window.IsVisible(script-globalsearch-main.xml) | Window.IsVisible(script-globalsearch-info.xml)] + String.IsEmpty(Control.GetLabel(190)) + String.IsEmpty(Control.GetLabel(191)) + String.IsEmpty(Control.GetLabel(199))">$VAR[GlobalSearchHeaderLabel]</value>
        <value condition="Window.IsVisible(LoginScreen.xml)">$LOCALIZE[10029]</value>
        <value condition="Window.IsVisible(script-skin_helper_service-ColorPicker.xml)">$LOCALIZE[31239] [COLOR=$INFO[Window(home).Property(currentcolor)]]$INFO[Window(home).Property(currentcolor)][/COLOR]</value>
        <value condition="[Window.IsVisible(MyPVRChannels.xml) | Window.IsVisible(MyPVRSearch.xml) | Window.IsVisible(MyPVRTimers.xml) | Window.IsVisible(MyPVRGuide.xml) | Window.IsVisible(MyPVRRecordings.xml)]">[COLOR=$VAR[ColorHighlight]]$INFO[Container.NumItems,,[/COLOR] $LOCALIZE[31101]]$INFO[Control.GetLabel(3),  •  ,]$INFO[Control.GetLabel(28),  •  ,]</value>
        <value condition="!String.IsEmpty(Container.NumItems) + Window.IsVisible(AddonBrowser.xml) + Integer.IsGreater(System.AddonUpdateCount,0)">[COLOR=$VAR[ColorHighlight]]$INFO[Container.NumItems,,[/COLOR] $LOCALIZE[31101]]  •  [COLOR=$VAR[ColorHighlight]]$INFO[System.AddonUpdateCount,,[/COLOR] $LOCALIZE[24043]]$INFO[Control.GetLabel(3),  •  ,]</value>
        <value condition="!String.IsEmpty(Container.NumItems) + !Window.IsVisible(home)">[COLOR=$VAR[ColorHighlight]]$INFO[Container.NumItems,,[/COLOR] $LOCALIZE[31101]]$INFO[Control.GetLabel(3),  •  ,]</value>
        <value condition="!String.IsEmpty(Container(9500).NumItems) + !Window.IsVisible(home)">[COLOR=$VAR[ColorHighlight]]$INFO[Container(9500).NumItems,,[/COLOR] $LOCALIZE[31101]]</value>
        <value condition="String.IsEqual(Container(300).ListItem.Property(defaultID),tvshows)">[COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Episodes.Count)][/COLOR] $LOCALIZE[20360]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Window(Home).Property(episodes.UnWatched)][/COLOR] $LOCALIZE[31215]</value>
        <value condition="String.IsEqual(Container(300).ListItem.Property(defaultID),movies)">[COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Movies.Count)][/COLOR] $LOCALIZE[20342]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Window(Home).Property(Movies.UnWatched)][/COLOR] $LOCALIZE[31215]</value>
        <value condition="String.IsEqual(Container(300).ListItem.Property(defaultID),music) | [String.StartsWith(Container(300).ListItem.Property(path),ActivateWindow) + String.Contains(Container(300).ListItem.Property(path),music) + !String.Contains(Container(300).ListItem.Property(path),musicvideo) + !String.Contains(Container(300).ListItem.Property(path),plugin://)]">[COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Music.ArtistsCount)][/COLOR] $LOCALIZE[133]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Music.AlbumsCount)][/COLOR] $LOCALIZE[132]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Music.SongsCount)][/COLOR] $LOCALIZE[134]</value>
        <value condition="String.IsEqual(Container(300).ListItem.Property(defaultID),livetv) + String.IsEmpty(Pvr.BackendChannels)">$INFO[Pvr.BackendName]</value>
        <value condition="String.IsEqual(Container(300).ListItem.Property(defaultID),livetv) + !String.IsEmpty(Pvr.BackendChannels)">$INFO[Pvr.BackendName]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Pvr.BackendChannels][/COLOR] $LOCALIZE[19019]</value>
        <value condition="String.IsEqual(Container(300).ListItem.Property(defaultID),weather)">[COLOR=$VAR[ColorHighlight]]$INFO[Weather.Temperature,,[/COLOR]  ]$INFO[Window(Weather).Property(Location)]</value>
        <value condition="String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily)">[COLOR=$VAR[ColorHighlight]]$INFO[Weather.Temperature,,[/COLOR]  ]$INFO[Window(Weather).Property(Location)]</value>
        <value condition="String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)">[COLOR=$VAR[ColorHighlight]]$INFO[Weather.Temperature,,[/COLOR]  ]$INFO[Window(Weather).Property(Location)]</value>
        <value condition="Window.IsVisible(MyWeather.xml) + !String.IsEmpty(Window(Weather).Property(Location))">[COLOR=$VAR[ColorHighlight]]$INFO[Weather.Temperature,,[/COLOR]  ]$INFO[Window(Weather).Property(Location)]</value>
        <value condition="!Library.HasContent(Music) + String.IsEmpty(Pvr.BackendChannels)">[COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Movies.Count)][/COLOR] $LOCALIZE[20342]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Episodes.Count)][/COLOR] $LOCALIZE[20360]</value>
        <value condition="!Library.HasContent(Music)">[COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Movies.Count)][/COLOR] $LOCALIZE[20342]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Episodes.Count)][/COLOR] $LOCALIZE[20360]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Pvr.BackendChannels][/COLOR] $LOCALIZE[19019]</value>
        <value condition="String.IsEmpty(Pvr.BackendChannels)">[COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Movies.Count)][/COLOR] $LOCALIZE[20342]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Episodes.Count)][/COLOR] $LOCALIZE[20360]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Music.SongsCount)][/COLOR] $LOCALIZE[134]</value>
        <value>[COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Movies.Count)][/COLOR] $LOCALIZE[20342]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Episodes.Count)][/COLOR] $LOCALIZE[20360]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Window(home).Property(Music.SongsCount)][/COLOR] $LOCALIZE[134]  •  [COLOR=$VAR[ColorHighlight]]$INFO[Pvr.BackendChannels][/COLOR] $LOCALIZE[19019]</value>
    </variable>

    <include name="Furniture_Header">
        <include>JumpbarHelper</include>
        <control type="image" description="clearlogo">
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <include>Animation.ClearLogo.FadeOut</include>
            <visible>Skin.HasSetting(furniture.logo)</visible>
            <visible>![Window.IsVisible(Home.xml) + Window.IsVisible(DialogVideoInfo.xml)]</visible>
            <visible>![Window.IsVisible(Home.xml) + Skin.HasSetting(home.showclearlogo) + $EXP[HomeIsVertical] ]</visible>
            <visible>![Window.IsVisible(Home.xml) + !Skin.HasSetting(home.showclearlogo) + $EXP[HomeIsVerticalMultiWidgets] ]</visible>
            <visible>![Control.IsVisible(504) + Skin.HasSetting(504clearlogo)]</visible>
            <visible>![Control.IsVisible(509) + Skin.HasSetting(509clearlogo)]</visible>
            <visible>![Control.IsVisible(510) + Skin.HasSetting(ShowClearart510)]</visible>
            <animation effect="slide" start="0" end="0,60" time="0" condition="$EXP[HomeIsModernMultiWidgets] + Window.IsVisible(Home.xml)">Conditional</animation>
            <centertop>120</centertop>
            <centerleft>50%</centerleft>
            <width>400</width>
            <height>100</height>
            <fadetime>ClearArtFadetime</fadetime>
            <aspectratio align="center">keep</aspectratio>
            <texture background="true">$VAR[ClearLogoTopVar]</texture>
        </control>
        <control type="grouplist">
            <top>SidePad</top>
            <left>SidePad</left>
            <visible>!Skin.HasSetting(furniture.header)</visible>
            <include>Animation.FurnitureVisibleHomeLabel</include>
            <orientation>horizontal</orientation>
            <itemgap>24</itemgap>
            <control type="group" description="iconbox">
                <width>80</width>
                <height>80</height>
                <control type="image">
                    <width>80</width>
                    <height>80</height>
                    <texture colordiffuse="Panel" border="8">common/box.png</texture>
                </control>
                <control type="image">
                    <top>-14</top>
                    <left>-14</left>
                    <width>108</width>
                    <height>108</height>
                    <texture colordiffuse="PanelWhite100" border="8">$VAR[HeaderIcon]</texture>
                    <visible>!Container.Scrolling</visible>
                    <visible>!Skin.HasSetting(hide.busydialog) | !Window.IsVisible(DialogBusy.xml)</visible>
                    <include>Animation.FurnitureIcon</include>
                </control>
                <control type="label">
                    <centertop>39</centertop>
                    <centerleft>40</centerleft>
                    <width>80</width>
                    <height>80</height>
                    <font>LargeBold</font>
                    <align>center</align>
                    <aligny>center</aligny>
                    <label>$INFO[ListItem.SortLetter,[UPPERCASE],[/UPPERCASE]]</label>
                    <textcolor>PanelWhite100</textcolor>
                    <visible>Container.Scrolling</visible>
                    <visible>!Skin.HasSetting(hide.busydialog) | !Window.IsVisible(DialogBusy.xml)</visible>
                    <include>Animation.FurnitureIcon</include>
                </control>
                <control type="image">
                    <description>Busy animation</description>
                    <centerleft>40</centerleft>
                    <centertop>40</centertop>
                    <width>100</width>
                    <height>100</height>
                    <texture>dialog/loading-back.png</texture>
                    <aspectratio>keep</aspectratio>
                    <visible>Skin.HasSetting(hide.busydialog) + Window.IsVisible(DialogBusy.xml)</visible>
                </control>
                <control type="image">
                    <description>Busy animation</description>
                    <centerleft>40</centerleft>
                    <centertop>40</centertop>
                    <width>100</width>
                    <height>100</height>
                    <animation effect="rotate" condition="true" start="360" end="0" loop="true" time="1000" center="auto">Conditional</animation>
                    <texture colordiffuse="$VAR[ColorHighlight]">dialog/loading-spinner.png</texture>
                    <aspectratio>keep</aspectratio>
                    <visible>Skin.HasSetting(hide.busydialog) + Window.IsVisible(DialogBusy.xml)</visible>
                </control>
            </control>
            <control type="group">
                <control type="label">
                    <centertop>24</centertop>
                    <include condition="Skin.HasSetting(furniture.logo) + !Window.IsVisible(home) + !Window.IsVisible(settings) + !Window.IsVisible(skinsettings) + !Window.IsVisible(SettingsCategory.xml) + !Window.IsVisible(tvchannels) + !Window.IsVisible(tvrecordings) + !Window.IsVisible(tvguide) + !Window.IsVisible(tvsearch) + !Window.IsVisible(tvtimers)">HeaderLabelWidthLogo</include>
                    <width>auto</width>
                    <font>HeaderLabel</font>
                    <textcolor>Dark1</textcolor>
                    <label>$VAR[MainHeaderLabel]</label>
                </control>
                <control type="label">
                    <centertop>58</centertop>
                    <font>Flag</font>
                    <include condition="Skin.HasSetting(furniture.logo) + !Window.IsVisible(home) + !Window.IsVisible(settings) + !Window.IsVisible(skinsettings) + !Window.IsVisible(SettingsCategory.xml) + !Window.IsVisible(tvchannels) + !Window.IsVisible(tvrecordings) + !Window.IsVisible(tvguide) + !Window.IsVisible(tvsearch) + !Window.IsVisible(tvtimers)">HeaderLabelWidthLogo</include>
                    <width>auto</width>
                    <textcolor>Dark2</textcolor>
                    <label>$VAR[SubHeaderLabel]</label>
                </control>
            </control>
        </control>
    </include>

    <include name="HeaderLabelWidthLogo">
        <width>560</width>
    </include>

    <include name="IconFade">
        <animation effect="fade" condition="true" start="90" end="90" time="0">Conditional</animation>
    </include>

    <include name="Furniture_Clock">
        <control type="group">
            <include>Animation.FurnitureVisibleHome</include>
            <centerbottom>NavBarPad</centerbottom>
            <visible>!Skin.HasSetting(furniture.clock)</visible>
            <height>84</height>
            <animation effect="slide" start="0" end="0,-10" time="150" condition="Skin.HasSetting(furniture.weather)">Conditional</animation>
            <control type="image">
                <visible>String.IsEmpty(System.Time(xx))</visible>
                <centertop>32</centertop>
                <right>356</right>
                <align>right</align>
                <width>18</width>
                <height>18</height>
                <texture>$INFO[Window(Home).Property(SkinHelperPING.server1)]</texture>
            </control>
            <control type="image">
                <visible>!String.IsEmpty(System.Time(xx))</visible>
                <centertop>32</centertop>
                <right>386</right>
                <align>right</align>
                <width>18</width>
                <height>18</height>
                <texture>$INFO[Window(Home).Property(SkinHelperPING.server1)]</texture>
            </control>
            <control type="group">
                <visible>Skin.HasSetting(furniture.weatherleft)</visible>
                <animation effect="slide" start="0" end="-45" time="0" condition="String.Contains(Skin.Font,Arial)">Conditional</animation>
                <animation effect="slide" start="0" end="-20,0" time="0" condition="Integer.IsGreater(System.Time(hh),9) + !String.IsEmpty(System.Time(xx))">Conditional</animation>
                <animation effect="slide" start="0" end="-30,0" time="0" condition="!String.IsEmpty(System.Time(xx))">Conditional</animation>
                <control type="grouplist">
                    <visible>!String.Contains(Weather.Temperature,$LOCALIZE[503])</visible>
                    <include>Animation.FadeInWeatherDelay</include>
                    <itemgap>15</itemgap>
                    <orientation>horizontal</orientation>
                    <usecontrolcoords>true</usecontrolcoords>
                    <right>210</right>
                    <height>100</height>
                    <width>500</width>
                    <align>right</align>
                    <bottom>-12</bottom>
                    <control type="label">
                        <centertop>34</centertop>
                        <width>auto</width>
                        <font>Name1</font>
                        <align>right</align>
                        <textcolor>Dark2</textcolor>
                        <label>$INFO[Weather.Temperature]</label>
                    </control>
                    <control type="image">
                        <width min="20" max="60">auto</width>
                        <height>60</height>
                        <bottom>39</bottom>
                        <align>right</align>
                        <aspectratio aligny="center" align="center">keep</aspectratio>
                        <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Current.FanartCode),,.png]</texture>
                        <visible>![String.IsEmpty(Skin.String(weather.icons.path)) | String.Contains(Skin.String(weather.icons.path),Default)] + !String.Contains(Skin.String(weather.icons.path),animated) + Skin.HasSetting(weather.icons.override) + !String.Contains(Skin.String(weather.icons.path),White) + !String.Contains(Skin.String(weather.icons.path),Outline) + !String.Contains(Skin.String(weather.icons.path),Transparent) + !String.Contains(Skin.String(weather.icons.path),Monstr)</visible>
                        <include>IconFade</include>
                    </control>
                    <control type="image">
                        <width min="20" max="60">auto</width>
                        <height>60</height>
                        <bottom>39</bottom>
                        <align>right</align>
                        <aspectratio aligny="center" align="center">keep</aspectratio>
                        <texture colordiffuse="Dark2">$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Current.FanartCode),,.png]</texture>
                        <visible>![String.IsEmpty(Skin.String(weather.icons.path)) | String.Contains(Skin.String(weather.icons.path),Default)] + !String.Contains(Skin.String(weather.icons.path),animated) + Skin.HasSetting(weather.icons.override) + [String.Contains(Skin.String(weather.icons.path),White) | String.Contains(Skin.String(weather.icons.path),Outline) | String.Contains(Skin.String(weather.icons.path),Transparent) | String.Contains(Skin.String(weather.icons.path),Monstr)]</visible>
                    </control>
                    <control type="image">
                        <width min="20" max="60">auto</width>
                        <height>60</height>
                        <bottom>39</bottom>
                        <align>right</align>
                        <aspectratio aligny="center" align="center">keep</aspectratio>
                        <texture colordiffuse="Dark2">$INFO[Weather.FanartCode,resource://resource.images.weathericons.white/,.png]</texture>
                        <visible>[String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),Default)] | [String.Contains(Skin.String(weather.icons.path),Default) + !Skin.HasSetting(weather.icons.override)] | [![String.IsEmpty(Skin.String(weather.icons.path)) | String.Contains(Skin.String(weather.icons.path),Default)] + !Skin.HasSetting(weather.icons.override)]</visible>
                    </control>
                    <control type="image">
                        <width min="20" max="60">auto</width>
                        <height>60</height>
                        <bottom>39</bottom>
                        <align>right</align>
                        <aspectratio aligny="center" align="center">keep</aspectratio>
                        <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Current.FanartCode),,.png]</texture>
                        <visible>String.Contains(Skin.String(weather.icons.path),Default) + Skin.HasSetting(weather.icons.override)</visible>
                        <include>IconFade</include>
                    </control>
                </control>
                <control type="group">
                    <visible>String.Contains(Weather.Temperature,$LOCALIZE[503]) | String.IsEmpty(Window(Weather).Property(Updated))</visible>
                    <include>Animation.FadeInWeather</include>
                    <include>Animation.FadeOutWeather</include>
                    <orientation>horizontal</orientation>
                    <left>1595</left>
                    <height>100</height>
                    <bottom>10</bottom>
                    <control type="image">
                        <description>Busy animation</description>
                        <centerleft>54</centerleft>
                        <centertop>54</centertop>
                        <width>45</width>
                        <height>45</height>
                        <texture>dialog/loading-back.png</texture>
                        <aspectratio>keep</aspectratio>
                    </control>
                    <control type="image">
                        <description>Busy animation</description>
                        <centerleft>54</centerleft>
                        <centertop>54</centertop>
                        <width>45</width>
                        <height>45</height>
                        <animation effect="rotate" condition="true" start="360" end="0" loop="true" time="1000" center="auto">Conditional</animation>
                        <texture colordiffuse="$VAR[ColorHighlight]">dialog/loading-spinner.png</texture>
                        <aspectratio>keep</aspectratio>
                    </control>
                </control>
            </control>
            <control type="label">
                <centertop>24</centertop>
                <right>135</right>
                <align>right</align>
                <font>LargeBold</font>
                <textcolor>$VAR[ColorHighlight]</textcolor>
                <label>$INFO[System.Time(hh:mm)]</label>
                <animation effect="slide" start="0" end="55" time="0" condition="String.IsEmpty(System.Time(xx))">Conditional</animation>
                <animation effect="slide" start="0" end="-15" time="0" condition="String.Contains(Skin.Font,Arial) + !String.IsEmpty(System.Time(xx))">Conditional</animation>
            </control>
            <control type="label">
                <centertop>30</centertop>
                <right>SidePad</right>
                <font>SmallBold</font>
                <textcolor>Dark3</textcolor>
                <align>right</align>
                <width>120</width>
                <label>$INFO[System.Time(xx)]</label>
                <visible>!String.IsEmpty(System.Time(xx))</visible>
            </control>

            <!-- $INFO[Window(Home).Property(SkinHelperPING.server1)] -->
            <control type="label">
                <centertop>64</centertop>
                <right>SidePad</right>
                <font>Flag</font>
                <textcolor>Dark2</textcolor>
                <align>right</align>
                <width>50%</width>
                <label>$INFO[System.Date]</label>
            </control>
            <control type="label">
                <centertop>92</centertop>
                <right>SidePad</right>
                <font>Flag</font>
                <textcolor>Dark3</textcolor>
                <align>right</align>
                <width>50%</width>
                <visible>Skin.HasSetting(furniture.weather)</visible>
                <label>[COLOR=$VAR[ColorHighlight]]$INFO[Weather.Temperature][/COLOR]  $INFO[Weather.Conditions]</label>
            </control>
        </control>
    </include>

    <include name="Furniture_Weather">

        <!-- Weather Furniture -->
        <control type="grouplist">
            <include>Animation.FurnitureFadeInOut</include>
            <include>Animation.FurnitureVisible</include>
            <visible>!Skin.HasSetting(furniture.weather)</visible>
            <visible>Skin.HasSetting(furniture.topweather) | [Window.IsActive(home) + [String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]]</visible>
            <visible>!Window.IsVisible(DialogVolumeBar.xml)</visible>
            <visible>!Window.IsVisible(DialogNotification.xml)</visible>
            <visible>!Window.IsVisible(DialogExtendedProgressBar.xml)</visible>
            <visible>!Window.IsActive(DialogNotification.xml)</visible>
            <visible>Skin.HasSetting(furniture.nowplaying) | [!Skin.HasSetting(furniture.nowplaying) + !Player.HasMedia]</visible>
            <top>70</top>
            <right>62</right>
            <orientation>horizontal</orientation>
            <usecontrolcoords>true</usecontrolcoords>
            <itemgap>24</itemgap>
            <align>right</align>
            <control type="group">
                <width>700</width>
                <posy>10</posy>
                <control type="label">
                    <centertop>24</centertop>
                    <width>auto</width>
                    <font>NotificationBold</font>
                    <align>right</align>
                    <textcolor>Dark1</textcolor>
                    <label>$INFO[Weather.Temperature]</label>
                </control>
                <control type="label">
                    <centertop>58</centertop>
                    <align>right</align>
                    <font>Flag</font>
                    <width>auto</width>
                    <textcolor>Dark2</textcolor>
                    <label>$INFO[Weather.Location,, - ]$INFO[Weather.Conditions]</label>
                </control>
            </control>
            <control type="group">
                <posx>-10</posx>
                <posy>15</posy>
                <height>80</height>
                <width>90</width>
                <control type="image">
                    <width>70</width>
                    <height>70</height>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Current.FanartCode),,.png]</texture>
                    <visible>![String.IsEmpty(Skin.String(weather.icons.path)) | String.Contains(Skin.String(weather.icons.path),Default)] + !String.Contains(Skin.String(weather.icons.path),animated) + Skin.HasSetting(weather.icons.override) + !String.Contains(Skin.String(weather.icons.path),White) + !String.Contains(Skin.String(weather.icons.path),Outline) + !String.Contains(Skin.String(weather.icons.path),Transparent) + !String.Contains(Skin.String(weather.icons.path),Monstr)</visible>
                    <include>IconFade</include>
                </control>
                <control type="image">
                    <width>70</width>
                    <height>70</height>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <texture colordiffuse="Dark2">$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Current.FanartCode),,.png]</texture>
                    <visible>![String.IsEmpty(Skin.String(weather.icons.path)) | String.Contains(Skin.String(weather.icons.path),Default)] + !String.Contains(Skin.String(weather.icons.path),animated) + Skin.HasSetting(weather.icons.override) + [String.Contains(Skin.String(weather.icons.path),White) | String.Contains(Skin.String(weather.icons.path),Outline) | String.Contains(Skin.String(weather.icons.path),Transparent) | String.Contains(Skin.String(weather.icons.path),Monstr)]</visible>
                </control>
                <control type="multiimage">
                    <width>70</width>
                    <height>70</height>
                    <aspectratio align="center" aligny="center">keep</aspectratio>
                    <imagepath>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Current.FanartCode)]</imagepath>
                    <visible>![String.IsEmpty(Skin.String(weather.icons.path)) | String.Contains(Skin.String(weather.icons.path),Default)] + String.Contains(Skin.String(weather.icons.path),animated) + Skin.HasSetting(weather.icons.override)</visible>
                    <include>IconFade</include>
                </control>
                <control type="image">
                    <width>80</width>
                    <height>80</height>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <texture colordiffuse="Dark2">$INFO[Weather.FanartCode,resource://resource.images.weathericons.white/,.png]</texture>
                    <visible>[String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),Default)] | [String.Contains(Skin.String(weather.icons.path),Default) + !Skin.HasSetting(weather.icons.override)] | [![String.IsEmpty(Skin.String(weather.icons.path)) | String.Contains(Skin.String(weather.icons.path),Default)] + !Skin.HasSetting(weather.icons.override)]</visible>
                </control>
                <control type="image">
                    <width>70</width>
                    <height>70</height>
                    <aspectratio aligny="center" align="center">keep</aspectratio>
                    <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Current.FanartCode),,.png]</texture>
                    <visible>String.Contains(Skin.String(weather.icons.path),Default) + Skin.HasSetting(weather.icons.override)</visible>
                    <include>IconFade</include>
                </control>
            </control>
        </control>
    </include>

    <include name="Furniture_NowPlaying">
        <control type="grouplist">
            <include>Animation.FurnitureVisible</include>
            <visible>!Skin.HasSetting(furniture.nowplaying)</visible>
            <visible>!Window.IsVisible(DialogVolumeBar.xml) | Player.Muted</visible>
            <visible>!Window.IsVisible(DialogNotification.xml)</visible>
            <visible>!Window.IsVisible(DialogExtendedProgressBar.xml)</visible>
            <visible>String.IsEmpty(Window(10025).Property(TvTunesIsAlive))</visible>
            <visible>!Window.IsActive(DialogNotification.xml)</visible>
            <visible>Player.HasMedia</visible>
            <animation effect="slide" start="0" end="0,-250" time="150" condition="Control.HasFocus(301) + !Skin.HasSetting(home.classicwidgets) + !Skin.HasSetting(home.vertical)">Conditional</animation>
            <top>70</top>
            <right>62</right>
            <orientation>horizontal</orientation>
            <usecontrolcoords>true</usecontrolcoords>
            <itemgap>24</itemgap>
            <align>right</align>
            <include>Animation.FadeInMusic</include>
            <include>Animation.FadeOut</include>
            <control type="group">
                <include condition="Skin.HasSetting(furniture.logo)">HeaderLabelWidthLogo</include>
                <width>700</width>
                <posy>10</posy>
                <control type="label">
                    <centertop>24</centertop>
                    <width>auto</width>
                    <font>NotificationBold</font>
                    <align>right</align>
                    <textcolor>Dark1</textcolor>
                    <label fallback="19055">$INFO[Player.Title]</label>
                </control>
                <control type="label">
                    <centertop>58</centertop>
                    <align>right</align>
                    <font>Flag</font>
                    <width>auto</width>
                    <textcolor>Dark2</textcolor>
                    <label>$VAR[Label_PVR_Other]</label>
                </control>
            </control>
            <control type="group">
                <posx>-20</posx>
                <height>100</height>
                <width>100</width>
                <control type="group">
                    <include content="NowPlaying_Progress">
                        <param name="id" value="934" />
                        <param name="info" value="Player.Progress" />
                        <param name="visible" value="!VideoPlayer.Content(LiveTV)" />
                        <param name="animation" value="Animation.RotatePlay2" />
                    </include>
                </control>
                <control type="group">
                    <include content="NowPlaying_Progress">
                        <param name="id" value="935" />
                        <param name="info" value="PVR.TimeshiftProgressPlayPos" />
                        <param name="visible" value="VideoPlayer.Content(LiveTV)" />
                        <param name="animation" value="Animation.RotatePlay2" />
                    </include>
                </control>
            </control>
        </control>
    </include>

    <include name="AlbumCount">
        <control type="group">
            <visible>Container.Content(albums)</visible>
            <centertop>50%</centertop>
            <width>70</width>
            <height>40</height>
            <control type="image" description="button back">
                <width>45</width>
                <height>45</height>
                <left>10</left>
                <align>center</align>
                <texture border="0" colordiffuse="Dark1">common/circle.png</texture>
            </control>
            <control type="label">
                <width>45</width>
                <height>40</height>
                <align>center</align>
                <left>10</left>
                <centertop>53%</centertop>
                <label>$INFO[Container(5014).NumItems]</label>
                <font>Tiny44</font>
                <textcolor>Dark1</textcolor>
            </control>
        </control>
    </include>

    <include name="Furniture_Flags_Audio">

        <!-- Fakelist Container for Album Count -->
        <control type="list" id="5014">
            <visible>Container.Content(albums)</visible>
            <top>-3000</top>
            <left>-3000</left>
            <width>1</width>
            <height>1</height>
            <itemlayout/>
            <focusedlayout/>
            <content>$VAR[AlbumPath]</content>
        </control>
        <control type="grouplist">
            <include>Animation.FurnitureVisible</include>
            <visible>!Skin.HasSetting(furniture.coloredicons)</visible>
            <visible>!Skin.HasSetting(furniture.flags)</visible>
            <visible>[Container.Content(songs) | Container.Content(albums)] | [Window.IsVisible(home) + ControlGroup(301).HasFocus() + [String.IsEqual(ListItem.DBType,song) | String.IsEqual(ListItem.DBType,album)] + [Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] + !Skin.HasSetting(hide.furniture.flags.vertical.widgets)]</visible>
            <visible>!Control.HasFocus(9501)</visible>
            <visible>!Control.HasFocus(160)</visible>
            <visible>!String.IsEqual(ListItem.Label,..)</visible>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <left>70</left>
            <centerbottom>NavBarPad</centerbottom>
            <include content="def_right" condition="Skin.HasSetting(furniture.clock)">
                <param name="right" value="SidePad" />
            </include>
            <include content="def_right" condition="!Skin.HasSetting(furniture.clock)">
                <param name="right" value="440" />
            </include>
            <height>120</height>
            <orientation>horizontal</orientation>
            <align>left</align>
            <itemgap>3</itemgap>
            <usecontrolcoords>true</usecontrolcoords>
            <include>AlbumCount</include>
            <include content="Def_Flags_Furniture_Small">
                <param name="Star" value="FlagstarSong" />
                <param name="visible" value="!Skin.HasSetting(furniture.numericrating)" />
                <param name="color" value="Dark1" />
            </include>
            <control type="label">
                <left>-16</left>
                <width min="48">auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.UserRating]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!String.IsEmpty(ListItem.UserRating)</visible>
                <visible>Skin.HasSetting(furniture.numericrating)</visible>
            </control>
            <control type="label">
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.FileExtension]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!Skin.HasSetting(furniture.flagicons)</visible>
            </control>
            <control type="image">
                <width min="20" max="100">auto</width>
                <height>54</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[ListItem.FileExtension,flags3/audio/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.FileExtension)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <centertop>50%</centertop>
                <height>64</height>
                <texture colordiffuse="Dark1">flags/audio.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1">flags/time.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!String.IsEmpty(ListItem.Duration)</visible>
            </control>
            <control type="label">
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.Duration(mins:ss),, $LOCALIZE[31102]  ]</label>
                <font>Flag</font>
                <textcolor>Dark2</textcolor>
            </control>
            <control type="label">
                <visible>Skin.HasSetting(thumbnails.moreinfos) + !String.IsEqual(ListItem.DBType,album)</visible>
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.TrackNumber,•  Track #,]</label>
                <font>Flag</font>
                <textcolor>Dark2</textcolor>
            </control>
            <control type="label">
                <visible>Skin.HasSetting(thumbnails.moreinfos) + !String.IsEqual(ListItem.DBType,album)</visible>
                <width>700</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.Album, •  ,]</label>
                <font>Flag</font>
                <textcolor>Dark2</textcolor>
            </control>
        </control>
        <control type="grouplist">
            <include>Animation.FurnitureVisible</include>
            <visible>Skin.HasSetting(furniture.coloredicons)</visible>
            <visible>!Skin.HasSetting(furniture.flags)</visible>
            <visible>[Container.Content(songs) | Container.Content(albums)] | [Window.IsVisible(home) + ControlGroup(301).HasFocus() + [String.IsEqual(ListItem.DBType,song) | String.IsEqual(ListItem.DBType,album)] + [Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] + !Skin.HasSetting(hide.furniture.flags.vertical.widgets)]</visible>
            <visible>!Control.HasFocus(9501)</visible>
            <visible>!Control.HasFocus(160)</visible>
            <visible>!String.IsEqual(ListItem.Label,..)</visible>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <left>70</left>
            <centerbottom>NavBarPad</centerbottom>
            <include content="def_right" condition="Skin.HasSetting(furniture.clock)">
                <param name="right" value="SidePad" />
            </include>
            <include content="def_right" condition="!Skin.HasSetting(furniture.clock)">
                <param name="right" value="440" />
            </include>
            <height>120</height>
            <orientation>horizontal</orientation>
            <align>left</align>
            <itemgap>3</itemgap>
            <usecontrolcoords>true</usecontrolcoords>
            <include>AlbumCount</include>
            <include content="Def_Flags_Furniture_Small">
                <param name="Star" value="FlagstarSong" />
                <param name="visible" value="!Skin.HasSetting(furniture.numericrating)" />
            </include>
            <control type="label">
                <left>-16</left>
                <width min="48">auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.UserRating]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!String.IsEmpty(ListItem.UserRating)</visible>
                <visible>Skin.HasSetting(furniture.numericrating)</visible>
            </control>
            <control type="label">
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.FileExtension]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!Skin.HasSetting(furniture.flagicons)</visible>
            </control>
            <control type="image">
                <width min="20" max="100">auto</width>
                <height>54</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">$INFO[ListItem.FileExtension,flags/color/audio/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.FileExtension)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <centertop>50%</centertop>
                <height>64</height>
                <texture colordiffuse="Dark1">flags/audio.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <height>64</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1">flags/time.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!String.IsEmpty(ListItem.Duration) + !Control.IsVisible(523)</visible>
            </control>
            <control type="label">
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.Duration(mins:ss),, $LOCALIZE[31102]  ]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!String.IsEmpty(ListItem.Duration) + !Control.IsVisible(523)</visible>
            </control>
            <control type="label">
                <visible>Skin.HasSetting(thumbnails.moreinfos) + !String.IsEqual(ListItem.DBType,album)</visible>
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.TrackNumber,•  Track #,]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
            </control>
            <control type="label">
                <visible>Skin.HasSetting(thumbnails.moreinfos) + !String.IsEqual(ListItem.DBType,album)</visible>
                <width>700</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.Album, •  ,]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
            </control>
        </control>
    </include>

    <include name="Furniture_Flags_AudioDialogInfo">
        <control type="grouplist">
            <visible>!Skin.HasSetting(furniture.coloredicons)</visible>
            <visible>Container.Content(songs) | Container.Content(albums)</visible>
            <visible>!String.IsEqual(ListItem.Label,..)</visible>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <left>-10</left>
            <top>165</top>
            <width>1400</width>
            <height>120</height>
            <orientation>horizontal</orientation>
            <align>left</align>
            <itemgap>3</itemgap>
            <usecontrolcoords>true</usecontrolcoords>
            <include content="Def_Flags_Furniture_Small">
                <param name="Star" value="FlagstarSong" />
                <param name="visible" value="!Skin.HasSetting(furniture.numericrating)" />
                <param name="color" value="Dark1" />
            </include>
            <control type="label">
                <left>-16</left>
                <width min="48">auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.UserRating]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!String.IsEmpty(ListItem.UserRating)</visible>
                <visible>Skin.HasSetting(furniture.numericrating)</visible>
            </control>
            <control type="label">
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.FileExtension]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!Skin.HasSetting(furniture.flagicons)</visible>
            </control>
            <control type="image">
                <width min="20" max="100">auto</width>
                <height>54</height>
                <centertop>50%</centertop>
                <texture colordiffuse="Dark1" fallback="flags/fallback.png">$INFO[ListItem.FileExtension,flags3/audio/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.FileExtension)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <centertop>50%</centertop>
                <height>64</height>
                <texture colordiffuse="Dark1">flags/audio.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
            </control>
            <control type="label">
                <visible>Skin.HasSetting(thumbnails.moreinfos) + !Container.Content(albums)</visible>
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.TrackNumber,•  Track #,]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
            </control>
        </control>
        <control type="grouplist">
            <visible>Skin.HasSetting(furniture.coloredicons)</visible>
            <visible>Container.Content(songs) | Container.Content(albums)</visible>
            <visible>!Control.HasFocus(9501)</visible>
            <visible>!Control.HasFocus(160)</visible>
            <visible>!String.IsEqual(ListItem.Label,..)</visible>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <left>-10</left>
            <top>165</top>
            <width>1400</width>
            <height>120</height>
            <orientation>horizontal</orientation>
            <align>left</align>
            <itemgap>3</itemgap>
            <usecontrolcoords>true</usecontrolcoords>
            <include content="Def_Flags_Furniture_Small">
                <param name="Star" value="FlagstarSong" />
                <param name="visible" value="!Skin.HasSetting(furniture.numericrating)" />
            </include>
            <control type="label">
                <left>-16</left>
                <width min="48">auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.UserRating]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!String.IsEmpty(ListItem.UserRating)</visible>
                <visible>Skin.HasSetting(furniture.numericrating)</visible>
            </control>
            <control type="label">
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.FileExtension]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
                <visible>!Skin.HasSetting(furniture.flagicons)</visible>
            </control>
            <control type="image">
                <width min="20" max="100">auto</width>
                <height>54</height>
                <centertop>50%</centertop>
                <texture fallback="flags/fallback.png">$INFO[ListItem.FileExtension,flags/color/audio/,.png]</texture>
                <aspectratio align="center">keep</aspectratio>
                <visible>Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.FileExtension)</visible>
            </control>
            <control type="image">
                <width>48</width>
                <centertop>50%</centertop>
                <height>64</height>
                <texture colordiffuse="Dark1">flags/audio.png</texture>
                <aspectratio align="left">scale</aspectratio>
                <visible>!Skin.HasSetting(furniture.flagicons) + !String.IsEmpty(ListItem.AudioCodec)</visible>
            </control>
            <control type="label">
                <visible>Skin.HasSetting(thumbnails.moreinfos) + !Container.Content(albums)</visible>
                <width>auto</width>
                <centertop>50%</centertop>
                <height>64</height>
                <align>left</align>
                <aligny>center</aligny>
                <label>$INFO[ListItem.TrackNumber,•  Track #,]</label>
                <font>Flag</font>
                <textcolor>Dark1</textcolor>
            </control>
        </control>
    </include>

    <include name="Subtitles_Furniture">
        <control type="image">
            <visible>!String.IsEmpty(ListItem.Property(SubtitleLanguage.1))</visible>
            <centertop>50%</centertop>
            <width>41</width>
            <height>30</height>
            <left>20</left>
            <texture background="true" colordiffuse="Dark1">flags/cc_white.png</texture>
        </control>
        <control type="grouplist">
            <centertop>47%</centertop>
            <width>250</width>
            <height>64</height>
            <left>10</left>
            <orientation>horizontal</orientation>
            <visible>Skin.HasSetting(furniture.showsubtitles.enable.labels)</visible>
            <control type="label">
                <visible>!String.IsEmpty(ListItem.Property(SubtitleLanguage.1))</visible>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <textcolor>Dark1</textcolor>
                <label>$INFO[ListItem.Property(SubtitleLanguage.1)]</label>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(ListItem.Property(SubtitleLanguage.2))</visible>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <textcolor>Dark1</textcolor>
                <label>/ $INFO[ListItem.Property(SubtitleLanguage.2)]</label>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(ListItem.Property(SubtitleLanguage.3))</visible>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <textcolor>Dark1</textcolor>
                <label>/ $INFO[ListItem.Property(SubtitleLanguage.3)]</label>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(ListItem.Property(SubtitleLanguage.4))</visible>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <textcolor>Dark1</textcolor>
                <label>/ $INFO[ListItem.Property(SubtitleLanguage.4)]</label>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(ListItem.Property(SubtitleLanguage.5))</visible>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <textcolor>Dark1</textcolor>
                <label>/ $INFO[ListItem.Property(SubtitleLanguage.5)]</label>
            </control>
        </control>
    </include>

    <include name="Audiostreams_Furniture">
        <control type="image" description="Audio">
            <visible>!String.IsEmpty(ListItem.Property(AudioLanguage.1))</visible>
            <width>48</width>
            <centertop>50%</centertop>
            <height>64</height>
            <texture colordiffuse="Dark1">flags/audio.png</texture>
            <aspectratio align="left">scale</aspectratio>
        </control>
        <control type="grouplist">
            <centertop>47%</centertop>
            <width>250</width>
            <height>64</height>
            <left>10</left>
            <orientation>horizontal</orientation>
            <control type="label">
                <visible>!String.IsEmpty(ListItem.Property(AudioLanguage.1))</visible>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <textcolor>Dark1</textcolor>
                <label>$INFO[ListItem.Property(AudioLanguage.1)]</label>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(ListItem.Property(AudioLanguage.2))</visible>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <textcolor>Dark1</textcolor>
                <label>/ $INFO[ListItem.Property(AudioLanguage.2)]</label>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(ListItem.Property(AudioLanguage.3))</visible>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <textcolor>Dark1</textcolor>
                <label>/ $INFO[ListItem.Property(AudioLanguage.3)]</label>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(ListItem.Property(AudioLanguage.4))</visible>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <textcolor>Dark1</textcolor>
                <label>/ $INFO[ListItem.Property(AudioLanguage.4)]</label>
            </control>
            <control type="label">
                <visible>!String.IsEmpty(ListItem.Property(AudioLanguage.5))</visible>
                <width>auto</width>
                <height>64</height>
                <font>Tiny</font>
                <textcolor>Dark1</textcolor>
                <label>/ $INFO[ListItem.Property(AudioLanguage.5)]</label>
            </control>
        </control>
    </include>
</includes>
