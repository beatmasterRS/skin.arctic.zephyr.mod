<?xml version="1.0" encoding="UTF-8"?>
<includes>

    <include name="HomeClearLogo">

        <!-- Classic > bottomright > Disable UpWidget  -->
        <control type="image" description="clearlogo">
            <visible>Skin.HasSetting(home.netflix.clearlogo) + [Skin.HasSetting(home.classicwidgets) + !Skin.HasSetting(home.vertical) + Skin.HasSetting(home.dontautoshowwidget)] + !Skin.HasSetting(home.modernwidgets)</visible>
            <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
            <animation effect="fade" start="100" end="0" time="0" condition="Player.HasAudio + Skin.HasSetting(global.showvisualisation) + !String.IsEmpty(Visualisation.Name)">Conditional</animation>
            <include>Animation.FadeIn</include>
            <fadetime>ClearArtFadetime</fadetime>
            <animation effect="slide" start="0" end="0,-520" time="500" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
            <animation effect="slide" end="0" start="0,-520" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
            <top>495</top>
            <include content="def_right" condition="!Skin.HasSetting(home.showclearlogoleftbottomclassic)"><param name="right" value="SidePad" /></include>
            <include content="def_left" condition="Skin.HasSetting(home.showclearlogoleftbottomclassic)"><param name="left" value="SidePad" /></include>
            <width>275</width>
            <aspectratio scalediffuse="true" align="left">keep</aspectratio>
            <texture background="true">$VAR[ClearLogoHome]</texture>
            <animation effect="fade" start="100" end="0" time="500">VisibleChange</animation>
            <animation effect="fade" start="100" end="0" time="150">WindowClose</animation>
        </control>

        <!-- Classic > bottomLeft > Dont Have Disable UpWidget  -->
        <control type="image" description="clearlogo">
            <visible>Skin.HasSetting(home.netflix.clearlogo) + [Skin.HasSetting(home.classicwidgets) + !Skin.HasSetting(home.dontautoshowwidget) + !Skin.HasSetting(home.vertical)] + !Skin.HasSetting(home.modernwidgets)</visible>
            <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
            <animation effect="fade" start="100" end="0" time="0" condition="Player.HasAudio + Skin.HasSetting(global.showvisualisation) + !String.IsEmpty(Visualisation.Name)">Conditional</animation>
            <include>Animation.FadeIn</include>
            <fadetime>ClearArtFadetime</fadetime>
            <animation effect="slide" start="0" end="0,-250" time="500" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
            <animation effect="slide" end="0" start="0,-220" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
            <top>-40</top>
            <include content="def_right" condition="!Skin.HasSetting(home.showclearlogoleftbottomclassic)"><param name="right" value="SidePad" /></include>
            <include content="def_left" condition="Skin.HasSetting(home.showclearlogoleftbottomclassic)"><param name="left" value="SidePad" /></include>
            <width>275</width>
            <aspectratio scalediffuse="true" align="left">keep</aspectratio>
            <texture background="true">$VAR[ClearLogoHome]</texture>
            <animation effect="fade" start="100" end="0" time="500">VisibleChange</animation>
            <animation effect="fade" start="100" end="0" time="150">WindowClose</animation>
            <animation effect="slide" end="0,265" start="0,0" time="0" reversible="false" condition="String.IsEmpty(Container(300).ListItem.Property(widget)) + String.IsEqual(Container(300).ListItem.Property(background),playlistBackground)">Conditional</animation>
        </control>

        <!-- Featured > bottomright > Dont have Disable UpWidget  -->
        <control type="image" description="clearlogo">
            <visible>Skin.HasSetting(home.netflix.clearlogo) + [!Skin.HasSetting(home.classicwidgets) + !Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.dontautoshowwidget)] + !Skin.HasSetting(home.modernwidgets)</visible>
            <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
            <animation effect="fade" start="100" end="0" time="0" condition="Player.HasAudio + Skin.HasSetting(global.showvisualisation) + !String.IsEmpty(Visualisation.Name)">Conditional</animation>
            <include>Animation.FadeIn</include>
            <fadetime>ClearArtFadetime</fadetime>
            <animation effect="slide" start="0" end="0,130" time="500" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
            <animation effect="slide" end="0" start="0,130" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
            <top>550</top>
            <right>SidePad</right>
            <width>275</width>
            <aspectratio scalediffuse="true" align="left">keep</aspectratio>
            <texture background="true">$VAR[ClearLogoHome]</texture>
            <animation effect="fade" start="100" end="0" time="500">VisibleChange</animation>
            <animation effect="fade" start="100" end="0" time="150">WindowClose</animation>
            <animation effect="slide" end="0,-30" start="0,0" time="1" reversible="false" condition="Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(home.modernwidgets)">Conditional</animation>
            <animation effect="slide" end="0,-260" start="0,0" time="1" reversible="false" condition="Skin.HasSetting(home.modernwidgets)">Conditional</animation>
        </control>

        <!-- Featured > bottomright > have Disable UpWidget  -->
        <control type="image" description="clearlogo">
            <visible>Skin.HasSetting(home.netflix.clearlogo) + [!Skin.HasSetting(home.classicwidgets) + !Skin.HasSetting(home.vertical) + Skin.HasSetting(home.dontautoshowwidget)] + !Skin.HasSetting(home.modernwidgets)</visible>
            <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
            <animation effect="fade" start="100" end="0" time="0" condition="Player.HasAudio + Skin.HasSetting(global.showvisualisation) + !String.IsEmpty(Visualisation.Name)">Conditional</animation>
            <include>Animation.FadeIn</include>
            <fadetime>ClearArtFadetime</fadetime>
            <animation effect="slide" start="0" end="0,130" time="500" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
            <animation effect="slide" end="0" start="0,130" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
            <top>550</top>
            <right>SidePad</right>
            <width>275</width>
            <aspectratio scalediffuse="true" align="left">keep</aspectratio>
            <texture background="true">$VAR[ClearLogoHome]</texture>
            <animation effect="fade" start="100" end="0" time="500">VisibleChange</animation>
            <animation effect="fade" start="100" end="0" time="150">WindowClose</animation>
            <animation effect="slide" end="0,-30" start="0,0" time="0" condition="Skin.HasSetting(home.oldmenuheight)">Conditional</animation>
        </control>

        <!-- MODERN -->
        <control type="image" description="clearlogo">
            <visible>Skin.HasSetting(home.netflix.clearlogo) + $EXP[HomeIsModern]</visible>
            <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
            <animation effect="fade" start="100" end="0" time="0" condition="Player.HasAudio + Skin.HasSetting(global.showvisualisation) + !String.IsEmpty(Visualisation.Name)">Conditional</animation>
            <include>Animation.FadeIn</include>
            <fadetime>ClearArtFadetime</fadetime>
            <animation effect="slide" start="0" end="0,160" time="500" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
            <animation effect="slide" end="0" start="0,160" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
            <top>-35</top>
            <right>SidePad</right>
            <width>275</width>
            <aspectratio scalediffuse="true" align="left">keep</aspectratio>
            <texture background="true">$VAR[ClearLogoHome]</texture>
            <animation effect="fade" start="100" end="0" time="500">VisibleChange</animation>
            <animation effect="fade" start="100" end="0" time="150">WindowClose</animation>
            <animation effect="slide" end="0,325" start="0,0" time="0" reversible="false" condition="String.IsEmpty(Container(300).ListItem.Property(widget)) + String.IsEqual(Container(300).ListItem.Property(background),playlistBackground)">Conditional</animation>
        </control>

        <!-- Vertical > TopRight Header > With Header  -->
        <control type="image" description="clearlogo">
            <visible>Skin.HasSetting(home.netflix.clearlogo) + [Skin.HasSetting(home.vertical)] + !Skin.HasSetting(home.modernwidgets)</visible>
            <visible>[!Player.HasVideo | !Skin.HasSetting(global.showvideo)] + ![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]</visible>
            <animation effect="fade" start="100" end="0" time="0" condition="Player.HasAudio + Skin.HasSetting(global.showvisualisation)">Conditional</animation>
            <include>Animation.FadeIn</include>
            <fadetime>ClearArtFadetime</fadetime>
            <include content="def_top" condition="Skin.HasSetting(furniture.header)"><param name="top" value="-570" /></include>
            <include content="def_top" condition="!Skin.HasSetting(furniture.header)"><param name="top" value="-540" /></include>
            <right>SidePad</right>
            <width>275</width>
            <aspectratio scalediffuse="true" align="left">keep</aspectratio>
            <texture background="true">$VAR[ClearLogoHome]</texture>
            <animation effect="slide" end="0,145" start="0,0" time="0" condition="String.IsEqual(Container(300).ListItem.Property(widgetBanner),yes) + Control.HasFocus(301)">Conditional</animation>
            <animation effect="slide" end="400,145" start="0,0" time="0" condition="String.IsEqual(Container(300).ListItem.Property(widgetBanner),yes) + !Control.HasFocus(301)">Conditional</animation>
            <animation effect="fade" start="0" end="100" time="350" delay="300" reversible="false" condition="String.IsEqual(Container(300).ListItem.Property(widgetBanner),yes) + Control.HasFocus(301)">Conditional</animation>
            <animation effect="fade" start="100" end="0" time="500">VisibleChange</animation>
            <animation effect="fade" start="100" end="0" time="150">WindowClose</animation>
        </control>
    </include>

    <include name="HomeHeader">

        <!-- Header -->
        <control type="group">
            <visible>Skin.HasSetting(home.showheader)</visible>
            <animation effect="slide" start="0" end="0,-210" time="150" condition="[!Skin.HasSetting(home.classicwidgets) + Control.HasFocus(301)]">Conditional</animation>
            <animation effect="slide" start="0" end="0,-210" time="150">WindowClose</animation>
            <animation effect="slide" end="0" start="0,-210" time="150">WindowOpen</animation>
            <animation effect="slide" start="0" end="0,-80" time="0" condition="[Skin.HasSetting(home.modernwidgets)  + Skin.HasSetting(home.vertical.widgets)]">Conditional</animation>
            <control type="group">
                <visible>![Skin.HasSetting(homemenu.hide.lines) + $EXP[HomeIsModernMultiWidgets]]</visible>
                <control type="image" description="TopBG">
                    <width>100%</width>
                    <top>0</top>
                    <height>200</height>
                    <texture colordiffuse="Background">common/white.png</texture>
                    <animation effect="fade" start="100" end="90" time="0" condition="true">Conditional</animation>
                    <animation effect="fade" start="100" end="10" time="0" condition="!Skin.HasSetting(no.homemenu.clear) + $EXP[HomeIsModernMultiWidgets]">Conditional</animation>
                </control>
                <control type="image" description="Shadow">
                    <width>100%</width>
                    <height>16</height>
                    <top>200</top>
                    <texture flipy="false">common/shadow16B.png</texture>
                    <animation effect="fade" start="100" end="50" time="0" condition="!Skin.HasSetting(no.homemenu.clear) + $EXP[HomeIsModernMultiWidgets]">Conditional</animation>
                </control>
                <control type="image" description="BottomBG">
                    <width>2000</width>
                    <height>15</height>
                    <top>190</top>
                    <texture flipy="true" colordiffuse="Background">common/shadow-50.png</texture>
                    <animation effect="fade" start="100" end="50" time="0" condition="!Skin.HasSetting(no.homemenu.clear) + $EXP[HomeIsModernMultiWidgets]">Conditional</animation>
                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                </control>
                <control type="image" description="Shadow">
                    <width>100%</width>
                    <height>1</height>
                    <top>199</top>
                    <texture flipy="true" colordiffuse="BoxHomerow">common/sch2.png</texture>
                    <animation effect="fade" start="100" end="40" time="0" condition="!Skin.HasSetting(no.homemenu.clear) + $EXP[HomeIsModernMultiWidgets]">Conditional</animation>
                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                </control>
            </control>
            <control type="group">
                <top>-20</top>
                <animation effect="slide" start="0" end="0,40" time="0" condition="Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets)">Conditional</animation>
                <include>Furniture_Header</include>
            </control>
            <control type="group">
                <animation effect="slide" start="0" end="0,20" time="0" condition="Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets)">Conditional</animation>
                <visible>Player.HasMedia</visible>
                <include>Animation.FadeIn</include>
                <include>Animation.FadeOut</include>
                <include condition="!Skin.HasSetting(home.hide.nowplaying)">Furniture_NowPlaying</include>
            </control>
        </control>
    </include>

    <include name="HomeNowPlaying">

        <!-- Next Recording -->
        <control type="group">
            <right>72</right>
            <posy>70</posy>
            <width>660</width>
            <height>100</height>
            <include>Animation.FadeIn.Slide</include>
            <include>Animation.FadeOut</include>
            <visible>String.IsEmpty(Window(home).Property(TrailerFade))</visible>
            <visible>!Skin.HasSetting(home.showheader)</visible>
            <visible>Player.HasMedia</visible>
            <visible>![Skin.HasSetting(extended.nowplaying) + [ $EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets] ] ]</visible>
            <visible>!Control.HasFocus(301) | [Skin.HasSetting(home.classicwidgets) + !Skin.HasSetting(home.showheader)]</visible>
            <animation effect="slide" end="0,100" time="150" condition="[[!Skin.HasSetting(home.showheader) + [Window.IsVisible(DialogNotification.xml) | Window.IsVisible(DialogExtendedProgressBar.xml) | [Window.IsVisible(DialogVolumeBar.xml) + !Player.Muted]]]]">Conditional</animation>
            <control type="image">
                <description>background image</description>
                <posx>0</posx>
                <posy>0</posy>
                <width>660</width>
                <height>100</height>
                <texture border="16" colordiffuse="Background">common/rounded-shadow8.png</texture>
                <animation effect="fade" start="100" end="90" condition="true">Conditional</animation>
            </control>
            <control type="image">
                <left>7</left>
                <top>7</top>
                <right>7</right>
                <bottom>7</bottom>
                <texture colordiffuse="BoxNotification" border="4" background="true">common/box21.png</texture>
                <visible>!Skin.HasSetting(thumbnails.white)</visible>
            </control>
            <control type="group">
                <centertop>50%</centertop>
                <centerleft>52</centerleft>
                <height>100</height>
                <width>100</width>
                <control type="group">
                    <include content="NowPlaying_Progress">
                        <param name="id" value="9666" />
                        <param name="info" value="Player.Progress" />
                        <param name="visible" value="!VideoPlayer.Content(LiveTV)" />
                        <param name="animation" value="Animation.RotatePlay" />
                    </include>
                </control>
                <control type="group">
                    <include content="NowPlaying_Progress">
                        <param name="id" value="23" />
                        <param name="info" value="PVR.TimeshiftProgressPlayPos" />
                        <param name="visible" value="VideoPlayer.Content(LiveTV)" />
                        <param name="animation" value="Animation.RotatePlay" />
                    </include>
                </control>
            </control>
            <control type="group">
                <left>104</left>
                <width>545</width>
                <posy>10</posy>
                <control type="label">
                    <centertop>24</centertop>
                    <width>auto</width>
                    <font>NotificationBold</font>
                    <align>left</align>
                    <textcolor>Dark1</textcolor>
                    <label fallback="19055">$INFO[Player.Title]</label>
                </control>
                <control type="label">
                    <centertop>58</centertop>
                    <align>left</align>
                    <font>Flag</font>
                    <width>auto</width>
                    <textcolor>Dark2</textcolor>
                    <label>$VAR[Label_PVR_Other]</label>
                </control>
            </control>
        </control>
    </include>

    <include name="HomeNextRecording">

        <!-- Next Recording -->
        <control type="group">
            <right>72</right>
            <posy>70</posy>
            <width>660</width>
            <height>100</height>
            <include>Animation.FadeIn.Slide</include>
            <include>Animation.FadeOut</include>
            <visible>!Control.HasFocus(301) | [Skin.HasSetting(home.classicwidgets) + !Skin.HasSetting(home.showheader)]</visible>
            <visible>Skin.HasSetting(home.showheader) | !Window.IsVisible(DialogNotification.xml)</visible>
            <visible>Skin.HasSetting(home.showheader) | !Window.IsVisible(DialogExtendedProgress.xml)</visible>
            <visible>Skin.HasSetting(home.showheader) | !Window.IsVisible(DialogVolumeBar.xml)</visible>
            <animation effect="slide" end="0,100" time="150" condition="!Skin.HasSetting(home.showheader) + Player.HasMedia + !Skin.HasSetting(home.hide.nowplaying) + ![Skin.HasSetting(extended.nowplaying) + [$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]]]">Conditional</animation>
            <animation effect="slide" end="0,100" time="150" condition="!Skin.HasSetting(home.showheader) + Player.HasMedia + Window.IsVisible(DialogExtendedProgressBar.xml)">Conditional</animation>
            <animation effect="slide" start="0" end="0,190" time="150" condition="Skin.HasSetting(home.showheader)">Conditional</animation>
            <visible>Pvr.IsRecording | Pvr.HasTimer</visible>
            <control type="image">
                <description>background image</description>
                <posx>0</posx>
                <posy>0</posy>
                <width>660</width>
                <height>100</height>
                <texture border="16" colordiffuse="Background">common/rounded-shadow8.png</texture>
                <animation effect="fade" start="100" end="90" condition="true">Conditional</animation>
            </control>
            <control type="image">
                <left>7</left>
                <top>7</top>
                <right>7</right>
                <bottom>7</bottom>
                <texture colordiffuse="BoxNotification" border="4" background="true">common/box21.png</texture>
                <visible>!Skin.HasSetting(thumbnails.white)</visible>
            </control>
            <control type="group">
                <width>640</width>
                <control type="image">
                    <left>20</left>
                    <centertop>50%</centertop>
                    <width>64</width>
                    <height>64</height>
                    <aspectratio>keep</aspectratio>
                    <texture colordiffuse="Dark1">kaitoast/info.png</texture>
                </control>
                <control type="label">
                    <left>97</left>
                    <top>22</top>
                    <height>24</height>
                    <aligny>center</aligny>
                    <font>SmallBold</font>
                    <textcolor>Dark1</textcolor>
                    <label>$VAR[LabelNextRecordingHeader]</label>
                </control>
                <control type="label">
                    <left>97</left>
                    <bottom>22</bottom>
                    <height>24</height>
                    <aligny>center</aligny>
                    <font>Tiny</font>
                    <textcolor>Dark1</textcolor>
                    <label>$VAR[LabelNextRecording]</label>
                </control>
            </control>
        </control>
    </include>

    <include name="HomeWeatherWidget">

        <!-- Weather Widget -->
        <control type="group">
            <animation effect="slide" start="0" end="0,200" time="150" condition="Skin.HasSetting(home.showheader)">Conditional</animation>
            <animation effect="slide" end="0,100" time="150" condition="[Pvr.IsRecording | Pvr.HasTimer | [!Skin.HasSetting(home.showheader) + [Window.IsVisible(DialogNotification.xml) | Window.IsVisible(DialogExtendedProgressBar.xml) | Window.IsVisible(DialogVolumeBar.xml)]]]">Conditional</animation>
            <animation effect="slide" end="0,100" time="150" condition="!Skin.HasSetting(home.showheader) + Player.HasMedia">Conditional</animation>
            <visible>String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly) | Skin.HasSetting(home.showweatherfanart)</visible>
            <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
            <visible>!Control.HasFocus(301) | [Skin.HasSetting(home.classicwidgets) + !Skin.HasSetting(home.showheader) + ![Player.HasMedia + [Pvr.IsRecording | Pvr.HasTimer | Window.IsVisible(DialogNotification.xml) | Window.IsVisible(DialogExtendedProgressBar.xml) | Window.IsVisible(DialogVolumeBar.xml)]]]</visible>
            <include>Animation.FadeIn.Slide</include>
            <include>Animation.FadeOut</include>
            <visible>!Skin.HasSetting(furniture.weather)</visible>
            <right>72</right>
            <posy>70</posy>
            <width>660</width>
            <height>100</height>
            <control type="image">
                <description>background image</description>
                <left>0</left>
                <top>0</top>
                <bottom>0</bottom>
                <width>660</width>
                <texture border="16" colordiffuse="Background">common/rounded-shadow8.png</texture>
                <animation effect="fade" start="100" end="90" condition="true">Conditional</animation>
            </control>
            <control type="image">
                <left>8</left>
                <top>8</top>
                <right>8</right>
                <height>85</height>
                <bottom>0</bottom>
                <texture colordiffuse="BoxNotification" border="4" background="true">common/box21.png</texture>
                <visible>!Skin.HasSetting(thumbnails.white)</visible>
            </control>
            <control type="image">
                <centertop>52</centertop>
                <centerleft>52</centerleft>
                <width>70</width>
                <height>70</height>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Current.FanartCode),,.png]</texture>
                <visible>![String.IsEmpty(Skin.String(weather.icons.path)) | String.Contains(Skin.String(weather.icons.path),Default)] + !String.Contains(Skin.String(weather.icons.path),animated) + Skin.HasSetting(weather.icons.override) + !String.Contains(Skin.String(weather.icons.path),White) + !String.Contains(Skin.String(weather.icons.path),Outline) + !String.Contains(Skin.String(weather.icons.path),Transparent) + !String.Contains(Skin.String(weather.icons.path),Monstr)</visible>
                <include>IconFade</include>
            </control>
            <control type="image">
                <centertop>52</centertop>
                <centerleft>52</centerleft>
                <width>70</width>
                <height>70</height>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture colordiffuse="Dark2">$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Current.FanartCode),,.png]</texture>
                <visible>![String.IsEmpty(Skin.String(weather.icons.path)) | String.Contains(Skin.String(weather.icons.path),Default)] + !String.Contains(Skin.String(weather.icons.path),animated) + Skin.HasSetting(weather.icons.override) + [String.Contains(Skin.String(weather.icons.path),White) | String.Contains(Skin.String(weather.icons.path),Outline) | String.Contains(Skin.String(weather.icons.path),Transparent) | String.Contains(Skin.String(weather.icons.path),Monstr)]</visible>
            </control>
            <control type="multiimage">
                <centertop>52</centertop>
                <centerleft>52</centerleft>
                <width>70</width>
                <height>70</height>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <imagepath>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Current.FanartCode)]</imagepath>
                <visible>![String.IsEmpty(Skin.String(weather.icons.path)) | String.Contains(Skin.String(weather.icons.path),Default)] + String.Contains(Skin.String(weather.icons.path),animated) + Skin.HasSetting(weather.icons.override)</visible>
                <include>IconFade</include>
            </control>
            <control type="image">
                <centertop>52</centertop>
                <centerleft>52</centerleft>
                <width>80</width>
                <height>80</height>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture colordiffuse="Dark2">$INFO[Weather.FanartCode,resource://resource.images.weathericons.white/,.png]</texture>
                <visible>[String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),Default)] | [String.Contains(Skin.String(weather.icons.path),Default) + !Skin.HasSetting(weather.icons.override)] | [![String.IsEmpty(Skin.String(weather.icons.path)) | String.Contains(Skin.String(weather.icons.path),Default)] + !Skin.HasSetting(weather.icons.override)]</visible>
            </control>
            <control type="image">
                <centertop>52</centertop>
                <centerleft>52</centerleft>
                <width>70</width>
                <height>70</height>
                <aspectratio aligny="center" align="center">keep</aspectratio>
                <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Current.FanartCode),,.png]</texture>
                <visible>String.Contains(Skin.String(weather.icons.path),Default) + Skin.HasSetting(weather.icons.override)</visible>
                <include>IconFade</include>
            </control>
            <control type="label">
                <left>104</left>
                <top>22</top>
                <right>30</right>
                <aligny>center</aligny>
                <height>24</height>
                <font>SmallBold</font>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Weather.Conditions]</label>
            </control>
            <control type="label">
                <left>104</left>
                <bottom>22</bottom>
                <right>30</right>
                <aligny>center</aligny>
                <height>24</height>
                <font>Tiny</font>
                <textcolor>Dark1</textcolor>
                <label>$INFO[Weather.Temperature], $INFO[Window(Weather).Property(Current.FeelsLike),$LOCALIZE[402] ,°]</label>
            </control>
            <control type="label">
                <left>104</left>
                <bottom>22</bottom>
                <right>30</right>
                <aligny>center</aligny>
                <height>24</height>
                <align>right</align>
                <font>Flag</font>
                <scroll>false</scroll>
                <textcolor>Dark3</textcolor>
                <label>$INFO[Weather.Location]</label>
            </control>
        </control>
    </include>

    <include name="HomeWidgetUpdating">

        <!-- Container Updating -->
        <control type="group">
            <left>40</left>
            <bottom>250</bottom>
            <width>450</width>
            <height>117</height>
            <visible>Container(301).IsUpdating</visible>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <control type="image">
                <description>background image</description>
                <posx>0</posx>
                <posy>0</posy>
                <width>450</width>
                <height>117</height>
                <animation effect="fade" start="100" end="90" condition="true">Conditional</animation>
                <texture border="16" colordiffuse="Background">common/rounded-shadow8.png</texture>
            </control>
            <control type="image">
                <left>6</left>
                <top>7</top>
                <width>435</width>
                <height>102</height>
                <texture colordiffuse="BoxNotification" border="4">common/box21.png</texture>
                <visible>!Skin.HasSetting(thumbnails.white)</visible>
            </control>
            <include>BusySpinner</include>
        </control>
    </include>

    <include name="HomeWidgetModernUpdating">

        <!-- Container Updating -->
        <control type="group">
            <centerleft>50%</centerleft>
            <centertop>53%</centertop>
            <width>450</width>
            <height>117</height>
            <visible>[!String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) + !String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly) + Container(301).IsUpdating] | [!Weather.IsFetched + [String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]]</visible>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <include>BusySpinner</include>
        </control>
    </include>

    <include name="HomeWidgetInfo">

        <!-- Widget Info -->
        <control type="group">
            <animation effect="slide" end="0,-30" start="0,0" time="1" reversible="false" condition="Skin.HasSetting(home.oldmenuheight) + !Skin.HasSetting(home.modernwidgets)">Conditional</animation>
            <animation type="WindowClose" condition="!Skin.HasSetting(home.modernwidgets)">
                <effect type="fade" start="100" end="0" time="150"/>
            </animation>
            <animation effect="slide" end="0" start="0,250" time="150" condition="Skin.HasSetting(home.modernwidgets)">WindowOpen</animation>
            <animation effect="slide" start="0" end="0,250" time="150" condition="Skin.HasSetting(home.modernwidgets)">WindowClose</animation>
            <include>skinshortcuts-template-widget-featured</include>

            <!-- Normal Widget -->
            <control type="group">
                <visible>!Container(301).IsUpdating</visible>
                <visible>!Skin.HasSetting(home.modernwidgets)</visible>
                <visible>Integer.IsGreater(Container(301).NumItems,0)</visible>
                <visible>![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]</visible>
                <visible>!String.IsEqual(Container(300).ListItem.Property(widget),system)</visible>
                <visible>!String.IsEqual(Container(300).ListItem.Property(widgetaspect),Square) + !String.IsEqual(Container(300).ListItem.Property(widgetaspect),Thumbnail) + !String.IsEqual(Container(300).ListItem.Property(widgetaspect),Fanart)</visible>
                <visible>![Window.IsVisible(home) + !String.IsEmpty(Skin.String(home.slideshowpath)) + String.IsEmpty(Container(300).ListItem.Property(widget))] + [String.IsEmpty(Container(300).ListItem.Property(Background)) | !String.IsEmpty(Container(300).ListItem.Property(widget))]</visible>
                <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
                <visible>!Skin.HasSetting(home.dontautoshowwidget) | Control.HasFocus(301)</visible>
                <include>Animation.FadeIn</include>
                <animation effect="slide" start="0" end="0,220" time="500" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
                <animation effect="slide" end="0" start="0,220" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
                <left>40</left>
                <bottom>220</bottom>
                <width>890</width>
                <height>339</height>
                <control type="image">
                    <left>-1</left>
                    <right>4</right>
                    <top>-1</top>
                    <height>336</height>
                    <texture border="10">common/shadow-5.png</texture>
                </control>
                <control type="image">
                    <left>4</left>
                    <right>9</right>
                    <top>4</top>
                    <height>326</height>
                    <texture colordiffuse="BoxWidget" border="5">common/box21.png</texture>
                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                </control>
                <control type="image">
                    <top>5</top>
                    <left>5</left>
                    <right>10</right>
                    <height>324</height>
                    <animation effect="fade" start="100" end="90" time="200" condition="true">Conditional</animation>
                    <texture border="5" colordiffuse="Background" diffuse="diffuse/wall-fanart.png">common/box.png</texture>
                </control>
                <control type="image">
                    <left>5</left>
                    <top>5</top>
                    <width>216</width>
                    <height>324</height>
                    <fadetime>PosterFanartFadetime</fadetime>
                    <aspectratio scalediffuse="false">scale</aspectratio>
                    <texture diffuse="diffuse/widgetposter.png" fallback="DefaultAddonNone.png">$VAR[WidgetImage]</texture>
                </control>
                <control type="group">
                    <control type="label">
                        <left>251</left>
                        <top>5</top>
                        <right>40</right>
                        <aligny>center</aligny>
                        <height>80</height>
                        <font>TinyBold</font>
                        <textcolor>Dark2</textcolor>
                        <selectedcolor>Dark2</selectedcolor>
                        <label>$VAR[WidgetLabel]</label>
                        <visible>!Skin.HasSetting(hidewidgettitle)</visible>
                    </control>
                    <control type="label">
                        <left>251</left>
                        <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="10" />
                        </include>
                        <top>55</top>
                        <right>60</right>
                        <aligny>center</aligny>
                        <height>80</height>
                        <font>MediumBold</font>
                        <textcolor>Dark1</textcolor>
                        <selectedcolor>Dark1</selectedcolor>
                        <label>$VAR[WidgetTitle]</label>
                        <include condition="Skin.HasSetting(labels.autoscroll)">LabelScroll</include>
                    </control>
                    <control type="textbox">
                        <left>251</left>
                        <right>40</right>
                        <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="100" />
                        </include>
                        <top>140</top>
                        <include content="def_height" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="height" value="144"/>
                        </include>
                        <height>108</height>
                        <font>Tiny</font>
                        <align>justify</align>
                        <textcolor>Dark2</textcolor>
                        <selectedcolor>Dark2</selectedcolor>
                        <shadowcolor>noop</shadowcolor>
                        <label>$VAR[WidgetPlot]</label>
                    </control>
                </control>
                <control type="label">
                    <left>251</left>
                    <right>40</right>
                    <top>255</top>
                    <bottom>324</bottom>
                    <align>right</align>
                    <scroll>false</scroll>
                    <textcolor>Dark2</textcolor>
                    <selectedcolor>Dark2</selectedcolor>
                    <label>$VAR[WidgetSubLabel]</label>
                    <font>Flag</font>
                </control>
                <include content="IndicatorPoster301" condition="!Skin.HasSetting(hide.markers)">
                    <param name="right" value="1" />
                    <param name="top" value="-4" />
                </include>
            </control>

            <!-- Square Widget -->
            <control type="group">
                <visible>!Container(301).IsUpdating</visible>
                <visible>!Skin.HasSetting(home.modernwidgets)</visible>
                <visible>!Skin.HasSetting(home.dontautoshowwidget) | Control.HasFocus(301)</visible>
                <visible>![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]</visible>
                <visible>!String.IsEqual(Container(300).ListItem.Property(widget),system)</visible>
                <visible>String.IsEqual(Container(300).ListItem.Property(widgetaspect),Square)</visible>
                <visible>![Window.IsVisible(home) + !String.IsEmpty(Skin.String(home.slideshowpath)) + String.IsEmpty(Container(300).ListItem.Property(widget))] + [String.IsEmpty(Container(300).ListItem.Property(Background)) | !String.IsEmpty(Container(300).ListItem.Property(widget))]</visible>
                <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
                <include>Animation.FadeIn</include>
                <animation effect="slide" start="0" end="0,220" time="500" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
                <animation effect="slide" end="0" start="0,220" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
                <left>40</left>
                <bottom>220</bottom>
                <width>890</width>
                <height>339</height>
                <control type="image">
                    <left>-1</left>
                    <right>4</right>
                    <top>-1</top>
                    <height>336</height>
                    <texture border="10">common/shadow-5.png</texture>
                </control>
                <control type="image">
                    <left>4</left>
                    <right>9</right>
                    <top>4</top>
                    <height>326</height>
                    <texture colordiffuse="BoxWidget" border="5">common/box21.png</texture>
                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                </control>
                <control type="image">
                    <top>5</top>
                    <left>5</left>
                    <right>10</right>
                    <height>324</height>
                    <animation effect="fade" start="100" end="90" time="200" condition="true">Conditional</animation>
                    <texture border="5" colordiffuse="Background" diffuse="diffuse/wall-fanart.png">common/box.png</texture>
                </control>
                <control type="image">
                    <left>5</left>
                    <top>5</top>
                    <width>324</width>
                    <height>324</height>
                    <fadetime>PosterFanartFadetime</fadetime>
                    <aspectratio scalediffuse="false">keep</aspectratio>
                    <texture diffuse="diffuse/widgetposter.png" fallback="DefaultAddonNone.png">$VAR[WidgetImage]</texture>
                    <visible>!String.IsEqual(Container(300).ListItem.Property(widgetAspectRatio),scale)</visible>
                </control>
                <control type="image">
                    <left>5</left>
                    <top>5</top>
                    <width>324</width>
                    <height>324</height>
                    <fadetime>PosterFanartFadetime</fadetime>
                    <aspectratio scalediffuse="false">scale</aspectratio>
                    <texture diffuse="diffuse/widgetposter.png" fallback="DefaultAddonNone.png">$VAR[WidgetImage]</texture>
                    <visible>String.IsEqual(Container(300).ListItem.Property(widgetAspectRatio),scale)</visible>
                </control>
                <control type="group">
                    <control type="label">
                        <left>359</left>
                        <top>5</top>
                        <right>40</right>
                        <aligny>center</aligny>
                        <height>80</height>
                        <font>TinyBold</font>
                        <textcolor>Dark2</textcolor>
                        <selectedcolor>Dark2</selectedcolor>
                        <label>$VAR[WidgetLabel]</label>
                        <visible>!Skin.HasSetting(hidewidgettitle)</visible>
                    </control>
                    <control type="label">
                        <left>359</left>
                        <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="10" />
                        </include>
                        <top>55</top>
                        <right>40</right>
                        <aligny>center</aligny>
                        <height>80</height>
                        <font>MediumBold</font>
                        <textcolor>Dark1</textcolor>
                        <selectedcolor>Dark1</selectedcolor>
                        <label>$VAR[WidgetTitle]</label>
                        <include condition="Skin.HasSetting(labels.autoscroll)">LabelScroll</include>
                    </control>
                    <control type="textbox">
                        <left>359</left>
                        <right>40</right>
                        <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="100" />
                        </include>
                        <top>140</top>
                        <include content="def_height" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="height" value="144-"/>
                        </include>
                        <height>108</height>
                        <font>Tiny</font>
                        <align>justify</align>
                        <autoscroll>false</autoscroll>
                        <textcolor>Dark2</textcolor>
                        <selectedcolor>Dark2</selectedcolor>
                        <shadowcolor>noop</shadowcolor>
                        <label>$VAR[WidgetPlot]</label>
                    </control>
                </control>
                <control type="label">
                    <left>359</left>
                    <right>40</right>
                    <top>255</top>
                    <bottom>324</bottom>
                    <align>right</align>
                    <scroll>false</scroll>
                    <textcolor>Dark2</textcolor>
                    <selectedcolor>Dark2</selectedcolor>
                    <label>$VAR[WidgetSubLabel]</label>
                    <font>Flag</font>
                </control>
                <include content="IndicatorPoster301" condition="!Skin.HasSetting(hide.markers)">
                    <param name="right" value="1" />
                    <param name="top" value="-4" />
                </include>
            </control>

            <!-- Landscape -->
            <!-- Album Widget -->
            <control type="group">
                <visible>!Container(301).IsUpdating</visible>
                <visible>!Skin.HasSetting(home.modernwidgets)</visible>
                <visible>!Skin.HasSetting(home.dontautoshowwidget) | Control.HasFocus(301)</visible>
                <visible>![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]</visible>
                <visible>!String.IsEqual(Container(300).ListItem.Property(widget),system)</visible>
                <visible>String.IsEqual(Container(300).ListItem.Property(widgetaspect),Fanart) | String.IsEqual(Container(300).ListItem.Property(widgetaspect),Thumbnail)</visible>
                <visible>![Window.IsVisible(home) + !String.IsEmpty(Skin.String(home.slideshowpath)) + String.IsEmpty(Container(300).ListItem.Property(widget))] + [String.IsEmpty(Container(300).ListItem.Property(Background)) | !String.IsEmpty(Container(300).ListItem.Property(widget))]</visible>
                <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
                <include>Animation.FadeIn</include>
                <animation effect="slide" start="0" end="0,220" time="500" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
                <animation effect="slide" end="0" start="0,220" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
                <left>40</left>
                <bottom>220</bottom>
                <width>1142</width>
                <height>339</height>
                <control type="image">
                    <left>-1</left>
                    <right>4</right>
                    <top>-1</top>
                    <height>336</height>
                    <texture border="10">common/shadow-5.png</texture>
                </control>
                <control type="image">
                    <left>4</left>
                    <right>9</right>
                    <top>4</top>
                    <height>326</height>
                    <texture colordiffuse="BoxWidget" border="5">common/box21.png</texture>
                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                </control>
                <control type="image">
                    <top>5</top>
                    <left>5</left>
                    <right>10</right>
                    <height>324</height>
                    <animation effect="fade" start="100" end="90" time="200" condition="true">Conditional</animation>
                    <texture border="5" colordiffuse="Background" diffuse="diffuse/wall-fanart.png">common/box.png</texture>
                </control>
                <control type="image">
                    <left>5</left>
                    <top>5</top>
                    <width>576</width>
                    <height>324</height>
                    <fadetime>PosterFanartFadetime</fadetime>
                    <aspectratio scalediffuse="false">scale</aspectratio>
                    <texture diffuse="diffuse/widgetposter.png" fallback="DefaultAddonNone.png">$VAR[WidgetThumbImageFeatured]</texture>
                </control>
                <control type="group">
                    <control type="label">
                        <left>611</left>
                        <top>5</top>
                        <right>40</right>
                        <aligny>center</aligny>
                        <height>80</height>
                        <font>TinyBold</font>
                        <textcolor>Dark2</textcolor>
                        <selectedcolor>Dark2</selectedcolor>
                        <label>$VAR[WidgetLabel]</label>
                        <visible>!Skin.HasSetting(hidewidgettitle)</visible>
                    </control>
                    <control type="label">
                        <left>611</left>
                        <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="10" />
                        </include>
                        <top>55</top>
                        <right>40</right>
                        <aligny>center</aligny>
                        <height>80</height>
                        <font>MediumBold</font>
                        <textcolor>Dark1</textcolor>
                        <selectedcolor>Dark1</selectedcolor>
                        <label>$VAR[WidgetTitle]</label>
                        <include condition="Skin.HasSetting(labels.autoscroll)">LabelScroll</include>
                    </control>
                    <control type="textbox">
                        <left>611</left>
                        <right>40</right>
                        <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="100" />
                        </include>
                        <top>140</top>
                        <include content="def_height" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="height" value="144-"/>
                        </include>
                        <height>108</height>
                        <font>Tiny</font>
                        <align>justify</align>
                        <textcolor>Dark2</textcolor>
                        <selectedcolor>Dark2</selectedcolor>
                        <shadowcolor>noop</shadowcolor>
                        <label>$VAR[WidgetPlot]</label>
                    </control>
                </control>
                <control type="label">
                    <left>611</left>
                    <right>40</right>
                    <top>255</top>
                    <bottom>324</bottom>
                    <align>right</align>
                    <scroll>false</scroll>
                    <textcolor>Dark2</textcolor>
                    <selectedcolor>Dark2</selectedcolor>
                    <label>$VAR[WidgetSubLabel]</label>
                    <font>Flag</font>
                </control>
                <include content="IndicatorPoster301" condition="!Skin.HasSetting(hide.markers)">
                    <param name="right" value="1" />
                    <param name="top" value="-4" />
                </include>
            </control>

            <!-- New modern Widget BACKGROUND-->
            <control type="group">
                <visible>Skin.HasSetting(home.modernwidgets)</visible>
                <visible>![Window.IsVisible(home) + !String.IsEmpty(Skin.String(home.slideshowpath)) + String.IsEmpty(Container(300).ListItem.Property(widget))] + [String.IsEmpty(Container(300).ListItem.Property(Background)) | !String.IsEmpty(Container(300).ListItem.Property(widget))]</visible>
                <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
                <animation effect="slide" start="0" end="0,160" time="400" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
                <animation effect="slide" end="0" start="0,160" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
                <animation type="WindowClose" reversible="false">
                    <effect type="fade" end="0" start="100" time="200" />
                    <effect type="slide" start="0" end="0,250" time="200" />
                </animation>
                <left>-10</left>
                <bottom>150</bottom>
                <width>1940</width>
                <height>339</height>
                <control type="image">
                    <left>4</left>
                    <top>4</top>
                    <right>9</right>
                    <bottom>9</bottom>
                    <texture colordiffuse="BoxWidget" border="4" background="true">common/box21.png</texture>
                    <animation effect="fade" start="100" end="30" time="0" condition="true">Conditional</animation>
                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                </control>
                <control type="image">
                    <top>5</top>
                    <left>5</left>
                    <right>10</right>
                    <height>324</height>
                    <animation effect="fade" start="100" end="90" time="200" condition="true">Conditional</animation>
                    <texture colordiffuse="Background">common/white.png</texture>
                </control>
                <include condition="Skin.HasSetting(home.modernwidgets)">HomeWidgetModernUpdating</include>
            </control>

            <!-- New modern Widget Poster-->
            <control type="group">
                <visible>!Container(301).IsUpdating</visible>
                <visible>![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]</visible>
                <visible>!String.IsEqual(Container(300).ListItem.Property(widget),system)</visible>
                <visible>Skin.HasSetting(home.modernwidgets)</visible>
                <visible>!String.IsEqual(Container(300).ListItem.Property(widgetaspect),Square) + !String.IsEqual(Container(300).ListItem.Property(widgetaspect),Thumbnail) + !String.IsEqual(Container(300).ListItem.Property(widgetaspect),Fanart)</visible>
                <visible>![Window.IsVisible(home) + !String.IsEmpty(Skin.String(home.slideshowpath)) + String.IsEmpty(Container(300).ListItem.Property(widget))] + [String.IsEmpty(Container(300).ListItem.Property(Background)) | !String.IsEmpty(Container(300).ListItem.Property(widget))]</visible>
                <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
                <include>Animation.FadeIn</include>
                <animation effect="slide" start="0" end="0,160" time="400" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
                <animation effect="slide" end="0" start="0,160" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
                <animation type="WindowClose" reversible="false">
                    <effect type="fade" end="0" start="100" time="200" />
                    <effect type="slide" start="0" end="0,250" time="200" />
                </animation>
                <left>0</left>
                <bottom>150</bottom>
                <width>1940</width>
                <height>339</height>
                <control type="image">
                    <left>SidePad</left>
                    <top>5</top>
                    <width>216</width>
                    <height>324</height>
                    <fadetime>PosterFanartFadetime</fadetime>
                    <aspectratio scalediffuse="false">scale</aspectratio>
                    <texture fallback="DefaultAddonNone.png">$VAR[WidgetImage]</texture>
                </control>
                <control type="group">
                    <right>50</right>
                    <control type="label">
                        <left>329</left>
                        <top>5</top>
                        <right>50</right>
                        <aligny>center</aligny>
                        <height>80</height>
                        <font>TinyBold</font>
                        <textcolor>Dark2</textcolor>
                        <selectedcolor>Dark2</selectedcolor>
                        <label>$VAR[WidgetLabel]</label>
                        <visible>!Skin.HasSetting(hidewidgettitle)</visible>
                    </control>
                    <control type="label">
                        <left>329</left>
                        <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="10" />
                        </include>
                        <top>55</top>
                        <right>50</right>
                        <aligny>center</aligny>
                        <height>80</height>
                        <font>MediumBold</font>
                        <textcolor>Dark1</textcolor>
                        <selectedcolor>Dark1</selectedcolor>
                        <label>$VAR[WidgetTitle]</label>
                    </control>
                    <control type="textbox">
                        <left>329</left>
                        <right>50</right>
                        <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="100" />
                        </include>
                        <include content="def_height" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="height" value="144-"/>
                        </include>
                        <top>140</top>
                        <height>108</height>
                        <font>Tiny</font>
                        <align>justify</align>
                        <autoscroll>false</autoscroll>
                        <textcolor>Dark2</textcolor>
                        <selectedcolor>Dark2</selectedcolor>
                        <shadowcolor>noop</shadowcolor>
                        <label>$VAR[WidgetPlot]</label>
                    </control>
                </control>
                <control type="label">
                    <left>359</left>
                    <right>100</right>
                    <top>255</top>
                    <bottom>324</bottom>
                    <align>right</align>
                    <scroll>false</scroll>
                    <textcolor>Dark2</textcolor>
                    <selectedcolor>Dark2</selectedcolor>
                    <label>$VAR[WidgetSubLabel]</label>
                    <font>Flag</font>
                </control>
            </control>

            <!-- New modern Widget Fanart-->
            <control type="group">
                <visible>!Container(301).IsUpdating</visible>
                <visible>![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]</visible>
                <visible>!String.IsEqual(Container(300).ListItem.Property(widget),system)</visible>
                <visible>Skin.HasSetting(home.modernwidgets)</visible>
                <visible>String.IsEqual(Container(300).ListItem.Property(widgetaspect),Fanart) | String.IsEqual(Container(300).ListItem.Property(widgetaspect),Thumbnail)</visible>
                <visible>![Window.IsVisible(home) + !String.IsEmpty(Skin.String(home.slideshowpath)) + String.IsEmpty(Container(300).ListItem.Property(widget))] + [String.IsEmpty(Container(300).ListItem.Property(Background)) | !String.IsEmpty(Container(300).ListItem.Property(widget))]</visible>
                <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
                <include>Animation.FadeIn</include>
                <animation effect="slide" start="0" end="0,160" time="400" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
                <animation effect="slide" end="0" start="0,160" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
                <animation type="WindowClose" reversible="false">
                    <effect type="fade" end="0" start="100" time="200" />
                    <effect type="slide" start="0" end="0,250" time="200" />
                </animation>
                <left>0</left>
                <bottom>150</bottom>
                <width>1940</width>
                <height>339</height>
                <control type="image">
                    <left>SidePad</left>
                    <top>5</top>
                    <width>576</width>
                    <height>324</height>
                    <fadetime>PosterFanartFadetime</fadetime>
                    <aspectratio scalediffuse="false">scale</aspectratio>
                    <texture fallback="DefaultAddonNone.png">$VAR[WidgetThumbImageFeatured]</texture>
                </control>
                <control type="group">
                    <right>50</right>
                    <control type="label">
                        <left>688</left>
                        <top>5</top>
                        <right>50</right>
                        <aligny>center</aligny>
                        <height>80</height>
                        <font>TinyBold</font>
                        <textcolor>Dark2</textcolor>
                        <selectedcolor>Dark2</selectedcolor>
                        <label>$VAR[WidgetLabel]</label>
                        <visible>!Skin.HasSetting(hidewidgettitle)</visible>
                    </control>
                    <control type="label">
                        <left>688</left>
                        <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="10" />
                        </include>
                        <top>55</top>
                        <right>50</right>
                        <aligny>center</aligny>
                        <height>80</height>
                        <font>MediumBold</font>
                        <textcolor>Dark1</textcolor>
                        <selectedcolor>Dark1</selectedcolor>
                        <label>$VAR[WidgetTitle]</label>
                    </control>
                    <control type="textbox">
                        <left>688</left>
                        <right>50</right>
                        <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="100" />
                        </include>
                        <include content="def_height" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="height" value="144-"/>
                        </include>
                        <top>140</top>
                        <height>108</height>
                        <font>Tiny</font>
                        <align>justify</align>
                        <autoscroll>false</autoscroll>
                        <textcolor>Dark2</textcolor>
                        <selectedcolor>Dark2</selectedcolor>
                        <shadowcolor>noop</shadowcolor>
                        <label>$VAR[WidgetPlot]</label>
                    </control>
                </control>
                <control type="label">
                    <left>688</left>
                    <right>100</right>
                    <top>255</top>
                    <bottom>324</bottom>
                    <align>right</align>
                    <scroll>false</scroll>
                    <textcolor>Dark2</textcolor>
                    <selectedcolor>Dark2</selectedcolor>
                    <label>$VAR[WidgetSubLabel]</label>
                    <font>Flag</font>
                </control>
            </control>

            <!-- New modern Widget Square-->
            <control type="group">
                <visible>!Container(301).IsUpdating</visible>
                <visible>![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]</visible>
                <visible>!String.IsEqual(Container(300).ListItem.Property(widget),system)</visible>
                <visible>Skin.HasSetting(home.modernwidgets)</visible>
                <visible>String.IsEqual(Container(300).ListItem.Property(widgetaspect),Square)</visible>
                <visible>![Window.IsVisible(home) + !String.IsEmpty(Skin.String(home.slideshowpath)) + String.IsEmpty(Container(300).ListItem.Property(widget))] + [String.IsEmpty(Container(300).ListItem.Property(Background)) | !String.IsEmpty(Container(300).ListItem.Property(widget))]</visible>
                <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
                <include>Animation.FadeIn</include>
                <animation effect="slide" start="0" end="0,160" time="400" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
                <animation effect="slide" end="0" start="0,160" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
                <animation type="WindowClose" reversible="false">
                    <effect type="fade" end="0" start="100" time="200" />
                    <effect type="slide" start="0" end="0,250" time="200" />
                </animation>
                <left>0</left>
                <bottom>150</bottom>
                <width>1940</width>
                <height>339</height>
                <control type="image">
                    <left>SidePad</left>
                    <top>5</top>
                    <width>324</width>
                    <height>324</height>
                    <fadetime>PosterFanartFadetime</fadetime>
                    <aspectratio scalediffuse="false">keep</aspectratio>
                    <texture fallback="DefaultAddonNone.png">$VAR[WidgetImage]</texture>
                    <visible>!String.IsEqual(Container(300).ListItem.Property(widgetAspectRatio),scale)</visible>
                </control>
                <control type="image">
                    <left>SidePad</left>
                    <top>5</top>
                    <width>324</width>
                    <height>324</height>
                    <fadetime>PosterFanartFadetime</fadetime>
                    <aspectratio scalediffuse="false">scale</aspectratio>
                    <texture fallback="DefaultAddonNone.png">$VAR[WidgetImage]</texture>
                    <visible>String.IsEqual(Container(300).ListItem.Property(widgetAspectRatio),scale)</visible>
                </control>
                <control type="group">
                    <right>50</right>
                    <control type="label">
                        <left>435</left>
                        <top>5</top>
                        <right>50</right>
                        <aligny>center</aligny>
                        <height>80</height>
                        <font>TinyBold</font>
                        <textcolor>Dark2</textcolor>
                        <selectedcolor>Dark2</selectedcolor>
                        <label>$VAR[WidgetLabel]</label>
                        <visible>!Skin.HasSetting(hidewidgettitle)</visible>
                    </control>
                    <control type="label">
                        <left>435</left>
                        <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="10" />
                        </include>
                        <top>55</top>
                        <right>50</right>
                        <aligny>center</aligny>
                        <height>80</height>
                        <font>MediumBold</font>
                        <textcolor>Dark1</textcolor>
                        <selectedcolor>Dark1</selectedcolor>
                        <label>$VAR[WidgetTitle]</label>
                    </control>
                    <control type="textbox">
                        <left>435</left>
                        <right>50</right>
                        <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="100" />
                        </include>
                        <include content="def_height" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="height" value="144-"/>
                        </include>
                        <top>140</top>
                        <height>108</height>
                        <font>Tiny</font>
                        <align>justify</align>
                        <autoscroll>false</autoscroll>
                        <textcolor>Dark2</textcolor>
                        <selectedcolor>Dark2</selectedcolor>
                        <shadowcolor>noop</shadowcolor>
                        <label>$VAR[WidgetPlot]</label>
                    </control>
                </control>
                <control type="label">
                    <left>359</left>
                    <right>100</right>
                    <top>255</top>
                    <bottom>324</bottom>
                    <align>right</align>
                    <scroll>false</scroll>
                    <textcolor>Dark2</textcolor>
                    <selectedcolor>Dark2</selectedcolor>
                    <label>$VAR[WidgetSubLabel]</label>
                    <font>Flag</font>
                </control>
            </control>

            <!-- New modern Widget SystemInfo-->
            <control type="group">
                <visible>!Container(301).IsUpdating</visible>
                <visible>![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]</visible>
                <visible>String.IsEqual(Container(300).ListItem.Property(widget),system)</visible>
                <visible>![Window.IsVisible(home) + !String.IsEmpty(Skin.String(home.slideshowpath)) + String.IsEmpty(Container(300).ListItem.Property(widget))] + [String.IsEmpty(Container(300).ListItem.Property(Background)) | !String.IsEmpty(Container(300).ListItem.Property(widget))]</visible>
                <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
                <include>Animation.FadeIn</include>
                <animation effect="slide" start="0" end="0,160" time="400" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
                <animation effect="slide" end="0" start="0,160" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
                <animation type="WindowClose" reversible="false">
                    <effect type="fade" end="0" start="100" time="200" />
                    <effect type="slide" start="0" end="0,250" time="200" />
                </animation>
                <left>-40</left>
                <bottom>220</bottom>
                <width>890</width>
                <height>339</height>
                <control type="group">
                    <left>SidePad</left>
                    <visible>!Skin.HasSetting(home.modernwidgets)</visible>
                    <control type="image">
                        <left>-1</left>
                        <right>4</right>
                        <top>-1</top>
                        <height>336</height>
                        <texture border="10">common/shadow-5.png</texture>
                    </control>
                    <control type="image">
                        <left>4</left>
                        <right>9</right>
                        <top>4</top>
                        <height>326</height>
                        <texture colordiffuse="BoxWidget" border="5">common/box21.png</texture>
                        <visible>!Skin.HasSetting(thumbnails.white)</visible>
                    </control>
                    <control type="image">
                        <top>5</top>
                        <left>5</left>
                        <right>10</right>
                        <height>324</height>
                        <animation effect="fade" start="100" end="90" time="200" condition="true">Conditional</animation>
                        <texture border="5" colordiffuse="Background" diffuse="diffuse/wall-fanart.png">common/box.png</texture>
                    </control>
                </control>
                <control type="group">
                    <left>5</left>
                    <animation effect="slide" end="35,70" start="0,0" time="0" condition="Skin.HasSetting(home.modernwidgets)">Conditional</animation>
                    <control type="group">
                        <width>325</width>
                        <left>SidePad</left>
                        <control type="image">
                            <top>5</top>
                            <left>0</left>
                            <right>0</right>
                            <bottom>10</bottom>
                            <texture border="5" diffuse="diffuse/cardthumb.png" colordiffuse="Panel">common/box.png</texture>
                            <animation effect="fade" start="100" end="90" condition="true">Conditional</animation>
                        </control>
                    </control>
                    <control type="image">
                        <left>SidePad</left>
                        <top>5</top>
                        <width>324</width>
                        <height>324</height>
                        <fadetime>PosterFanartFadetime</fadetime>
                        <aspectratio scalediffuse="false">keep</aspectratio>
                        <texture fallback="DefaultAddonNone.png">$INFO[Container(301).ListItem.Icon]</texture>
                    </control>
                    <control type="group">
                        <right>50</right>
                        <control type="label">
                            <left>435</left>
                            <top>5</top>
                            <right>50</right>
                            <aligny>center</aligny>
                            <height>80</height>
                            <font>TinyBold</font>
                            <textcolor>Dark2</textcolor>
                            <selectedcolor>Dark2</selectedcolor>
                            <label>$VAR[WidgetLabel]</label>
                            <visible>!Skin.HasSetting(hidewidgettitle)</visible>
                        </control>
                        <control type="label">
                            <left>435</left>
                            <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                                <param name="top" value="10" />
                            </include>
                            <top>55</top>
                            <right>50</right>
                            <aligny>center</aligny>
                            <height>80</height>
                            <font>MediumBold</font>
                            <textcolor>Dark1</textcolor>
                            <selectedcolor>Dark1</selectedcolor>
                            <label>$VAR[WidgetTitle]</label>
                        </control>
                        <control type="textbox">
                            <left>435</left>
                            <right>50</right>
                            <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="top" value="100" />
                        </include>
                        <include content="def_height" condition="Skin.HasSetting(hidewidgettitle)">
                            <param name="height" value="144-"/>
                        </include>
                        <top>140</top>
                        <height>108</height>
                            <font>Tiny</font>
                            <align>justify</align>
                            <autoscroll>false</autoscroll>
                            <textcolor>Dark2</textcolor>
                            <selectedcolor>Dark2</selectedcolor>
                            <shadowcolor>noop</shadowcolor>
                            <label>$INFO[Container(301).ListItem.Label2][CR]$INFO[Container(301).ListItem.Property(Label3)]</label>
                        </control>
                    </control>
                    <control type="group">
                        <animation effect="slide" end="0,-38" start="0,0" time="0" condition="Skin.HasSetting(hidewidgettitle)">Conditional</animation>
                        <control type="progress">
                            <description>CPU BAR</description>
                            <height>10</height>
                            <width>80</width>
                            <bottom>170</bottom>
                            <left>700</left>
                            <info>System.CPUUsage</info>
                            <include>DefSettingsButton</include>
                            <animation effect="rotate" condition="true" start="360" end="90" loop="false" time="0" center="auto">Conditional</animation>
                            <visible>String.IsEqual(ListItem.Property(Label4),cpu)</visible>
                        </control>
                        <control type="progress">
                            <description>CPU BAR</description>
                            <height>10</height>
                            <width>80</width>
                            <bottom>170</bottom>
                            <left>700</left>
                            <info>system.memory(used)</info>
                            <include>DefSettingsButton</include>
                            <animation effect="rotate" condition="true" start="360" end="90" loop="false" time="0" center="auto">Conditional</animation>
                            <visible>String.IsEqual(ListItem.Property(Label4),ram)</visible>
                        </control>
                        <control type="progress">
                            <description>CPU BAR</description>
                            <height>10</height>
                            <width>80</width>
                            <bottom>170</bottom>
                            <left>700</left>
                            <info>System.UsedSpace</info>
                            <include>DefSettingsButton</include>
                            <animation effect="rotate" condition="true" start="360" end="90" loop="false" time="0" center="auto">Conditional</animation>
                            <visible>String.IsEqual(ListItem.Property(Label4),storage)</visible>
                        </control>
                    </control>
                </control>
            </control>

            <!-- New modern Widget Weather-->
            <control type="group">
                <animation effect="slide" start="0" end="0,160" time="400" tween="back" reversible="false" easing="out" condition="Control.HasFocus(301)">Conditional</animation>
                <animation effect="slide" end="0" start="0,160" time="150" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
                <animation type="WindowClose" reversible="false">
                    <effect type="fade" end="0" start="100" time="200" />
                    <effect type="slide" start="0" end="0,250" time="200" />
                </animation>
                <visible>String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)</visible>
                <visible>Weather.IsFetched</visible>
                <visible>Skin.HasSetting(home.modernwidgets)</visible>
                <visible>!Player.HasVideo | !Skin.HasSetting(global.showvideo)</visible>
                <include>Animation.FadeIn</include>
                <control type="wraplist" id="301">
                    <visible>String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily)</visible>
                    <bottom>64</bottom>
                    <left>63</left>
                    <width>1780</width>
                    <height>430</height>
                    <onleft>301</onleft>
                    <onright>301</onright>
                    <ondown>300</ondown>
                    <onback>300</onback>
                    <onup>300</onup>
                    <onclick>ActivateWindow(Weather)</onclick>
                    <orientation>horizontal</orientation>
                    <preloaditems>0</preloaditems>
                    <viewtype label="536">list</viewtype>
                    <include>layoutweather</include>
                    <content>
                        <include>skinshortcuts-template-WeatherDailyInfoContent</include>
                    </content>
                </control>
                <control type="wraplist" id="301">
                    <visible>String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)</visible>
                    <bottom>64</bottom>
                    <left>63</left>
                    <width>1780</width>
                    <height>430</height>
                    <onleft>301</onleft>
                    <onright>301</onright>
                    <ondown>300</ondown>
                    <onback>300</onback>
                    <onup>300</onup>
                    <onclick>ActivateWindow(Weather)</onclick>
                    <orientation>horizontal</orientation>
                    <preloaditems>0</preloaditems>
                    <viewtype label="536">list</viewtype>
                    <include>layoutweather</include>
                    <content>
                        <include>skinshortcuts-template-WeatherHourlyInfoContent</include>
                    </content>
                </control>
            </control>
            <include condition="!Skin.HasSetting(home.modernwidgets)">HomeWidgetUpdating</include>
        </control>
    </include>

    <include name="HomeRow">

        <!-- Home Row -->
        <control type="group">
            <animation effect="slide" start="0" end="0,163" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302) + !ControlGroup(777).HasFocus() + Skin.HasSetting(homemenu.clean.flix) + !Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="0,53" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302) + Skin.HasSetting(homemenu.clean.flix) + !Skin.HasSetting(homemenu.clean.flix.no.slide) + [Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)]">Conditional</animation>
            <animation effect="slide" start="0" end="0,-24" time="0" condition="Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets) + Skin.HasSetting(home.oldmenuheight)">Conditional</animation>
            <animation effect="slide" start="0" end="0,30" time="0" condition="Skin.HasSetting(home.modernwidgets)">Conditional</animation>
            <animation effect="slide" start="0" end="0,-27" time="0" condition="$EXP[HomeIsModernMultiWidgets] + Skin.HasSetting(submenu.compatibility) + !Skin.HasSetting(home.oldmenuheight)">Conditional</animation>
            <animation effect="slide" start="0" end="0,250" time="150" condition="!Skin.HasSetting(home.modernwidgets) + !Skin.HasSetting(home.classicwidgets) + Control.HasFocus(301)">Conditional</animation>
            <animation effect="slide" start="0" end="0,160" time="400" tween="back" reversible="false" easing="out" condition="Skin.HasSetting(home.modernwidgets) + !Skin.HasSetting(home.classicwidgets) + Control.HasFocus(301)">Conditional</animation>
            <animation effect="slide" end="0" start="0,160" time="150" reversible="false" condition="Skin.HasSetting(home.modernwidgets) +  ![Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets)] + !Skin.HasSetting(home.classicwidgets) + !Control.HasFocus(301)">Conditional</animation>
            <animation effect="slide" end="0" start="0,160" time="150" condition="$EXP[HomeIsModernMultiWidgets] + !Skin.HasSetting(submenu.compatibility) + !Skin.HasSetting(home.oldmenuheight)">WindowOpen</animation>            <animation effect="slide" start="0" end="0,160" time="150" condition="$EXP[HomeIsModernMultiWidgets] + !Skin.HasSetting(submenu.compatibility) + !Skin.HasSetting(home.oldmenuheight)">WindowClose</animation>
            <animation effect="slide" end="0" start="0,220" time="150" condition="$EXP[HomeIsModernMultiWidgets] + [Skin.HasSetting(submenu.compatibility) | Skin.HasSetting(home.oldmenuheight)]">WindowOpen</animation>
            <animation effect="slide" start="0" end="0,220" time="150" condition="$EXP[HomeIsModernMultiWidgets] + [Skin.HasSetting(submenu.compatibility) | Skin.HasSetting(home.oldmenuheight)]">WindowClose</animation>
            <animation effect="slide" end="0" start="0,250" time="150" condition="!$EXP[HomeIsModernMultiWidgets]">WindowOpen</animation>
            <animation effect="slide" start="0" end="0,250" time="150" condition="!$EXP[HomeIsModernMultiWidgets]">WindowClose</animation>
            <control type="group">
                <visible>[!Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(home.modernwidgets)] + ![Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets) + Skin.HasSetting(home.oldmenuheight)]</visible>
                <control type="group">
                    <visible>![Skin.HasSetting(homemenu.hide.lines) + $EXP[HomeIsModernMultiWidgets]]</visible>
                    <control type="image" description="BottomBG">
                        <width>100%</width>
                        <height>15</height>
                        <bottom>181</bottom>
                        <texture colordiffuse="Background">common/shadow-50.png</texture>
                    </control>
                    <control type="image" description="BottomBG">
                        <width>100%</width>
                        <height>15</height>
                        <bottom>24</bottom>
                        <texture flipy="true" colordiffuse="Background">common/shadow-50.png</texture>
                    </control>
                </control>
                <control type="image" description="FanartOverlay">
                    <width>100%</width>
                    <height>160</height>
                    <bottom>30</bottom>
                    <aspectratio aligny="bottom">scale</aspectratio>
                    <texture colordiffuse="Background">common/white.png</texture>
                    <animation effect="fade" start="100" end="95" time="0" condition="true">Conditional</animation>
                    <animation effect="fade" start="100" end="10" time="0" condition="!Skin.HasSetting(no.homemenu.clear) + $EXP[HomeIsModernMultiWidgets]">Conditional</animation>
                </control>
                <control type="group">
                    <visible>![Skin.HasSetting(homemenu.hide.lines) + $EXP[HomeIsModernMultiWidgets]]</visible>
                    <control type="image" description="Shadow">
                        <width>100%</width>
                        <height>1</height>
                        <bottom>190</bottom>
                        <texture flipy="true" colordiffuse="BoxHomerow">common/sch2.png</texture>
                        <animation effect="fade" start="100" end="25" time="0" condition="!Skin.HasSetting(no.homemenu.clear) + $EXP[HomeIsModernMultiWidgets]">Conditional</animation>
                    </control>
                    <control type="image" description="Shadow">
                        <width>100%</width>
                        <height>1</height>
                        <bottom>29</bottom>
                        <texture flipy="true" colordiffuse="BoxHomerow">common/sch2.png</texture>
                        <visible>!Skin.HasSetting(thumbnails.white)</visible>
                        <animation effect="fade" start="100" end="25" time="0" condition="!Skin.HasSetting(no.homemenu.clear) + $EXP[HomeIsModernMultiWidgets]">Conditional</animation>
                    </control>
                </control>
            </control>
            <control type="group">
                <visible>Skin.HasSetting(home.oldmenuheight) + !Skin.HasSetting(home.modernwidgets) | [Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets) + Skin.HasSetting(home.oldmenuheight)]</visible>
                <control type="image" description="BottomBG">
                    <visible>![Skin.HasSetting(homemenu.hide.lines) + $EXP[HomeIsModernMultiWidgets]]</visible>
                    <width>100%</width>
                    <height>15</height>
                    <bottom>211</bottom>
                    <texture colordiffuse="Background">common/shadow-50.png</texture>
                </control>
                <control type="image" description="BottomBG">
                    <width>100%</width>
                    <height>220</height>
                    <bottom>0</bottom>
                    <aspectratio aligny="bottom">scale</aspectratio>
                    <texture colordiffuse="Background">common/white.png</texture>
                    <animation effect="fade" start="100" end="95" time="0" condition="true">Conditional</animation>
                    <animation effect="fade" start="100" end="10" time="0" condition="!Skin.HasSetting(no.homemenu.clear) + $EXP[HomeIsModernMultiWidgets]">Conditional</animation>
                </control>
                <control type="group">
                    <visible>![Skin.HasSetting(homemenu.hide.lines) + $EXP[HomeIsModernMultiWidgets]]</visible>
                    <control type="image" description="Shadow">
                        <width>100%</width>
                        <height>16</height>
                        <bottom>220</bottom>
                        <texture flipy="true">common/shadow16B.png</texture>
                        <animation effect="fade" start="100" end="25" time="0" condition="!Skin.HasSetting(no.homemenu.clear) + $EXP[HomeIsModernMultiWidgets]">Conditional</animation>
                    </control>
                    <control type="image" description="Shadow">
                        <width>100%</width>
                        <height>1</height>
                        <bottom>220</bottom>
                        <texture flipy="true" colordiffuse="BoxHomerow">common/sch2.png</texture>
                        <animation effect="fade" start="100" end="25" time="0" condition="!Skin.HasSetting(no.homemenu.clear) + $EXP[HomeIsModernMultiWidgets]">Conditional</animation>
                        <visible>!Skin.HasSetting(thumbnails.white)</visible>
                    </control>
                </control>
            </control>
            <include>Furniture_Clock</include>
            <control type="group">
                <animation effect="slide" start="0" end="0,163" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302) + Skin.HasSetting(homemenu.slide) + $EXP[HomeIsModernMultiWidgets] + !Skin.HasSetting(homemenu.clean.flix)">Conditional</animation>
                <control type="image">
                    <visible>Integer.IsGreater(Container(300).NumItems,6)</visible>
                    <top>962</top>
                    <left>52</left>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2" flipx="true">common/arrow-small-right.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsGreater(Container(300).NumItems,6)</visible>
                    <visible>!Skin.HasSetting(furniture.clock)</visible>
                    <top>962</top>
                    <right>480</right>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2" flipx="false">common/arrow-small-right.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsGreater(Container(300).NumItems,6)</visible>
                    <visible>Skin.HasSetting(furniture.clock)</visible>
                    <top>962</top>
                    <right>42</right>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2" flipx="false">common/arrow-small-right.png</texture>
                </control>
                <control type="list" id="300">
                    <include>Animation.FadeIn.Delay</include>
                    <include>Animation.FadeOut</include>
                    <description>Home Wraplist</description>
                    <left>SidePad</left>
                    <onfocus>ClearProperty(ContainerPosition,home)</onfocus>
                    <onfocus>ClearProperty(listitem.trailer,home)</onfocus>
                    <onfocus>ClearProperty(controlsvisible,home)</onfocus>
                    <onfocus>ClearProperty(SetUserRating,home)</onfocus>
                    <include condition="!Skin.HasSetting(furniture.clock)">DefHomeRight520</include>
                    <include condition="Skin.HasSetting(furniture.clock)">DefHomeRightSidePad</include>
                    <onup condition="$EXP[ExtendedNowPlayingIsVisible] + Skin.HasSetting(home.nowplaying.controls) + [$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]]">777</onup>
                    <onup condition="!Player.HasVideo | !Skin.HasSetting(global.showvideo)">301</onup>
                    <onup>301</onup>
                    <ondown condition="Integer.IsGreater(Container(302).NumItems,0)">SetFocus(302,0)</ondown>
                    <onback condition="Skin.HasSetting(home.onback.go.to.first.widget) + Integer.IsGreater(Container(301).NumItems,0)">SetFocus(301)</onback>
                    <onleft>300</onleft>
                    <onright>300</onright>
                    <orientation>horizontal</orientation>
                    <scrolltime>200</scrolltime>
                    <include condition="Skin.HasSetting(home.showicons)">HomeContentIcon</include>
                    <include condition="!Skin.HasSetting(home.showicons)">HomeContentNoIcon</include>
                </control>
            </control>
        </control>
        
    </include>

    <include name="HomeSubMenu">

        <!-- Sub Menu -->
        <control type="group">
            <animation type="Conditional" condition="Control.HasFocus(302)" reversible="false">
                <effect type="fade" start="0" end="100" time="250" delay="0" tween="cubic" easing="inout"/>
                <effect type="slide" start="0,48" end="0" center="auto" tween="back" easing="out" time="400" delay="0"/>
            </animation>
            <animation effect="slide" end="0,20" start="0,0" time="0" reversible="false" condition="Skin.HasSetting(home.modernwidgets)">Conditional</animation>
            <animation effect="fade" end="0" start="100" time="150" condition="!Control.HasFocus(302)" reversible="false">Conditional</animation>
            <include>Animation.FadeOut</include>
            <animation effect="slide" start="0" end="222" condition="Container(300).Position(1)">Conditional</animation>
            <animation effect="slide" start="0" end="444" condition="Container(300).Position(2)">Conditional</animation>
            <animation effect="slide" start="0" end="666" condition="Container(300).Position(3)">Conditional</animation>
            <animation effect="slide" start="0" end="888" condition="Container(300).Position(4)">Conditional</animation>
            <animation effect="slide" start="0" end="1110" condition="Container(300).Position(5)">Conditional</animation>
            <animation effect="slide" start="0" end="1332" condition="Container(300).Position(6)">Conditional</animation>
            <animation effect="slide" start="0" end="1554" condition="Container(300).Position(7)">Conditional</animation>
            <animation effect="slide" end="0,70" condition="!Integer.IsGreater(Container(302).NumItems,5)">Conditional</animation>
            <animation effect="slide" end="0,70" condition="!Integer.IsGreater(Container(302).NumItems,4)">Conditional</animation>
            <animation effect="slide" end="0,70" condition="!Integer.IsGreater(Container(302).NumItems,3)">Conditional</animation>
            <animation effect="slide" end="0,70" condition="!Integer.IsGreater(Container(302).NumItems,2)">Conditional</animation>
            <animation effect="slide" end="0,70" condition="!Integer.IsGreater(Container(302).NumItems,1)">Conditional</animation>
            <animation effect="slide" start="0" end="0,250" time="150" condition="Control.HasFocus(301)">Conditional</animation>
            <animation effect="slide" start="0" end="0,250" time="150">WindowClose</animation>
            <animation effect="slide" end="0" start="0,250" time="150">WindowOpen</animation>
            <posy>461</posy>
            <centerleft>180</centerleft>
            <width>316</width>
            <height>452</height>
            <control type="image">
                <description>6 Option Menu</description>
                <width>100%</width>
                <height>452</height>
                <texture border="16" colordiffuse="Background">common/rounded-shadow8.png</texture>
                <visible>Integer.IsGreater(Container(302).NumItems,5)</visible>
            </control>
            <control type="image">
                <description>5 Option Menu</description>
                <width>100%</width>
                <height>382</height>
                <texture border="16" colordiffuse="Background">common/rounded-shadow8.png</texture>
                <visible>Integer.IsGreater(Container(302).NumItems,4) + !Integer.IsGreater(Container(302).NumItems,5)</visible>
            </control>
            <control type="image">
                <description>4 Option Menu</description>
                <width>100%</width>
                <height>312</height>
                <texture border="16" colordiffuse="Background">common/rounded-shadow8.png</texture>
                <visible>Integer.IsGreater(Container(302).NumItems,3) + !Integer.IsGreater(Container(302).NumItems,4)</visible>
            </control>
            <control type="image">
                <description>3 Option Menu</description>
                <width>100%</width>
                <height>242</height>
                <texture border="16" colordiffuse="Background">common/rounded-shadow8.png</texture>
                <visible>Integer.IsGreater(Container(302).NumItems,2) + !Integer.IsGreater(Container(302).NumItems,3)</visible>
            </control>
            <control type="image">
                <description>2 Option Menu</description>
                <width>100%</width>
                <height>172</height>
                <texture border="16" colordiffuse="Background">common/rounded-shadow8.png</texture>
                <visible>Integer.IsGreater(Container(302).NumItems,1) + !Integer.IsGreater(Container(302).NumItems,2)</visible>
            </control>
            <control type="image">
                <description>1 Option Menu</description>
                <width>100%</width>
                <height>102</height>
                <texture border="16" colordiffuse="Background">common/rounded-shadow8.png</texture>
                <visible>!Integer.IsGreater(Container(302).NumItems,1)</visible>
            </control>
            <control type="list" id="302">
                <include>Animation.FadeIn.Delay</include>
                <include>Animation.FadeOut</include>
                <top>16</top>
                <bottom>16</bottom>
                <left>8</left>
                <right>8</right>
                <onup>302</onup>
                <ondown>302</ondown>
                <onleft>300</onleft>
                <onright>300</onright>
                <onback>300</onback>
                <orientation>vertical</orientation>
                <scrolltime>200</scrolltime>
                <itemlayout width="302" height="70">
                    <control type="label">
                        <align>center</align>
                        <aligny>center</aligny>
                        <width>100%</width>
                        <centertop>50%</centertop>
                        <height>100%</height>
                        <textcolor>Dark2</textcolor>
                        <include>DefContextButton</include>
                        <label>$INFO[ListItem.Label]</label>
                    </control>
                </itemlayout>
                <focusedlayout width="302" height="70">
                    <control type="image">
                        <width>100%</width>
                        <height>100%</height>
                        <texture colordiffuse="$VAR[ColorSelectOtherBar]">common/white.png</texture>
                    </control>
                    <control type="image">
                        <width>100%</width>
                        <height>100%</height>
                        <texture border="8" colordiffuse="$VAR[ColorHighlightOtherBar]">common/gradient-box-wide.png</texture>
                    </control>
                    <control type="label">
                        <align>center</align>
                        <aligny>center</aligny>
                        <width>100%</width>
                        <centertop>50%</centertop>
                        <height>100%</height>
                        <textcolor>Selected</textcolor>
                        <include>DefContextButton</include>
                        <label>$INFO[ListItem.Label]</label>
                    </control>
                    <include condition="$EXP[HasHomemenuAutoSlideOutAnimation]">SlideOutItemsButton</include>
                </focusedlayout>
                <content>
                    <include>skinshortcuts-submenu</include>
                </content>
            </control>
        </control>
    </include>

    <include name="HomeSubMenu2">
        <control type="group">
            <animation type="Conditional" condition="Control.HasFocus(302)" reversible="false">
                <effect type="fade" start="0" end="100" time="150" tween="sine" easing="in" delay="150" />
                <effect type="slide" start="0,30" end="0,0" time="200" tween="sine" easing="out" delay="150" />
            </animation>
            <animation type="Conditional" condition="!Control.HasFocus(302)" reversible="false">
                <effect type="fade" start="100" end="0" time="100" tween="sine" easing="out" />
                <effect type="slide" start="0,0" end="0,30" time="150" tween="sine" easing="out" />
            </animation>
            <animation type="WindowClose" reversible="false">
                <effect type="fade" start="100" end="0" time="150" />
                <effect type="slide" start="0" end="0,250" time="150" />
            </animation>
            <animation type="WindowOpen" reversible="false">
                <effect type="fade" start="0" end="100" time="450" delay="50" tween="sine" easing="in"/>
            </animation>
            <control type="list" id="302">
                <description>Home Wraplist</description>
                <left>SidePad</left>
                <include condition="!Skin.HasSetting(furniture.clock)">DefHomeRight520</include>
                <include condition="Skin.HasSetting(furniture.clock)">DefHomeRightSidePad</include>
                <onup>300</onup>
                <ondown>300</ondown>
                <onleft>302</onleft>
                <onright>302</onright>
                <orientation>horizontal</orientation>
                <scrolltime>200</scrolltime>
                <top>952</top>
                <animation effect="slide" start="0" end="0,-30" time="0" condition="[$EXP[HomeIsClassic] | $EXP[HomeIsSpotlight]]">Conditional</animation>
                <animation effect="slide" start="0" end="0,-24" time="0" condition="Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets) + Skin.HasSetting(home.oldmenuheight)">Conditional</animation>
                <animation effect="slide" start="0" end="0,-27" time="0" condition="$EXP[HomeIsModernMultiWidgets] + Skin.HasSetting(submenu.compatibility) + !Skin.HasSetting(home.oldmenuheight)">Conditional</animation>
                <itemlayout width="222" height="64">
                    <control type="label">
                        <align>center</align>
                        <aligny>top</aligny>
                        <width>180</width>
                        <top>30</top>
                        <centerleft>45.7%</centerleft>
                        <textcolor>Dark3</textcolor>
                        <font>HomeIcon</font>
                        <label>$INFO[ListItem.Label]</label>
                    </control>
                </itemlayout>
                <focusedlayout width="222" height="64">
                    <control type="group">
                        <visible>!Skin.HasSetting(homemenu.items.underlined)</visible>
                        <control type="label">
                            <align>center</align>
                            <aligny>top</aligny>
                            <width>90%</width>
                            <top>30</top>
                            <centerleft>45.7%</centerleft>
                            <textcolor>$VAR[ColorHighlight]</textcolor>
                            <font>HomeIcon</font>
                            <label>$INFO[ListItem.Label]</label>
                        </control>
                        <control type="image">
                            <top>10</top>
                            <centerleft>45.7%</centerleft>
                            <include>arrowdimensions</include>
                            <texture colordiffuse="$VAR[ColorHighlight]" flipy="true">common/arrow-small.png</texture>
                            <animation effect="fade" end="100" start="0" delay="300" time="400" reversible="false">Focus</animation>
                        </control>
                    </control>
                    <control type="group">
                        <visible>Skin.HasSetting(homemenu.items.underlined)</visible>
                        <control type="label">
                            <align>center</align>
                            <aligny>top</aligny>
                            <width>90%</width>
                            <top>30</top>
                            <centerleft>45.7%</centerleft>
                            <textcolor>Dark1</textcolor>
                            <font>HomeIcon</font>
                            <label>$INFO[ListItem.Label]</label>
                        </control>
                        <control type="group">
                            <visible>Control.HasFocus(302)</visible>
                            <include>Animation.FadeIn</include>
                            <include>Animation.FadeOut</include>
                            <control type="image">
                                <top>74</top>
                                <centerleft>45.7%</centerleft>
                                <width>90%</width>
                                <height>4</height>
                                <texture colordiffuse="$VAR[ColorHighlight]">common/box.png</texture>
                            </control>
                            <control type="image">
                                <top>74</top>
                                <centerleft>45.7%</centerleft>
                                <width>90%</width>
                                <height>4</height>
                                <texture colordiffuse="$VAR[ColorHighlightSelectbox2]">common/gradient-box.png</texture>
                            </control>
                        </control>
                        <control type="image">
                            <top>10</top>
                            <centerleft>45.7%</centerleft>
                            <include>arrowdimensions</include>
                            <texture colordiffuse="Dark3" flipy="true">common/arrow-small.png</texture>
                            <animation effect="fade" end="100" start="0" delay="300" time="400" reversible="false">Focus</animation>
                        </control>
                    </control>
                    <include condition="$EXP[HasHomemenuAutoSlideOutAnimation]">SlideOutItemsButton</include>
                </focusedlayout>
                <content>
                    <include>skinshortcuts-submenu</include>
                </content>
            </control>
        </control>
    </include>

    <include name="HomeClassicWidgets">
        <control type="group">
            <animation effect="slide" start="0" end="0,800" time="250">WindowClose</animation>
            <animation effect="slide" end="0" start="0,550" time="200">WindowOpen</animation>
            <control type="group">
                <control type="group">
                    <animation effect="slide" end="0,-250" time="450" tween="back" reversible="false" condition="Control.HasFocus(301)">Conditional</animation>
                    <animation effect="slide" start="0,-250" time="250" tween="quadratic" reversible="false" condition="!Control.HasFocus(301)">Conditional</animation>
                    <animation effect="slide" start="0" end="0,-270" time="450" tween="back" reversible="false" condition="[!String.IsEmpty(Container(300).ListItem.Property(widget)) | [String.IsEmpty(Container(300).ListItem.Property(widget)) + [String.IsEmpty(Container(300).ListItem.Property(Background)) + String.IsEmpty(Skin.String(home.slideshowpath))]]] + [[[String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] | Integer.IsGreater(Container(301).NumItems,0) | Container(301).IsUpdating] + [[String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] | Control.HasFocus(301) | !Skin.HasSetting(home.dontautoshowwidget)]]">Conditional</animation>
                    <animation effect="slide" end="0" start="0,-270" time="250" tween="quadratic" reversible="false" condition="![[!String.IsEmpty(Container(300).ListItem.Property(widget)) | [String.IsEmpty(Container(300).ListItem.Property(widget)) + [String.IsEmpty(Container(300).ListItem.Property(Background)) + String.IsEmpty(Skin.String(home.slideshowpath))]]]] | ![[[String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] | Integer.IsGreater(Container(301).NumItems,0) | Container(301).IsUpdating] + [[String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] | Control.HasFocus(301) | !Skin.HasSetting(home.dontautoshowwidget)]]">Conditional</animation>
                    <control type="image" description="BottomBG">
                        <width>100%</width>
                        <height>900</height>
                        <bottom>-680</bottom>
                        <aspectratio aligny="bottom">scale</aspectratio>
                        <texture colordiffuse="Background">common/bg.jpg</texture>
                        <animation effect="fade" start="100" end="75" time="200" condition="true">Conditional</animation>
                    </control>
                    <control type="image" description="FanartOverlay">
                        <width>100%</width>
                        <height>900</height>
                        <bottom>-680</bottom>
                        <aspectratio aligny="bottom">scale</aspectratio>
                        <texture colordiffuse="FloorFade">common/floor.png</texture>
                    </control>
                    <control type="image" description="Shadow">
                        <width>100%</width>
                        <height>16</height>
                        <bottom>220</bottom>
                        <texture flipy="true">common/shadow16B.png</texture>
                    </control>
                    <control type="image" description="Shadow">
                        <width>100%</width>
                        <height>1</height>
                        <bottom>220</bottom>
                        <texture flipy="true" colordiffuse="BoxHomerow">common/sch2.png</texture>
                        <visible>!Skin.HasSetting(thumbnails.white)</visible>
                    </control>
                </control>

                <!-- Widget  -->
                <control type="group">
                    <animation effect="fade" start="100" end="0" time="600" condition="![[[String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] | Integer.IsGreater(Container(301).NumItems,0) | Container(301).IsUpdating] + [[String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] | Control.HasFocus(301) | !Skin.HasSetting(home.dontautoshowwidget)]]">Conditional</animation>
                    <animation effect="fade" end="100" start="0" time="0" condition="[[[String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] | Integer.IsGreater(Container(301).NumItems,0) | Container(301).IsUpdating] + [[String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] | Control.HasFocus(301) | !Skin.HasSetting(home.dontautoshowwidget)]]">Conditional</animation>
                    <animation type="WindowClose">
                        <effect type="fade" start="100" end="0" time="150"/>
                    </animation>
                    <bottom>170</bottom>
                    <height>297</height>
                    <control type="group">
                        <animation effect="fade" start="100" end="0" time="0" reversible="false" condition="![![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + [!String.IsEmpty(Container(300).ListItem.Property(widget)) | [String.IsEmpty(Container(300).ListItem.Property(widget)) + [String.IsEmpty(Container(300).ListItem.Property(Background)) + [String.IsEmpty(Skin.String(home.slideshowpath))]]]]]">Conditional</animation>
                        <animation effect="fade" start="0" end="100" time="0" delay="0" reversible="false" condition="![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + [!String.IsEmpty(Container(300).ListItem.Property(widget)) | [String.IsEmpty(Container(300).ListItem.Property(widget)) + [String.IsEmpty(Container(300).ListItem.Property(Background)) + [String.IsEmpty(Skin.String(home.slideshowpath))]]]]">Conditional</animation>
                        <include>skinshortcuts-template-widget-classic</include>
                    </control>
                    <control type="group">
                        <animation effect="fade" end="100" start="0" delay="300" time="400" condition="Control.HasFocus(301)">Conditional</animation>
                        <include>Animation.FadeOut</include>
                        <visible>Control.HasFocus(301) + Integer.IsGreater(Container(301).NumItems,4)</visible>
                        <control type="image">
                            <top>140</top>
                            <left>52</left>
                            <include>arrowdimensions</include>
                            <texture colordiffuse="Dark1" flipx="true">common/arrow-small-right.png</texture>
                        </control>
                        <control type="image">
                            <top>140</top>
                            <left>1852</left>
                            <include>arrowdimensions</include>
                            <texture colordiffuse="Dark1" flipx="false">common/arrow-small-right.png</texture>
                        </control>
                    </control>

                <!-- Weather Widget -->
                    <control type="group">
                        <visible>String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)</visible>
                        <visible>Weather.IsFetched</visible>
                        <control type="grouplist">
                            <left>70</left>
                            <right>70</right>
                            <top>20</top>
                            <bottom>20</bottom>
                            <height>252</height>
                            <orientation>horizontal</orientation>
                            <itemgap>0</itemgap>
                            <control type="group">
                                <width>593.33</width>
                                <height>100%</height>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture border="5" colordiffuse="Light3" diffuse="diffuse/wall-fanart.png">common/box.png</texture>
                                </control>
                                <include content="def_weatherfanart.widgets">
                                    <param name="FanartCode" value="$INFO[Window(Weather).Property(Day0.FanartCode)]"/>
                                    <param name="bordertopbottom" value="9"/>
                                    <param name="borderleftright" value="9"/>
                                </include>
                                <control type="image">
                                    <top>30</top>
                                    <left>30</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(Weather).Property(Day0.FanartCode),,.png]</texture>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="multiimage">
                                    <top>30</top>
                                    <left>30</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <imagepath>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Day0.FanartCode)]</imagepath>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="image">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Window(Weather).Property(Day0.OutlookIcon)]</texture>
                                    <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <top>50</top>
                                    <height>50</height>
                                    <font>NotificationBold</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label fallback="10006">$LOCALIZE[33006]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <height>100%</height>
                                    <aligny>center</aligny>
                                    <scroll>false</scroll>
                                    <align>right</align>
                                    <font>Large</font>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day0.HighTemp),[B],[/B]°  ]$INFO[Window(Weather).Property(Day0.LowTemp),,°]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <bottom>50</bottom>
                                    <height>50</height>
                                    <font>Tiny</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day0.Outlook)]</label>
                                </control>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture colordiffuse="BoxWidget" border="4" background="true">common/box21.png</texture>
                                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                                </control>
                            </control>
                            <control type="group">
                                <width>593.33</width>
                                <height>100%</height>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture border="5" colordiffuse="Light3" diffuse="diffuse/wall-fanart.png">common/box.png</texture>
                                </control>
                                <include content="def_weatherfanart.widgets">
                                    <param name="FanartCode" value="$INFO[Window(Weather).Property(Day1.FanartCode)]"/>
                                    <param name="bordertopbottom" value="9"/>
                                    <param name="borderleftright" value="9"/>
                                </include>
                                <control type="image">
                                    <top>30</top>
                                    <left>30</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(Weather).Property(Day1.FanartCode),,.png]</texture>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="multiimage">
                                    <top>30</top>
                                    <left>30</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <imagepath>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Day1.FanartCode)]</imagepath>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="image">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Window(Weather).Property(Day1.OutlookIcon)]</texture>
                                    <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <top>50</top>
                                    <height>50</height>
                                    <font>NotificationBold</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label fallback="10006">$INFO[Window(Weather).Property(Day1.Title)]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <height>100%</height>
                                    <aligny>center</aligny>
                                    <scroll>false</scroll>
                                    <align>right</align>
                                    <font>Large</font>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day1.HighTemp),[B],[/B]°  ]$INFO[Window(Weather).Property(Day1.LowTemp),,°]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <bottom>50</bottom>
                                    <height>50</height>
                                    <font>Tiny</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day1.Outlook)]</label>
                                </control>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture colordiffuse="BoxWidget" border="4" background="true">common/box21.png</texture>
                                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                                </control>
                            </control>
                            <control type="group">
                                <width>593.33</width>
                                <height>100%</height>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture border="5" colordiffuse="Light3" diffuse="diffuse/wall-fanart.png">common/box.png</texture>
                                </control>
                                <include content="def_weatherfanart.widgets">
                                    <param name="FanartCode" value="$INFO[Window(Weather).Property(Day2.FanartCode)]"/>
                                    <param name="bordertopbottom" value="9"/>
                                    <param name="borderleftright" value="9"/>
                                </include>
                                <control type="image">
                                    <top>30</top>
                                    <left>30</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(Weather).Property(Day2.FanartCode),,.png]</texture>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="multiimage">
                                    <top>30</top>
                                    <left>30</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <imagepath>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Day2.FanartCode)]</imagepath>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="image">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Window(Weather).Property(Day2.OutlookIcon)]</texture>
                                    <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <top>50</top>
                                    <height>50</height>
                                    <font>NotificationBold</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label fallback="10006">$INFO[Window(Weather).Property(Day2.Title)]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <height>100%</height>
                                    <aligny>center</aligny>
                                    <scroll>false</scroll>
                                    <align>right</align>
                                    <font>Large</font>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day2.HighTemp),[B],[/B]°  ]$INFO[Window(Weather).Property(Day2.LowTemp),,°]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <bottom>50</bottom>
                                    <height>50</height>
                                    <font>Tiny</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day2.Outlook)]</label>
                                </control>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture colordiffuse="BoxWidget" border="4" background="true">common/box21.png</texture>
                                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                                </control>
                            </control>
                        </control>
                    </control>

                <!-- Container Updating -->
                    <control type="group" id="9201">
                        <centerleft>50%</centerleft>
                        <centertop>50%</centertop>
                        <width>450</width>
                        <height>117</height>
                        <visible>Container(301).IsUpdating | [[String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + !Weather.IsFetched]</visible>
                        <animation effect="fade" start="0" end="100" delay="500" time="200" reversible="false">Visible</animation>
                        <include>BusySpinner</include>
                    </control>
                </control>

                <!-- Widget Info -->
                <control type="group">
                    <visible>Control.HasFocus(301) + !String.IsEqual(Container(300).ListItem.Property(widget),system)</visible>
                    <posy>355</posy>
                    <animation effect="fade" start="0" end="100" time="350" delay="300" tween="cubic" easing="inout" reversible="false">Visible</animation>
                    <animation effect="fade" start="100" end="0" time="0" reversible="false">Hidden</animation>
                    <control type="group">
                        <left>SidePad</left>
                        <right>SidePad</right>
                        <control type="label">
                            <left>0</left>
                            <top>0</top>
                            <right>0</right>
                            <aligny>center</aligny>
                            <height>80</height>
                            <font>TinyBold</font>
                            <textcolor>Dark2</textcolor>
                            <selectedcolor>Dark2</selectedcolor>
                            <label>$VAR[WidgetLabel]</label>
                            <visible>!Skin.HasSetting(hidewidgettitle)</visible>
                        </control>
                        <control type="label">
                            <left>0</left>
                            <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                                <param name="top" value="5" />
                            </include>
                            <top>50</top>
                            <right>0</right>
                            <aligny>center</aligny>
                            <height>80</height>
                            <font>MediumBold</font>
                            <textcolor>Dark1</textcolor>
                            <selectedcolor>Dark1</selectedcolor>
                            <label>$VAR[WidgetTitle]</label>
                            <width>85%</width>
                        </control>
                        <control type="textbox">
                            <left>0</left>
                            <right>0</right>
                            <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                                <param name="top" value="80" />
                            </include>
                            <include content="def_height" condition="Skin.HasSetting(hidewidgettitle)">
                                <param name="height" value="144"/>
                            </include>
                            <top>120</top>
                            <height>108</height>
                            <font>Tiny</font>
                            <align>justify</align>
                            <textcolor>Dark2</textcolor>
                            <selectedcolor>Dark2</selectedcolor>
                            <shadowcolor>noop</shadowcolor>
                            <label>$VAR[WidgetPlot]</label>
                        </control>
                        <control type="label">
                            <left>600</left>
                            <right>0</right>
                            <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                                <param name="top" value="30" />
                            </include>
                            <top>75</top>
                            <height>40</height>
                            <align>right</align>
                            <scroll>false</scroll>
                            <textcolor>Dark2</textcolor>
                            <selectedcolor>Dark2</selectedcolor>
                            <label>$VAR[WidgetSubLabel]</label>
                            <font>Flag</font>
                        </control>
                    </control>
                </control>

                <!-- Widget SystemInfo -->
                <control type="group">
                    <visible>Control.HasFocus(301) + String.IsEqual(Container(300).ListItem.Property(widget),system)</visible>
                    <posy>355</posy>
                    <animation effect="fade" start="0" end="100" time="350" delay="300" tween="cubic" easing="inout" reversible="false">Visible</animation>
                    <animation effect="fade" start="100" end="0" time="0" reversible="false">Hidden</animation>
                    <control type="group">
                        <left>SidePad</left>
                        <right>SidePad</right>
                        <control type="label">
                            <left>0</left>
                            <top>0</top>
                            <right>0</right>
                            <aligny>center</aligny>
                            <height>80</height>
                            <font>TinyBold</font>
                            <textcolor>Dark2</textcolor>
                            <selectedcolor>Dark2</selectedcolor>
                            <label>$VAR[WidgetLabel]</label>
                            <visible>!Skin.HasSetting(hidewidgettitle)</visible>
                        </control>
                        <control type="label">
                            <left>0</left>
                            <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                                <param name="top" value="5" />
                            </include>
                            <top>50</top>
                            <right>0</right>
                            <aligny>center</aligny>
                            <height>80</height>
                            <font>MediumBold</font>
                            <textcolor>Dark1</textcolor>
                            <selectedcolor>Dark1</selectedcolor>
                            <label>$VAR[WidgetTitle]</label>
                            <width>85%</width>
                        </control>
                        <control type="textbox">
                            <left>0</left>
                            <right>0</right>
                            <include content="def_top" condition="Skin.HasSetting(hidewidgettitle)">
                                <param name="top" value="80" />
                            </include>
                            <include content="def_height" condition="Skin.HasSetting(hidewidgettitle)">
                                <param name="height" value="144"/>
                            </include>
                            <top>120</top>
                            <height>108</height>
                            <font>Tiny</font>
                            <align>justify</align>
                            <textcolor>Dark2</textcolor>
                            <selectedcolor>Dark2</selectedcolor>
                            <shadowcolor>noop</shadowcolor>
                            <label>$INFO[Container(301).ListItem.Label2][CR]$INFO[Container(301).ListItem.Property(Label3)]</label>
                        </control>
                    </control>
                    <control type="group">
                        <animation effect="slide" end="0,-38" start="0,0" time="0" condition="Skin.HasSetting(hidewidgettitle)">Conditional</animation>
                        <control type="progress">
                            <height>10</height>
                            <width>80</width>
                            <bottom>580</bottom>
                            <left>400</left>
                            <info>System.CPUUsage</info>
                            <include>DefSettingsButton</include>
                            <animation effect="rotate" condition="true" start="360" end="90" loop="false" time="0" center="auto">Conditional</animation>
                            <visible>String.IsEqual(ListItem.Property(Label4),cpu)</visible>
                        </control>
                        <control type="progress">
                            <height>10</height>
                            <width>80</width>
                            <bottom>580</bottom>
                            <left>400</left>
                            <info>system.memory(used)</info>
                            <include>DefSettingsButton</include>
                            <animation effect="rotate" condition="true" start="360" end="90" loop="false" time="0" center="auto">Conditional</animation>
                            <visible>String.IsEqual(ListItem.Property(Label4),ram)</visible>
                        </control>
                        <control type="progress">
                            <height>10</height>
                            <width>80</width>
                            <bottom>580</bottom>
                            <left>400</left>
                            <info>System.UsedSpace</info>
                            <include>DefSettingsButton</include>
                            <animation effect="rotate" condition="true" start="360" end="90" loop="false" time="0" center="auto">Conditional</animation>
                            <visible>String.IsEqual(ListItem.Property(Label4),storage)</visible>
                        </control>
                    </control>
                </control>
            </control>

            <!-- Home Row -->
            <control type="group">
                <include>Animation.FadeOut</include>
                <animation effect="fade" end="100" start="0" delay="300" time="400" condition="Control.HasFocus(300) | Control.HasFocus(302)">Conditional</animation>
                <visible>Integer.IsGreater(Container(300).NumItems,6)</visible>
                <control type="image">
                    <top>962</top>
                    <left>52</left>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2" flipx="true">common/arrow-small-right.png</texture>
                </control>
                <control type="image">
                    <visible>!Skin.HasSetting(furniture.clock)</visible>
                    <top>962</top>
                    <right>480</right>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2" flipx="false">common/arrow-small-right.png</texture>
                </control>
                <control type="image">
                    <visible>Skin.HasSetting(furniture.clock)</visible>
                    <top>962</top>
                    <right>42</right>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2" flipx="false">common/arrow-small-right.png</texture>
                </control>
            </control>
            <control type="list" id="300">
                <include>Animation.FadeIn.Delay</include>
                <include>Animation.FadeOut</include>
                <description>Home Wraplist</description>
                <left>SidePad</left>
                <include condition="!Skin.HasSetting(furniture.clock)">DefHomeRight520</include>
                <include condition="Skin.HasSetting(furniture.clock)">DefHomeRightSidePad</include>
                <onup condition="!Skin.HasSetting(home.dontshowfanart) + ![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + [!String.IsEmpty(Container(300).ListItem.Property(widget)) | [String.IsEmpty(Container(300).ListItem.Property(widget)) + [String.IsEmpty(Container(300).ListItem.Property(Background)) + [String.IsEmpty(Skin.String(home.slideshowpath))]]]]">301</onup>
                <onup condition="Skin.HasSetting(home.dontshowfanart) + ![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + [!String.IsEmpty(Container(300).ListItem.Property(widget)) | [String.IsEmpty(Container(300).ListItem.Property(widget)) + [String.IsEmpty(Container(300).ListItem.Property(Background)) + [String.IsEmpty(Skin.String(home.slideshowpath))]]]]">SetFocus(301,0)</onup>
                <ondown condition="Integer.IsGreater(Container(302).NumItems,0)">SetFocus(302,0)</ondown>
                <onleft>300</onleft>
                <onright>300</onright>
                <orientation>horizontal</orientation>
                <scrolltime>200</scrolltime>
                <include condition="Skin.HasSetting(home.showicons)">HomeContentIcon</include>
                <include condition="!Skin.HasSetting(home.showicons)">HomeContentNoIcon</include>
            </control>
            <include>Furniture_Clock</include>
        </control>
    </include>

    <include name="HomeContentNoIcon">
        <top>942</top>
        <animation type="Conditional" condition="!Control.HasFocus(302) + Skin.HasSetting(home.submenu2)" reversible="false">
            <effect type="fade" start="0" end="100" time="150" tween="sine" easing="in" delay="150" />
            <effect type="slide" start="0,30" end="0,0" time="200" tween="sine" easing="out" delay="150" />
        </animation>
        <animation type="Conditional" condition="Control.HasFocus(302) + Skin.HasSetting(home.submenu2)" reversible="false">
            <effect type="fade" start="100" end="0" time="100" tween="sine" easing="out" />
            <effect type="slide" start="0,0" end="0,30" time="150" tween="sine" easing="out" />
        </animation>
        <itemlayout width="222" height="64">
            <control type="label">
                <align>center</align>
                <aligny>top</aligny>
                <width>180</width>
                <top>0</top>
                <centerleft>45.7%</centerleft>
                <textcolor>Dark3</textcolor>
                <font>Home</font>
                <label>$INFO[ListItem.Label]</label>
            </control>
        </itemlayout>
        <focusedlayout width="222" height="64">
            <control type="group">
                <visible>!Skin.HasSetting(homemenu.items.underlined)</visible>
                <control type="label">
                    <align>center</align>
                    <aligny>top</aligny>
                    <width>90%</width>
                    <top>0</top>
                    <centerleft>45.7%</centerleft>
                    <textcolor>$VAR[ColorHighlight]</textcolor>
                    <font>Home</font>
                    <label>$INFO[ListItem.Label]</label>
                    <animation effect="fade" start="100" end="50" delay="0" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302) + !Skin.HasSetting(home.vertical)">Conditional</animation>
                </control>
                <control type="image">
                    <top>50</top>
                    <centerleft>45.7%</centerleft>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="$VAR[ColorHighlight]">common/arrow-small.png</texture>
                    <visible>Control.HasFocus(300)</visible>
                    <visible>Integer.IsGreater(Container(302).NumItems,0)</visible>
                    <animation effect="fade" end="100" start="0" delay="300" time="400" reversible="false">Focus</animation>
                </control>
            </control>
            <control type="group">
                <visible>Skin.HasSetting(homemenu.items.underlined)</visible>
                <control type="label">
                    <align>center</align>
                    <aligny>top</aligny>
                    <width>90%</width>
                    <top>0</top>
                    <centerleft>45.7%</centerleft>
                    <textcolor>Dark1</textcolor>
                    <font>Home</font>
                    <label>$INFO[ListItem.Label]</label>
                    <animation effect="fade" start="100" end="50" delay="0" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302) + !Skin.HasSetting(home.vertical)">Conditional</animation>
                </control>
                <control type="image">
                    <top>70</top>
                    <centerleft>45.7%</centerleft>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark3">common/arrow-small.png</texture>
                    <visible>Control.HasFocus(300)</visible>
                    <visible>Integer.IsGreater(Container(302).NumItems,0)</visible>
                    <animation effect="fade" end="100" start="0" delay="300" time="400" reversible="false">Focus</animation>
                </control>
                <control type="group">
                    <animation effect="fade" start="100" end="50" delay="0" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302) + !Skin.HasSetting(home.vertical)">Conditional</animation>
                    <control type="image">
                        <top>55</top>
                        <centerleft>45.7%</centerleft>
                        <width>90%</width>
                        <height>4</height>
                        <texture colordiffuse="$VAR[ColorHighlight]">common/box.png</texture>
                    </control>
                    <control type="image">
                        <top>55</top>
                        <centerleft>45.7%</centerleft>
                        <width>90%</width>
                        <height>4</height>
                        <texture colordiffuse="$VAR[ColorHighlightSelectbox2]">common/gradient-box.png</texture>
                    </control>
                </control>
            </control>

            <!-- Set TMDbHelper WidgetContainer -->
            <include condition="$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]">SetWidgetContainerForTMDB</include>
            <include condition="$EXP[HasHomemenuAutoSlideOutAnimation]">SlideOutItemsButton</include>
        </focusedlayout>
        <content>
            <include>skinshortcuts-mainmenu</include>
        </content>
    </include>

    <include name="HomeContentIcon">
        <top>848</top>
        <itemlayout width="222" height="220">
            <control type="image">
                <include content="def_width" condition="Skin.HasSetting(homemenu.only.icons)">
                    <param name="width" value="100"/>
                </include>
                <include content="def_width" condition="!Skin.HasSetting(homemenu.only.icons)">
                    <param name="width" value="100"/>
                </include>
                <include content="def_height" condition="Skin.HasSetting(homemenu.only.icons)">
                    <param name="height" value="100"/>
                </include>
                <include content="def_height" condition="!Skin.HasSetting(homemenu.only.icons)">
                    <param name="height" value="100"/>
                </include>
                <centerleft>45.7%</centerleft>
                <centertop>45%</centertop>
                <texture colordiffuse="Dark3">$INFO[ListItem.Icon]</texture>
                <animation effect="slide" start="0,0" end="0,20" time="0" condition="Skin.HasSetting(homemenu.only.icons)">Conditional</animation>
            </control>
            <control type="image" description="BottomBG">
                <width>1</width>
                <height>50</height>
                <bottom>75</bottom>
                <left>210</left>
                <animation effect="fade" start="100" end="30" time="0" condition="true">Conditional</animation>
                <texture colordiffuse="Dark1">common/white.png</texture>
                <visible>Skin.HasSetting(homemenu.only.icons)</visible>
            </control>
            <control type="label">
                <align>center</align>
                <aligny>top</aligny>
                <width>180</width>
                <bottom>20</bottom>
                <centerleft>45.7%</centerleft>
                <textcolor>Dark3</textcolor>
                <font>HomeIcon</font>
                <label>$INFO[ListItem.Label]</label>
                <visible>!Skin.HasSetting(homemenu.only.icons)</visible>
            </control>
        </itemlayout>
        <focusedlayout width="222" height="220">
            <control type="group">
                <animation effect="fade" start="100" end="50" delay="0" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302) + !Skin.HasSetting(home.vertical)">Conditional</animation>
                <control type="image">
                    <include content="def_width" condition="Skin.HasSetting(homemenu.only.icons)">
                        <param name="width" value="100"/>
                    </include>
                    <include content="def_width" condition="!Skin.HasSetting(homemenu.only.icons)">
                        <param name="width" value="100"/>
                    </include>
                    <include content="def_height" condition="Skin.HasSetting(homemenu.only.icons)">
                        <param name="height" value="100"/>
                    </include>
                    <include content="def_height" condition="!Skin.HasSetting(homemenu.only.icons)">
                        <param name="height" value="100"/>
                    </include>
                    <centerleft>45.7%</centerleft>
                    <centertop>45%</centertop>
                    <texture colordiffuse="$VAR[ColorHighlight]">$INFO[ListItem.Icon]</texture>
                    <animation effect="slide" start="0,0" end="0,20" time="0" condition="Skin.HasSetting(homemenu.only.icons)">Conditional</animation>
                </control>
                <control type="label">
                    <align>center</align>
                    <aligny>top</aligny>
                    <width>180</width>
                    <bottom>20</bottom>
                    <centerleft>45.7%</centerleft>
                    <textcolor>$VAR[ColorHighlight]</textcolor>
                    <font>HomeIcon</font>
                    <label>$INFO[ListItem.Label]</label>
                    <visible>!Skin.HasSetting(homemenu.only.icons)</visible>
                </control>
                <control type="image" description="BottomBG">
                    <width>1</width>
                    <height>50</height>
                    <bottom>75</bottom>
                    <left>210</left>
                    <animation effect="fade" start="100" end="30" time="0" condition="true">Conditional</animation>
                    <texture colordiffuse="Dark1">common/white.png</texture>
                    <visible>Skin.HasSetting(homemenu.only.icons)</visible>
                </control>
                <control type="image">
                    <bottom>30</bottom>
                    <centerleft>45.7%</centerleft>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="$VAR[ColorHighlight]">common/arrow-small.png</texture>
                    <visible>Control.HasFocus(300)</visible>
                    <visible>Integer.IsGreater(Container(302).NumItems,0)</visible>
                    <animation effect="fade" end="100" start="0" delay="300" time="400" reversible="false">Focus</animation>
                </control>
            </control>

            <!-- Set TMDbHelper WidgetContainer -->
            <include condition="$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]">SetWidgetContainerForTMDB</include>
            <include condition="$EXP[HasHomemenuAutoSlideOutAnimation]">SlideOutItemsButton</include>
        </focusedlayout>
        <content>
            <include>skinshortcuts-mainmenu</include>
        </content>
    </include>

    <include name="HomeBackgroundPlaylist">
        <control type="list" id="9988">
            <description>hidden container for playlist background</description>
            <posx>-20</posx>
            <posy>-20</posy>
            <width>1</width>
            <height>1</height>
            <visible>true</visible>
            <onup>50</onup>
            <ondown>50</ondown>
            <onleft>50</onleft>
            <onright>50</onright>
            <autoscroll time="10000">true</autoscroll>
            <itemlayout width="1" height="1">
            </itemlayout>
            <focusedlayout height="1" width="1">
            </focusedlayout>
            <content>$INFO[Container(300).ListItem.Property(backgroundPlaylist)]</content>
        </control>
    </include>

    <include name="HomeVerticalMenu">

        <!-- Furniture -->
        <include>Furniture_Header</include>
        <include condition="!Skin.HasSetting(home.hide.nowplaying)">Furniture_NowPlaying</include>
        <include>Furniture_Clock</include>
        <include>Furniture_Weather</include>
        <include>Furniture_Flags</include>
        <control type="group">
            <animation effect="slide" start="0" end="-350" time="300" delay="0" center="auto" tween="sine" easing="out" condition="Control.HasFocus(301)">Conditional</animation>

            <!-- LEFT SIDE -->
            <control type="group">
                <include>Animation.LeftSide.Vertical.Menu</include>

                <!-- Home List -->
                <control type="panel" id="300">
                    <animation effect="fade" start="100" end="33" time="400" condition="Control.HasFocus(301)">Conditional</animation>
                    <include>Animation.Slide.Vertical.Menu</include>
                    <visible allowhiddenfocus="true">!Control.HasFocus(302)</visible>
                    <include>Animation.FadeIn</include>
                    <include>Animation.FadeOut</include>
                    <description>Home Wraplist</description>
                    <left>0</left>
                    <top>PosterPad</top>
                    <width>PosterW</width>
                    <height>720</height>
                    <orientation>vertical</orientation>
                    <onright>301</onright>
                    <onleft>302</onleft>
                    <scrolltime>200</scrolltime>
                    <itemlayout width="407" height="80">
                        <control type="label">
                            <right>30</right>
                            <left>0</left>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <textcolor>Dark3</textcolor>
                            <font>Home</font>
                            <label>$INFO[ListItem.Label]</label>
                            <visible>!Skin.HasSetting(home.showicons)</visible>
                        </control>
                        <control type="label">
                            <right>100</right>
                            <left>0</left>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <textcolor>Dark3</textcolor>
                            <font>Home</font>
                            <label>$INFO[ListItem.Label]</label>
                            <visible>Skin.HasSetting(home.showicons)</visible>
                        </control>
                        <control type="image">
                            <right>10</right>
                            <top>1</top>
                            <width>80</width>
                            <height>80</height>
                            <texture colordiffuse="Dark3">$INFO[ListItem.Icon]</texture>
                            <visible>Skin.HasSetting(home.showicons)</visible>
                        </control>
                    </itemlayout>
                    <focusedlayout width="407" height="80">
                        <control type="label">
                            <right>30</right>
                            <left>0</left>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <textcolor>$VAR[ColorHighlight]</textcolor>
                            <font>HomeFO</font>
                            <label>$INFO[ListItem.Label]</label>
                            <visible>!Skin.HasSetting(home.showicons)</visible>
                        </control>
                        <control type="label">
                            <right>100</right>
                            <left>0</left>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <textcolor>$VAR[ColorHighlight]</textcolor>
                            <font>HomeFO</font>
                            <label>$INFO[ListItem.Label]</label>
                            <visible>Skin.HasSetting(home.showicons)</visible>
                        </control>
                        <control type="image">
                            <right>10</right>
                            <width>80</width>
                            <top>1</top>
                            <height>80</height>
                            <texture colordiffuse="$VAR[ColorHighlight]">$INFO[ListItem.Icon]</texture>
                            <visible>Skin.HasSetting(home.showicons)</visible>
                        </control>
                    </focusedlayout>
                    <content>
                        <include>skinshortcuts-mainmenu</include>
                    </content>
                </control>

                <!-- SubMenu List -->
                <control type="list" id="302">
                    <visible allowhiddenfocus="true">Control.HasFocus(302)</visible>
                    <animation effect="fade" start="100" end="33" time="400" condition="Control.HasFocus(301)">Conditional</animation>
                    <include>Animation.Slide.Vertical.Menu</include>
                    <include>Animation.FadeIn</include>
                    <include>Animation.FadeOut</include>
                    <description>Home Wraplist</description>
                    <left>-20</left>
                    <top>PosterPad</top>
                    <width>PosterW</width>
                    <height>720</height>
                    <orientation>vertical</orientation>
                    <onright>300</onright>
                    <onleft>300</onleft>
                    <ondown>302</ondown>
                    <onup>302</onup>
                    <onback>300</onback>
                    <scrolltime>200</scrolltime>
                    <itemlayout width="427" height="80">
                        <control type="label">
                            <right>30</right>
                            <left>0</left>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <textcolor>Dark3</textcolor>
                            <font>Home</font>
                            <label>$INFO[ListItem.Label]</label>
                        </control>
                    </itemlayout>
                    <focusedlayout width="427" height="80">
                        <control type="label">
                            <right>30</right>
                            <left>0</left>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <textcolor>$VAR[ColorHighlight]</textcolor>
                            <font>Home</font>
                            <label>$INFO[ListItem.Label]</label>
                        </control>
                    </focusedlayout>
                    <content>
                        <include>skinshortcuts-submenu</include>
                    </content>
                </control>
            </control>

            <!-- RIGHT SIDE -->
            <control type="group">
                <left>-100</left>
                <include>Animation.RightSide.Vertical.Menu</include>

                <!-- Container Updating -->
                <control type="group">
                    <centerleft>60%</centerleft>
                    <centertop>45%</centertop>
                    <width>450</width>
                    <height>117</height>
                    <visible>[![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + Container(301).IsUpdating] | [!Weather.IsFetched + [String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]]</visible>
                    <include>Animation.FadeIn</include>
                    <include>Animation.FadeOut</include>
                    <include>BusySpinner</include>
                </control>
                <control type="group">
                    <animation effect="fade" start="100" end="0" time="0" reversible="false" condition="[![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + [!Integer.IsGreater(Container(301).NumItems,0) | Container(301).IsUpdating]] | [!Weather.IsFetched + [String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]]">Conditional</animation>
                    <animation effect="fade" start="0" end="100" time="0" reversible="false" condition="![[![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + [!Integer.IsGreater(Container(301).NumItems,0) | Container(301).IsUpdating]] | [!Weather.IsFetched + [String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]]]">Conditional</animation>

                <!-- Widget Banner -->
                    <control type="group">
                        <visible>String.IsEqual(Container(300).ListItem.Property(widgetBanner),yes) + ![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]</visible>
                        <animation effect="fade" start="100" end="66" time="400" condition="!Control.HasFocus(301)">Conditional</animation>
                        <top>238</top>
                        <right>100</right>
                        <control type="image">
                            <width>1330</width>
                            <right>71</right>
                            <top>-9</top>
                            <height>250</height>
                            <texture diffuse="diffuse/pvrinfo2.png" border="10" background="true">common/$VAR[nofocus-shadow10]</texture>
                        </control>
                        <control type="image">
                            <right>SidePad</right>
                            <top>1</top>
                            <width>1312</width>
                            <height>230</height>
                            <aspectratio scalediffuse="false">scale</aspectratio>
                            <fadetime>PosterFanartFadetime</fadetime>
                            <texture diffuse="diffuse/poster-right.png" border="3" background="true" fallback="DefaultMovies.png">$VAR[BannerImage301]</texture>
                        </control>
                        <control type="image">
                            <width>1314</width>
                            <right>79</right>
                            <height>232</height>
                            <texture border="4" colordiffuse="Box2">common/box21.png</texture>
                            <visible>!Skin.HasSetting(thumbnails.white)</visible>
                        </control>

                        <!-- ClearLogo Fallback -->
                        <control type="image">
                            <visible>String.IsEmpty(Container(301).ListItem.Art(banner)) + String.IsEmpty(Container(301).ListItem.Art(tvshow.banner))</visible>
                            <right>100</right>
                            <top>80</top>
                            <height>120</height>
                            <aspectratio scalediffuse="false" align="right" aligny="bottom">keep</aspectratio>
                            <fadetime>PosterFanartFadetime</fadetime>
                            <texture background="true">$VAR[ClearLogoHome]</texture>
                        </control>
                    </control>

                    <!-- Widget Text -->
                    <control type="label">
                        <visible>!Skin.HasSetting(hidewidgettitle) + !String.IsEqual(Container(300).ListItem.Property(widgetBanner),yes)</visible>
                        <font>TinyBold</font>
                        <right>70</right>
                        <width>1422</width>
                        <top>256</top>
                        <align>left</align>
                        <textcolor>Dark1</textcolor>
                        <label>$VAR[WidgetLabel]</label>
                        <animation effect="fade" start="0" end="100" time="350" tween="cubic" easing="inout">WindowOpen</animation>
                        <animation effect="fade" end="0" start="100" time="150">WindowClose</animation>
                        <animation effect="fade" start="100" end="33" time="400" condition="!Control.HasFocus(301) + !Skin.HasSetting(widgets.fade)">Conditional</animation>
                    </control>
                    <control type="grouplist">
                        <visible>!String.IsEqual(Container(300).ListItem.Property(widget),systeminfo) + ![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + !String.IsEqual(Container(300).ListItem.Property(widgetBanner),yes)</visible>
                        <animation effect="fade" start="100" end="33" time="400" condition="!Control.HasFocus(301) + !Skin.HasSetting(widgets.fade)">Conditional</animation>
                        <animation effect="fade" start="0" end="100" time="350" tween="cubic" easing="inout">WindowOpen</animation>
                        <animation effect="fade" end="0" start="100" time="150">WindowClose</animation>
                        <right>70</right>
                        <width>1422</width>
                        <orientation>vertical</orientation>
                        <top>672</top>
                        <itemgap>10</itemgap>
                        <control type="label">
                            <font>SmallBold</font>
                            <width>100%</width>
                            <align>left</align>
                            <textcolor>Dark1</textcolor>
                            <label>$VAR[WidgetTitle]</label>
                        </control>
                        <control type="textbox">
                            <font>Tiny</font>
                            <width>100%</width>
                            <height>105</height>
                            <align>left</align>
                            <textcolor>Dark2</textcolor>
                            <label>$VAR[WidgetPlot]</label>
                        </control>
                        <control type="label">
                            <font>Tiny</font>
                            <width>100%</width>
                            <align>left</align>
                            <textcolor>Dark2</textcolor>
                            <label>$VAR[WidgetSubLabel]</label>
                        </control>
                    </control>
                    <control type="group">
                        <visible>String.IsEqual(Container(300).ListItem.Property(widget),systeminfo) + !String.IsEqual(Container(300).ListItem.Property(widgetBanner),yes)</visible>
                        <animation effect="fade" start="100" end="33" time="400" condition="!Control.HasFocus(301) + !Skin.HasSetting(widgets.fade)">Conditional</animation>
                        <control type="grouplist">
                            <right>70</right>
                            <width>1422</width>
                            <orientation>vertical</orientation>
                            <top>672</top>
                            <itemgap>10</itemgap>
                            <control type="label">
                                <font>SmallBold</font>
                                <width>100%</width>
                                <align>left</align>
                                <textcolor>Dark1</textcolor>
                                <label>$VAR[WidgetTitle]</label>
                            </control>
                            <control type="textbox">
                                <font>Tiny</font>
                                <width>100%</width>
                                <height>105</height>
                                <align>left</align>
                                <textcolor>Dark2</textcolor>
                                <label>$INFO[Container(301).ListItem.Label2][CR]$INFO[Container(301).ListItem.Property(Label3)]</label>
                            </control>
                        </control>
                        <control type="group">
                            <right>1100</right>
                            <width>50</width>
                            <orientation>vertical</orientation>
                            <bottom>225</bottom>
                            <control type="progress">
                                <height>10</height>
                                <width>80</width>
                                <bottom>80</bottom>
                                <left>10</left>
                                <info>System.CPUUsage</info>
                                <include>DefSettingsButton</include>
                                <animation effect="rotate" condition="true" start="360" end="90" loop="false" time="0" center="auto">Conditional</animation>
                                <visible>String.IsEqual(ListItem.Property(Label4),cpu)</visible>
                            </control>
                            <control type="progress">
                                <height>10</height>
                                <width>80</width>
                                <bottom>80</bottom>
                                <left>10</left>
                                <info>system.memory(used)</info>
                                <include>DefSettingsButton</include>
                                <animation effect="rotate" condition="true" start="360" end="90" loop="false" time="0" center="auto">Conditional</animation>
                                <visible>String.IsEqual(ListItem.Property(Label4),ram)</visible>
                            </control>
                            <control type="progress">
                                <height>10</height>
                                <width>80</width>
                                <bottom>80</bottom>
                                <left>10</left>
                                <info>System.UsedSpace</info>
                                <include>DefSettingsButton</include>
                                <animation effect="rotate" condition="true" start="360" end="90" loop="false" time="0" center="auto">Conditional</animation>
                                <visible>String.IsEqual(ListItem.Property(Label4),storage)</visible>
                            </control>
                        </control>
                    </control>
                    <control type="grouplist">
                        <visible>String.IsEqual(Container(300).ListItem.Property(widgetBanner),yes) + ![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]</visible>
                        <animation effect="fade" start="100" end="33" time="400" condition="!Control.HasFocus(301) + !Skin.HasSetting(widgets.fade)">Conditional</animation>
                        <include>Animation.FadeIn</include>
                        <include>Animation.FadeOut</include>
                        <right>70</right>
                        <width>1422</width>
                        <orientation>vertical</orientation>
                        <top>822</top>
                        <itemgap>-20</itemgap>
                        <control type="label">
                            <font>SmallBold</font>
                            <textcolor>Dark1</textcolor>
                            <label>$VAR[WidgetTitle]</label>
                        </control>
                        <control type="label">
                            <font>Tiny</font>
                            <width>100%</width>
                            <align>left</align>
                            <textcolor>Dark2</textcolor>
                            <label>$VAR[WidgetSubLabel]</label>
                        </control>
                    </control>

                    <!-- Weather Widget -->
                    <control type="group">
                        <visible>String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)</visible>
                        <visible>Weather.IsFetched</visible>
                        <control type="grouplist">
                            <top>330</top>
                            <left>518</left>
                            <right>70</right>
                            <height>252</height>
                            <orientation>horizontal</orientation>
                            <itemgap>0</itemgap>
                            <control type="group">
                                <width>716</width>
                                <height>100%</height>
                                <control type="image">
                                    <left>0</left>
                                    <top>0</top>
                                    <right>0</right>
                                    <bottom>0</bottom>
                                    <texture border="11" background="true">common/$VAR[nofocus-shadow10]</texture>
                                </control>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture border="5" colordiffuse="Panel">common/box.png</texture>
                                </control>
                                <include content="def_weatherfanart.widgets">
                                    <param name="FanartCode" value="$INFO[Window(Weather).Property(Day0.FanartCode)]"/>
                                    <param name="bordertopbottom" value="9"/>
                                    <param name="borderleftright" value="9"/>
                                </include>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture colordiffuse="BoxWidget" border="4" background="true">common/box21.png</texture>
                                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                                </control>
                                <control type="multiimage" description="Fanart">
                                    <visible>!Skin.HasSetting(weather.hidefanart)</visible>
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <fadetime>600</fadetime>
                                    <timeperimage>12000</timeperimage>
                                    <randomize>true</randomize>
                                    <aspectratio>scale</aspectratio>
                                    <animation effect="fade" start="100" end="10" condition="true">Conditional</animation>
                                    <imagepath background="true">$INFO[Skin.String(weather.fanart)]$INFO[Window(Weather).Property(Day0.FanartCode)]/</imagepath>
                                </control>
                                <control type="image">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Window(Weather).Property(Day0.OutlookIcon)]</texture>
                                    <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
                                </control>
                                <control type="image">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(Weather).Property(Day0.FanartCode),,.png]</texture>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="multiimage">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <imagepath>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Day0.FanartCode)]</imagepath>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <top>50</top>
                                    <height>50</height>
                                    <font>NotificationBold</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label fallback="10006">$LOCALIZE[33006]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <height>100%</height>
                                    <aligny>center</aligny>
                                    <scroll>false</scroll>
                                    <align>right</align>
                                    <font>Large</font>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day0.HighTemp),[B],[/B]°  ]$INFO[Window(Weather).Property(Day0.LowTemp),,°]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <bottom>50</bottom>
                                    <height>50</height>
                                    <font>Tiny</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day0.Outlook)]</label>
                                </control>
                            </control>
                            <control type="group">
                                <width>716</width>
                                <height>100%</height>
                                <control type="image">
                                    <left>0</left>
                                    <top>0</top>
                                    <right>0</right>
                                    <bottom>0</bottom>
                                    <texture border="11" background="true">common/$VAR[nofocus-shadow10]</texture>
                                </control>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture border="5" colordiffuse="Panel">common/box.png</texture>
                                </control>
                                <include content="def_weatherfanart.widgets">
                                    <param name="FanartCode" value="$INFO[Window(Weather).Property(Day1.FanartCode)]"/>
                                    <param name="bordertopbottom" value="9"/>
                                    <param name="borderleftright" value="9"/>
                                </include>
                                <control type="multiimage" description="Fanart">
                                    <visible>!Skin.HasSetting(weather.hidefanart)</visible>
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <fadetime>600</fadetime>
                                    <timeperimage>12000</timeperimage>
                                    <randomize>true</randomize>
                                    <aspectratio>scale</aspectratio>
                                    <animation effect="fade" start="100" end="10" condition="true">Conditional</animation>
                                    <imagepath background="true">$INFO[Skin.String(weather.fanart)]$INFO[Window(Weather).Property(Day2.FanartCode)]/</imagepath>
                                </control>
                                <control type="image">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Window(Weather).Property(Day2.OutlookIcon)]</texture>
                                    <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
                                </control>
                                <control type="image">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(Weather).Property(Day2.FanartCode),,.png]</texture>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="multiimage">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <imagepath>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Day2.FanartCode)]</imagepath>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <top>50</top>
                                    <height>50</height>
                                    <font>NotificationBold</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label fallback="10006">$INFO[Window(Weather).Property(Day2.Title)]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <height>100%</height>
                                    <aligny>center</aligny>
                                    <scroll>false</scroll>
                                    <align>right</align>
                                    <font>Large</font>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day2.HighTemp),[B],[/B]°  ]$INFO[Window(Weather).Property(Day2.LowTemp),,°]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <bottom>50</bottom>
                                    <height>50</height>
                                    <font>Tiny</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day2.Outlook)]</label>
                                </control>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture colordiffuse="BoxWidget" border="4" background="true">common/box21.png</texture>
                                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                                </control>
                            </control>
                        </control>
                        <control type="grouplist">
                            <top>582</top>
                            <left>518</left>
                            <right>70</right>
                            <height>252</height>
                            <orientation>horizontal</orientation>
                            <itemgap>0</itemgap>
                            <control type="group">
                                <width>716</width>
                                <height>100%</height>
                                <control type="image">
                                    <left>0</left>
                                    <top>0</top>
                                    <right>0</right>
                                    <bottom>0</bottom>
                                    <texture border="11" background="true">common/$VAR[nofocus-shadow10]</texture>
                                </control>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture border="5" colordiffuse="Panel">common/box.png</texture>
                                </control>
                                <include content="def_weatherfanart.widgets">
                                    <param name="FanartCode" value="$INFO[Window(Weather).Property(Day2.FanartCode)]"/>
                                    <param name="bordertopbottom" value="9"/>
                                    <param name="borderleftright" value="9"/>
                                </include>
                                <control type="multiimage" description="Fanart">
                                    <visible>!Skin.HasSetting(weather.hidefanart)</visible>
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <fadetime>600</fadetime>
                                    <timeperimage>12000</timeperimage>
                                    <randomize>true</randomize>
                                    <aspectratio>scale</aspectratio>
                                    <animation effect="fade" start="100" end="10" condition="true">Conditional</animation>
                                    <imagepath background="true">$INFO[Skin.String(weather.fanart)]$INFO[Window(Weather).Property(Day1.FanartCode)]/</imagepath>
                                </control>
                                <control type="image">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Window(Weather).Property(Day1.OutlookIcon)]</texture>
                                    <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
                                </control>
                                <control type="image">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(Weather).Property(Day1.FanartCode),,.png]</texture>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="multiimage">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <imagepath>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Day1.FanartCode)]</imagepath>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <top>50</top>
                                    <height>50</height>
                                    <font>NotificationBold</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label fallback="10006">$LOCALIZE[33007]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <height>100%</height>
                                    <aligny>center</aligny>
                                    <scroll>false</scroll>
                                    <align>right</align>
                                    <font>Large</font>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day1.HighTemp),[B],[/B]°  ]$INFO[Window(Weather).Property(Day1.LowTemp),,°]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <bottom>50</bottom>
                                    <height>50</height>
                                    <font>Tiny</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day1.Outlook)]</label>
                                </control>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture colordiffuse="BoxWidget" border="4" background="true">common/box21.png</texture>
                                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                                </control>
                            </control>
                            <control type="group">
                                <width>716</width>
                                <height>100%</height>
                                <control type="image">
                                    <left>0</left>
                                    <top>0</top>
                                    <right>0</right>
                                    <bottom>0</bottom>
                                    <texture border="11" background="true">common/$VAR[nofocus-shadow10]</texture>
                                </control>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture border="5" colordiffuse="Panel">common/box.png</texture>
                                </control>
                                <include content="def_weatherfanart.widgets">
                                    <param name="FanartCode" value="$INFO[Window(Weather).Property(Day3.FanartCode)]"/>
                                    <param name="bordertopbottom" value="9"/>
                                    <param name="borderleftright" value="9"/>
                                </include>
                                <control type="multiimage" description="Fanart">
                                    <visible>!Skin.HasSetting(weather.hidefanart)</visible>
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <fadetime>600</fadetime>
                                    <timeperimage>12000</timeperimage>
                                    <randomize>true</randomize>
                                    <aspectratio>scale</aspectratio>
                                    <animation effect="fade" start="100" end="10" condition="true">Conditional</animation>
                                    <imagepath background="true">$INFO[Skin.String(weather.fanart)]$INFO[Window(Weather).Property(Day3.FanartCode)]/</imagepath>
                                </control>
                                <control type="image">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Window(Weather).Property(Day3.OutlookIcon)]</texture>
                                    <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
                                </control>
                                <control type="image">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(Weather).Property(Day3.FanartCode),,.png]</texture>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="multiimage">
                                    <top>30</top>
                                    <left>50</left>
                                    <height>192</height>
                                    <width>192</width>
                                    <aspectratio align="center" aligny="center">keep</aspectratio>
                                    <imagepath>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Day3.FanartCode)]</imagepath>
                                    <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <top>50</top>
                                    <height>50</height>
                                    <font>NotificationBold</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label fallback="10006">$INFO[Window(Weather).Property(Day3.Title)]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <height>100%</height>
                                    <aligny>center</aligny>
                                    <scroll>false</scroll>
                                    <align>right</align>
                                    <font>Large</font>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day3.HighTemp),[B],[/B]°  ]$INFO[Window(Weather).Property(Day3.LowTemp),,°]</label>
                                </control>
                                <control type="label">
                                    <left>292</left>
                                    <right>50</right>
                                    <bottom>50</bottom>
                                    <height>50</height>
                                    <font>Tiny</font>
                                    <align>right</align>
                                    <aligny>center</aligny>
                                    <textcolor>PanelWhite100</textcolor>
                                    <label>$INFO[Window(Weather).Property(Day3.Outlook)]</label>
                                </control>
                                <control type="image">
                                    <left>10</left>
                                    <top>10</top>
                                    <right>10</right>
                                    <bottom>10</bottom>
                                    <texture colordiffuse="BoxWidget" border="4" background="true">common/box21.png</texture>
                                    <visible>!Skin.HasSetting(thumbnails.white)</visible>
                                </control>
                            </control>
                        </control>
                    </control>

                <!-- Widget -->
                    <control type="group">
                        <animation effect="slide" start="0,0" end="0,148" time="0" condition="String.IsEqual(Container(300).ListItem.Property(widgetBanner),yes)">Conditional</animation>
                        <include>skinshortcuts-template-widget-vertical</include>
                    </control>
                </control>
            </control>
        </control>
    </include>

    <include name="HomeVerticalMenuWidgets">

        <!-- Furniture -->
        <include>Furniture_Header</include>
        <include condition="!Skin.HasSetting(extended.nowplaying) + !Skin.HasSetting(home.hide.nowplaying)">Furniture_NowPlaying</include>
        <include>Furniture_Clock</include>
        <include>Furniture_Weather</include>
        <include>WidgetsNavigationArrows</include>
        <control type="group">
            <animation effect="slide" start="0" end="-100" time="0" delay="0" condition="true">Conditional</animation>
            <animation effect="slide" start="0" end="-350" time="300" delay="0" center="auto" tween="sine" easing="out" condition="[!Control.HasFocus(300) + !Control.HasFocus(302)] + ![Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)] + !Skin.HasSetting(homemenu.vertical.noslide)">Conditional</animation>

            <!-- LEFT SIDE -->
            <control type="group">
                <include>Animation.LeftSide.Vertical.Menu</include>

                <!-- Home List -->
                <control type="list" id="300">
                    <animation effect="slide" start="0,0" end="-296,0" time="0" condition="Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)">Conditional</animation>
                    <animation effect="slide" start="0,0" end="0,-38" time="0" condition="true">Conditional</animation>
                    <animation effect="slide" start="0,0" end="0,30" time="0" condition="Skin.HasSetting(home.showheader)">Conditional</animation>
                    <animation effect="fade" start="100" end="33" time="400" condition="[!Control.HasFocus(300) + !Control.HasFocus(302)] + ![Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)] + !Skin.HasSetting(homemenu.vertical.noslide)">Conditional</animation>
                    <animation effect="fade" start="100" end="0" time="400" condition="[!Control.HasFocus(300) + !Control.HasFocus(302)] + ![Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)] + !Skin.HasSetting(homemenu.vertical.noslide) + Skin.HasSetting(homemenu.hide.lines)">Conditional</animation>
                    <include condition="![Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.only.icons)]">Animation.Slide.Vertical.Menu</include>
                    <include condition="[Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.only.icons)]" content="Animation.Slide.Vertical.Menu">
                        <param name="left" value="-50" />
                    </include>                    
                    <visible allowhiddenfocus="true">!Control.HasFocus(302)</visible>
                    <include>Animation.FadeIn</include>
                    <include>Animation.FadeOut</include>
                    <description>Home Wraplist</description>
                    <left>100</left>
                    <top>PosterPad</top>
                    <width>PosterW</width>
                    <height>720</height>
                    <orientation>vertical</orientation>
                    <onright condition="$EXP[ExtendedNowPlayingIsVisible] + Skin.HasSetting(home.nowplaying.controls)">777</onright>
                    <onright>301</onright>
                    <onleft>302</onleft>
                    <onback condition="Skin.HasSetting(home.onback.go.to.first.widget) + Integer.IsGreater(Container(301).NumItems,0)">SetFocus(301)</onback>
                    <scrolltime>200</scrolltime>
                    <onfocus>ClearProperty(listitem.trailer,home)</onfocus>
                    <itemlayout width="407" height="80">
                        <control type="label">
                            <right>30</right>
                            <left>0</left>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <textcolor>Dark3</textcolor>
                            <font>Home</font>
                            <label>$INFO[ListItem.Label]</label>
                            <visible>!Skin.HasSetting(home.showicons)</visible>
                        </control>
                        <control type="label">
                            <right>100</right>
                            <left>0</left>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <textcolor>Dark3</textcolor>
                            <font>Home</font>
                            <label>$INFO[ListItem.Label]</label>
                            <visible>Skin.HasSetting(home.showicons)</visible>
                            <visible>!Skin.HasSetting(homemenu.only.icons)</visible>
                        </control>
                        <control type="image">
                            <right>10</right>
                            <top>1</top>
                            <width>80</width>
                            <height>80</height>
                            <texture colordiffuse="Dark3">$INFO[ListItem.Icon]</texture>
                            <visible>Skin.HasSetting(home.showicons)</visible>
                        </control>
                    </itemlayout>
                    <focusedlayout width="407" height="80">
                        <control type="label">
                            <right>30</right>
                            <left>0</left>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <textcolor>$VAR[ColorHighlight]</textcolor>
                            <font>HomeFO</font>
                            <label>$INFO[ListItem.Label]</label>
                            <visible>!Skin.HasSetting(home.showicons) + !Skin.HasSetting(homemenu.items.underlined)</visible>
                            <animation effect="fade" start="100" end="50" delay="0" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302)">Conditional</animation>
                        </control>
                        <control type="label">
                            <right>100</right>
                            <left>0</left>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <textcolor>$VAR[ColorHighlight]</textcolor>
                            <font>HomeFO</font>
                            <label>$INFO[ListItem.Label]</label>
                            <visible>Skin.HasSetting(home.showicons)</visible>
                            <visible>!Skin.HasSetting(homemenu.only.icons) + !Skin.HasSetting(homemenu.items.underlined)</visible>
                            <animation effect="fade" start="100" end="50" delay="0" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302)">Conditional</animation>
                        </control>
                        <control type="image">
                            <right>10</right>
                            <width>80</width>
                            <top>1</top>
                            <height>80</height>
                            <texture colordiffuse="$VAR[ColorHighlight]">$INFO[ListItem.Icon]</texture>
                            <visible>Skin.HasSetting(home.showicons) + !Skin.HasSetting(homemenu.items.underlined)</visible>
                            <animation effect="fade" start="100" end="50" delay="0" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302)">Conditional</animation>
                        </control>
                        <control type="image">
                            <right>10</right>
                            <width>80</width>
                            <top>1</top>
                            <height>80</height>
                            <texture colordiffuse="Dark1">$INFO[ListItem.Icon]</texture>
                            <visible>Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(homemenu.items.underlined)</visible>
                            <animation effect="fade" start="100" end="50" delay="0" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302)">Conditional</animation>
                        </control>
                        <control type="group">
                            <top>68</top>
                            <left>332</left>
                            <width>50</width>
                            <height>4</height>
                            <animation effect="fade" start="100" end="50" delay="0" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302)">Conditional</animation>
                            <visible>Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(homemenu.items.underlined)</visible>
                            <control type="image">
                                <texture colordiffuse="$VAR[ColorHighlight]">common/box.png</texture>
                            </control>
                            <control type="image">
                                <texture colordiffuse="$VAR[ColorHighlightSelectbox2]">common/gradient-box.png</texture>
                            </control>
                        </control>
                        <control type="grouplist">
                            <orientation>horizontal</orientation>
                            <right>30</right>
                            <left>0</left>
                            <top>8</top>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <control type="button">
                                <textcolor>Dark1</textcolor>
                                <font>HomeFO</font>
                                <textoffsetx>0</textoffsetx>
                                <width>auto</width>
                                <texturenofocus border="8" colordiffuse="$VAR[ColorHighlight]">common/underline2.png</texturenofocus>
                                <label>$INFO[Container(300).ListItem.Label]</label>
                            </control>
                            <visible>[!Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.items.underlined) + $EXP[HomeIsModernMultiWidgets]] | [!Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.items.underlined) + $EXP[HomeIsVerticalMultiWidgets]]</visible>
                            <animation effect="fade" start="100" end="50" delay="0" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302)">Conditional</animation>
                        </control>
                        <control type="group">
                            <top>6</top>
                            <control type="image">
                                <right>10</right>
                                <width>80</width>
                                <top>-5</top>
                                <height>80</height>
                                <texture colordiffuse="Dark1">$INFO[ListItem.Icon]</texture>
                            </control>
                            <control type="grouplist">
                                <top>1</top>
                                <orientation>horizontal</orientation>
                                <right>29</right>
                                <left>0</left>
                                <align>right</align>
                                <aligny>center</aligny>
                                <height>100%</height>
                                <control type="button">
                                    <textcolor>Dark1</textcolor>
                                    <font>Home</font>
                                    <textoffsetx>0</textoffsetx>
                                    <width>auto</width>
                                    <texturenofocus border="8" colordiffuse="$VAR[ColorHighlight]">common/underline2.png</texturenofocus>
                                    <label>$INFO[Container(300).ListItem.Label]       </label>
                                </control>
                            </control>
                            <visible>!Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.items.underlined)</visible>
                            <animation effect="fade" start="100" end="50" delay="0" time="150" condition="!Control.HasFocus(300) + !Control.HasFocus(302)">Conditional</animation>
                        </control>

                         <!-- Set TMDbHelper WidgetContainer -->
                        <include condition="$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]">SetWidgetContainerForTMDB</include>
                        <include condition="$EXP[HasHomemenuAutoSlideOutAnimation]">SlideOutItemsButton</include>
                    </focusedlayout>
                    <content>
                        <include>skinshortcuts-mainmenu</include>
                    </content>
                </control>

                <!-- SubMenu List -->
                <control type="list" id="302">
                    <visible allowhiddenfocus="true">Control.HasFocus(302)</visible>
                    <animation effect="slide" start="0,0" end="0,-38" time="0" condition="true">Conditional</animation>
                    <animation effect="slide" start="0,0" end="0,30" time="0" condition="Skin.HasSetting(home.showheader)">Conditional</animation>
                    <animation effect="fade" start="100" end="33" time="400" condition="Control.HasFocus(301)">Conditional</animation>
                    <include condition="![Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.only.icons)]">Animation.Slide.Vertical.Menu</include>
                    <include condition="[Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.only.icons)]" content="Animation.Slide.Vertical.Menu">
                        <param name="left" value="-50" />
                    </include>
                    <animation effect="slide" start="0" end="-296" time="0" condition="[Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)]">Conditional</animation>
                    <include>Animation.FadeIn</include>
                    <include>Animation.FadeOut</include>
                    <description>Home Wraplist</description>
                    <left>SidePad</left>
                    <top>PosterPad</top>
                    <width>PosterW</width>
                    <height>720</height>
                    <orientation>vertical</orientation>
                    <onright>300</onright>
                    <onleft>300</onleft>
                    <ondown>302</ondown>
                    <onup>302</onup>
                    <onback>300</onback>
                    <scrolltime>200</scrolltime>
                    <itemlayout width="427" height="80">
                        <control type="label">
                            <right>30</right>
                            <left>0</left>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <textcolor>Dark3</textcolor>
                            <font>Home</font>
                            <label>$INFO[ListItem.Label]</label>
                            <visible>![Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)]</visible>
                        </control>
                        <control type="image">
                            <right>10</right>
                            <top>1</top>
                            <width>80</width>
                            <height>80</height>
                            <texture colordiffuse="Dark3">$INFO[ListItem.Icon]</texture>
                            <visible>Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)</visible>
                        </control>
                    </itemlayout>
                    <focusedlayout width="427" height="80">
                        <control type="grouplist">
                            <orientation>horizontal</orientation>
                            <right>30</right>
                            <left>0</left>
                            <top>8</top>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <control type="button">
                                <textcolor>Dark1</textcolor>
                                <font>Home</font>
                                <textoffsetx>0</textoffsetx>
                                <width>auto</width>
                                <texturenofocus border="8" colordiffuse="$VAR[ColorHighlight]">common/underline2.png</texturenofocus>
                                <label>$INFO[ListItem.Label]</label>
                            </control>
                            <visible>![Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)] + Skin.HasSetting(homemenu.items.underlined)</visible>
                        </control>
                        <control type="label">
                            <right>30</right>
                            <left>0</left>
                            <align>right</align>
                            <aligny>center</aligny>
                            <height>100%</height>
                            <textcolor>$VAR[ColorHighlight]</textcolor>
                            <font>Home</font>
                            <label>$INFO[ListItem.Label]</label>
                            <visible>![Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)] + !Skin.HasSetting(homemenu.items.underlined)</visible>
                        </control>
                        <control type="image">
                            <right>10</right>
                            <width>80</width>
                            <top>1</top>
                            <height>80</height>
                            <texture colordiffuse="$VAR[ColorHighlight]">$INFO[ListItem.Icon]</texture>
                            <visible>Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.only.icons) + !Skin.HasSetting(homemenu.items.underlined)</visible>
                        </control>
                        <control type="image">
                            <right>10</right>
                            <width>80</width>
                            <top>1</top>
                            <height>80</height>
                            <texture colordiffuse="Dark1">$INFO[ListItem.Icon]</texture>
                            <visible>Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.items.underlined)</visible>
                        </control>
                        <control type="group">
                            <top>68</top>
                            <left>352</left>
                            <width>50</width>
                            <height>4</height>
                            <visible>Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.items.underlined)</visible>
                            <control type="image">
                                <texture colordiffuse="$VAR[ColorHighlight]">common/box.png</texture>
                            </control>
                            <control type="image">
                                <texture colordiffuse="$VAR[ColorHighlightSelectbox2]">common/gradient-box.png</texture>
                            </control>
                        </control>
                        <include condition="$EXP[HasHomemenuAutoSlideOutAnimation]">SlideOutItemsButton</include>
                    </focusedlayout>
                    <content>
                        <include>skinshortcuts-submenu</include>
                    </content>
                </control>
            </control>

            <!-- RIGHT SIDE -->
            <control type="group">
                <include>Animation.RightSide.Vertical.Menu</include>

                <control type="label">
                    <left>525</left>
                    <top>80</top>
                    <width>720</width>
                    <font>Medium</font>
                    <textcolor>Dark2</textcolor>
                    <height>45</height>
                    <label fallback="19055">$VAR[Label_Home_Vertical]</label>
                    <visible>$EXP[HomeIsVerticalMultiWidgets] + Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons) + Skin.HasSetting(home.show.label)</visible>
                </control>

                <!-- Container Updating -->
                <control type="group">
                    <centerleft>60%</centerleft>
                    <centertop>45%</centertop>
                    <width>450</width>
                    <height>117</height>
                    <visible>[![String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + Container(301).IsUpdating] | [!Weather.IsFetched + [String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)]]</visible>
                    <include>Animation.FadeIn</include>
                    <include>Animation.FadeOut</include>
                    <include>BusySpinner</include>
                </control>
                <control type="group">
                    <animation effect="slide" start="0" end="0,30" time="0" condition="Skin.HasSetting(home.showheader) + [Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)]">Conditional</animation>

                    <!-- Widget -->
                    <control type="grouplist" id="301">
                        <include>Animation.NowPlaying.Widget.Fade</include>
                        <include content="def_height" condition="Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections)">
                            <param name="height" value="765" />
                        </include>
                        <include content="def_height" condition="!Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections)">
                            <param name="height" value="770" />
                        </include>
                        <include content="def_height" condition="Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
                            <param name="height" value="830" />
                        </include>
                        <include content="def_height" condition="!Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
                            <param name="height" value="830" />
                        </include>
                        <orientation>vertical</orientation>
                        <include content="def_bottom" condition="!Skin.HasSetting(home.widgets.show.reflections)">
                            <param name="bottom" value="188" />
                        </include>
                        <include content="def_bottom" condition="Skin.HasSetting(home.widgets.show.reflections) + !Skin.HasSetting(homemenu.netflix)">
                            <param name="bottom" value="150" />
                        </include>
                        <include content="def_bottom" condition="Skin.HasSetting(home.widgets.show.reflections) + Skin.HasSetting(homemenu.netflix)">
                            <param name="bottom" value="160" />
                        </include>
                        <left>444</left>
                        <width>1920</width>
                        <onup condition="Skin.HasSetting(enable.widgets.onup.go.back.to.last.widget)">301</onup>
                        <onup condition="!Skin.HasSetting(enable.widgets.onup.go.back.to.last.widget)">300</onup>
                        <ondown condition="Skin.HasSetting(enable.widgets.onup.go.back.to.last.widget)">301</ondown>
                        <ondown condition="!Skin.HasSetting(enable.widgets.onup.go.back.to.last.widget)">300</ondown>
                        <include>ScrolltimeWidgetsContainer</include>
                        <usecontrolcoords>true</usecontrolcoords>
                        <itemgap>0</itemgap>

                        <!-- Widgets -->
                        <include>Widgets</include>

                    </control>
                    <include>ExtendedNowPlaying</include>
                </control>
            </control>
            <control type="button" id="4567">
                <label />
                <include>HiddenButton</include>
                <onfocus>SetFocus($INFO[Window(home).Property(BackToId)])</onfocus>
                <onfocus>SetFocus(300)</onfocus>
            </control>
        </control>
    </include>

    <include name="widget.title.label">
        <include content="Animation.FadeOutHomeFullscreenWidget" condition="Skin.HasSetting(homemenu.clean.flix)">
            <param name="condition" value="$PARAM[animation_condition]"/>
        </include>
        <usecontrolcoords>true</usecontrolcoords>
        <height>40</height>
        <left>SidePad</left>
        <visible>!Skin.HasSetting(homemenu.clean.flix) | [Skin.HasSetting(homemenu.clean.flix) + !Skin.HasSetting(hidewidgettitle)]</visible>
        <include condition="Skin.HasSetting(homemenu.clean.flix) + !Skin.HasSetting(homemenu.clean.flix.no.slide)">Animation.Home.Clean</include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix) + !Skin.HasSetting(hidewidgettitle) + [Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)]">
            <param name="top" value="705" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix) + !Skin.HasSetting(hidewidgettitle)">
            <param name="top" value="725" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections)">
            <param name="top" value="390" />
        </include>
        <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections)">
            <param name="top" value="10" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
            <param name="top" value="415" />
        </include>
        <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
            <param name="top" value="0" />
        </include>
        <orientation>horizontal</orientation>
        <itemgap>10</itemgap>
        <include condition="!Skin.HasSetting(widgets.fade)">Animation.Vertical.Widgets.Label</include>
        <include content="Kodi_Logo_Home">
            <param name="dimensions" value="30"/>
            <param name="top" value="5"/>
            <param name="left" value="0"/>
            <param name="left-gradient" value="-40"/>
        </include>
        <control type="label">
            <height>38</height>
            <font>SmallNavi</font>
            <width>auto</width>
            <textcolor>$VAR[WidgetColorSwitch]</textcolor>
            <label>$VAR[WidgetLabelWidgets$PARAM[idshort]]</label>
        </control>
        <control type="label">
            <align>left</align>
            <height>38</height>
            <font>SmallNavi</font>
            <width>auto</width>
            <textcolor>Dark1</textcolor>
            <label>$INFO[Container($PARAM[focusid]).ListItem.TvShowTitle, •  ,  •  ]$INFO[Container($PARAM[focusid]).ListItem.Label]</label>
            <include>Animation.Vertical.Widgets.Title</include>
            <visible>Control.HasFocus($PARAM[focusid])</visible>
            <visible>!String.StartsWith(ListItem.FolderPath,pvr://)</visible>
            <visible>String.IsEqual(Container($PARAM[focusid]).ListItem.DBType,episode)</visible>
            <visible>!Skin.HasSetting(homemenu.netflix)</visible>
        </control>
        <control type="label">
            <align>left</align>
            <height>38</height>
            <font>SmallNavi</font>
            <width>auto</width>
            <textcolor>Dark1</textcolor>
            <label>$INFO[Container($PARAM[focusid]).ListItem.Label, •  ]</label>
            <include>Animation.Vertical.Widgets.Title</include>
            <visible>Control.HasFocus($PARAM[focusid])</visible>
            <visible>!String.IsEqual(Container($PARAM[focusid]).ListItem.DBType,episode)</visible>
            <visible>!Skin.HasSetting(homemenu.netflix)</visible>
        </control>
        <control type="label">
            <align>left</align>
            <height>38</height>
            <font>SmallNavi</font>
            <width>auto</width>
            <textcolor>Dark1</textcolor>
            <label>$INFO[ListItem.Artist, •  ,]</label>
            <include>Animation.Vertical.Widgets.Title</include>
            <visible>Control.HasFocus($PARAM[focusid]) + [String.IsEqual(Container($PARAM[focusid]).ListItem.DBType,album) | String.IsEqual(Container($PARAM[focusid]).ListItem.DBType,song)] + !String.IsEmpty(Container($PARAM[focusid]).ListItem.Artist)</visible>
            <visible>!Skin.HasSetting(homemenu.netflix)</visible>
        </control>
        <control type="label" id="9966">
            <align>left</align>
            <height>38</height>
            <font>SmallNavi</font>
            <width>auto</width>
            <textcolor>Dark1</textcolor>
            <label>$INFO[Container(44023).NumItems, •  , $LOCALIZE[342]]</label>
            <include>Animation.Vertical.Widgets.Title</include>
            <visible>Control.HasFocus($PARAM[focusid])</visible>
            <visible>ListItem.IsCollection + [String.IsEqual(Container(300).ListItem.Property(widgetEnable.5),yes) | String.IsEqual(Container(300).ListItem.Property(widgetEnable.4),yes) | String.IsEqual(Container(300).ListItem.Property(widgetEnable.3),yes) | String.IsEqual(Container(300).ListItem.Property(widgetEnable.2),yes)]</visible>
            <visible>!Skin.HasSetting(homemenu.netflix)</visible>
        </control>
        <control type="label" id="9967">
            <align>left</align>
            <height>38</height>
            <font>SmallNavi</font>
            <width>auto</width>
            <textcolor>Dark1</textcolor>
            <label>$INFO[Container(44022).NumItems, •  , $LOCALIZE[134]]</label>
            <include>Animation.Vertical.Widgets.Title</include>
            <visible>Control.HasFocus($PARAM[focusid])</visible>
            <visible>String.IsEqual(ListItem.DBType,album) + [String.IsEqual(Container(300).ListItem.Property(widgetEnable.5),yes) | String.IsEqual(Container(300).ListItem.Property(widgetEnable.4),yes) | String.IsEqual(Container(300).ListItem.Property(widgetEnable.3),yes) | String.IsEqual(Container(300).ListItem.Property(widgetEnable.2),yes)]</visible>
            <visible>!Skin.HasSetting(homemenu.netflix)</visible>
        </control>
        <control type="image">
            <description>Busy animation</description>
            <width>45</width>
            <height>45</height>
            <animation effect="rotate" condition="true" start="360" end="0" loop="true" time="1000" center="auto">Conditional</animation>
            <texture colordiffuse="$VAR[ColorHighlight]">dialog/loading-spinner.png</texture>
            <aspectratio>keep</aspectratio>
            <include>Animation.Vertical.Widgets.Title.Loading</include>
            <visible>Container($PARAM[focusid]).IsUpdating</visible>
        </control>
    </include>

    <include name="HomeWidgetInfoWidgets">
        <include>WidgetsNavigationArrows</include>
        <include>WidgetsItemsCount</include>
        <control type="group">
            <left>0</left>
            <animation effect="slide" start="0" end="0,-27" time="150" condition="Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets) + Skin.HasSetting(home.oldmenuheight)">Conditional</animation>

            <!-- Widget -->
            <control type="grouplist" id="301">
                <include>Animation.NowPlaying.Widget.Fade</include>
                <include content="def_height" condition="Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections) | Skin.HasSetting(homemenu.clean.flix)">
                    <param name="height" value="765" />
                </include>
                <include content="def_height" condition="!Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections)">
                    <param name="height" value="770" />
                </include>
                <include content="def_height" condition="Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
                    <param name="height" value="830" />
                </include>
                <include content="def_height" condition="!Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
                    <param name="height" value="830" />
                </include>
                <orientation>vertical</orientation>
                <include content="def_bottom" condition="Skin.HasSetting(homemenu.clean.flix) + !Skin.HasSetting(hidewidgettitle)">
                    <param name="bottom" value="238" />
                </include>
                <include content="def_bottom" condition="!Skin.HasSetting(home.widgets.show.reflections) | Skin.HasSetting(homemenu.clean.flix)">
                    <param name="bottom" value="188" />
                </include>
                <include content="def_bottom" condition="Skin.HasSetting(home.widgets.show.reflections)">
                    <param name="bottom" value="160" />
                </include>
                <width>1920</width>
                <onup condition="!Skin.HasSetting(disable.widgets.onup.go.back.to.last.item)">SetFocus(8888)</onup>
                <onup condition="Skin.HasSetting(disable.widgets.onup.go.back.to.last.item)">300</onup>
                <ondown condition="Skin.HasSetting(disable.widgets.ondown.go.back.to.position.0)">300</ondown>
                <ondown condition="!Skin.HasSetting(disable.widgets.ondown.go.back.to.position.0)">4567</ondown>
                <include>ScrolltimeWidgetsContainer</include>
                <usecontrolcoords>true</usecontrolcoords>
                <itemgap>0</itemgap>
                <animation effect="slide" start="0" end="0,30" time="0" condition="Skin.HasSetting(home.showheader) + [Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)]">Conditional</animation>
                <!-- Widgets -->
                <include>Widgets</include>

            </control>
            <include>ExtendedNowPlaying</include>
        </control>
        <control type="button" id="4567">
            <include>HiddenButton</include>
            <onfocus>SetFocus($INFO[Window(home).Property(BackToId)])</onfocus>
            <onfocus>SetFocus(300)</onfocus>
        </control>
        <control type="button" id="8888">
            <include>HiddenButton</include>
            <onfocus condition="Integer.IsEqual(Container(301).NumItems,1)">SetFocus(300)</onfocus>
            <onfocus condition="!Integer.IsEqual(Container(301).NumItems,1) + !Integer.IsEqual(Container(301).NumItems,0)">SetFocus($INFO[Window(Home).Property(LastId)])</onfocus>
            <onfocus condition="Integer.IsEqual(Container(301).NumItems,0)">SetFocus(300)</onfocus>
        </control>
    </include>

    <include name="FullScreenInfoSub">
        <param name="id" value="$PARAM[id]"/>
        <param name="labelisvisible" value="$PARAM[labelisvisible]" default="true"/>
        <definition>
            <control type="group">
                <animation effect="slide" start="0" end="0,385" time="0" condition="[Integer.IsEqual(Container(301).NumItems,1) + !String.IsEqual(Container(300).ListItem.Property(widgetFullscreen),yes)] + !Skin.HasSetting(homemenu.netflix)">Conditional</animation>
                <animation effect="slide" start="0" end="0,30" time="0" condition="[Integer.IsEqual(Container(301).NumItems,1) + !String.IsEqual(Container(300).ListItem.Property(widgetFullscreen),yes)] + !Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">Conditional</animation>
                <animation effect="slide" start="0" end="0,10" time="0" condition="!Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections)">Conditional</animation>
                <animation effect="slide" start="0" end="0,-15" time="0" condition="!Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">Conditional</animation>
                <animation effect="fade" start="100" end="0" time="150" condition="!ControlGroup(301).HasFocus() + Skin.HasSetting(home.hide.netflix.plot) + Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(homemenu.clean.flix)">Conditional</animation>
                <include condition="!Skin.HasSetting(widgets.fade)">Animation.Vertical.Widgets.Label</include>
                <control type="grouplist">
                    <left>SidePad</left>
                    <include content="def_width" condition="Skin.HasSetting(homemenu.netflix)">
                        <param name="width" value="NetflixPlotWidth" />
                    </include>
                    <include content="def_width" condition="!Skin.HasSetting(homemenu.netflix)">
                        <param name="width" value="1270" />
                    </include>
                    <orientation>vertical</orientation>
                    <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix) + [Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)] + !Skin.HasSetting(hidewidgettitle)">
                        <param name="top" value="-295" />
                    </include>
                    <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix) + !Skin.HasSetting(hidewidgettitle)">
                        <param name="top" value="-280" />
                    </include>
                    <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix) + [Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)]">
                        <param name="top" value="-290" />
                    </include>
                    <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix)">
                        <param name="top" value="-260" />
                    </include>
                    <include content="def_top" condition="Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections)">
                        <param name="top" value="-750" />
                    </include>
                    <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections)">
                        <param name="top" value="-373" />
                    </include>
                    <include content="def_top" condition="Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
                        <param name="top" value="-790" />
                    </include>
                    <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
                        <param name="top" value="-412" />
                    </include>
                    <itemgap>15</itemgap>
                    <visible>!String.IsEqual(ListItem.Property(LabelMore),more)</visible>
                    <include content="MultiWidgetsHeader" condition="$PARAM[labelisvisible]">
                        <param name="id" value="$PARAM[id]"/>
                    </include>
                    <include condition="Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.netflix.clearlogo) | Skin.HasSetting(homemenu.clean.flix)">IntentButton</include>
                    <include content="MultiWidgetsPlotLabel" condition="Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(homemenu.clean.flix)">
                        <param name="id" value="$PARAM[id]"/>
                        <param name="plotminheight" value="0"/>
                        <param name="plotmaxheight" value="176"/>
                    </include>
                    <include content="MultiWidgetsPlotLabel" condition="!Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(homemenu.clean.flix)">
                        <param name="id" value="$PARAM[id]"/>
                        <param name="plotminheight" value="0"/>
                        <param name="plotmaxheight" value="212"/>
                    </include>
                    <include content="MultiWidgetsPlotLabel" condition="Skin.HasSetting(homemenu.clean.flix)">
                        <param name="id" value="$PARAM[id]"/>
                        <param name="plotminheight" value="0"/>
                        <param name="plotmaxheight" value="72"/>
                    </include>
                    <include content="MultiWidgetsSubLabel">
                        <param name="id" value="$PARAM[id]"/>
                        <param name="setcontent" value="videodb://movies/sets/$INFO[Container($PARAM[id]).ListItem.DBID]/?setid=$INFO[Container($PARAM[id]).ListItem.DBID]"/>
                    </include>
                </control>
            </control>
        </definition>
    </include>

    <include name="InfoSubWidgetWeather">
        <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix) + [Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)] + !Skin.HasSetting(hidewidgettitle)">
            <param name="top" value="-409" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix) + !Skin.HasSetting(hidewidgettitle)">
            <param name="top" value="-393" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix) + [Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)]">
            <param name="top" value="-403" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix)">
            <param name="top" value="-373" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections)">
            <param name="top" value="-750" />
        </include>
        <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections)">
            <param name="top" value="-363" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
            <param name="top" value="-790" />
        </include>
        <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
            <param name="top" value="-427" />
        </include>
        <left>SidePad</left>
        <include>InfoSubWidgetWeatherNormal</include>
    </include>

    <include name="InfoSubWidgetSystem">
        <param name="issettingslayout" value="$PARAM[issettingslayout]" default="false"/>
        <param name="id" value="$PARAM[id]"/>
        <definition>
        <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix) + [Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)] + !Skin.HasSetting(hidewidgettitle)">
            <param name="top" value="-386" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix) + !Skin.HasSetting(hidewidgettitle)">
            <param name="top" value="-371" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix) + [Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)]">
            <param name="top" value="-381" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.clean.flix)">
            <param name="top" value="-351" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections)">
            <param name="top" value="-750" />
        </include>
        <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.widgets.show.reflections)">
            <param name="top" value="-363" />
        </include>
        <include content="def_top" condition="Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
            <param name="top" value="-790" />
        </include>
        <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
            <param name="top" value="-427" />
        </include>
        <left>SidePad</left>
        <include condition="!$PARAM[issettingslayout]">InfoSubWidgetSystemInclude</include>
        <include condition="$PARAM[issettingslayout]" content="InfoSubWidgetSettingsInclude">
            <param name="id" value="$PARAM[id]"/>
        </include>
        </definition>
    </include>

    <include name="MultiWidgetsHeaderLabel">
        <definition>
        <param name="left" value="$PARAM[left]" default="0"/>
        <param name="visible" value="$PARAM[visible]" default="true"/>
        <control type="image" description="clearlogo" id="$PARAM[id]37">
            <height>102</height>
            <aspectratio scalediffuse="true" align="left">keep</aspectratio>
            <texture background="true">$INFO[Container($PARAM[id]).ListItem.Art(clearlogo)]</texture>
            <visible>$PARAM[visible] + Skin.HasSetting(home.netflix.clearlogo) + Skin.HasSetting(homemenu.netflix) + !String.IsEmpty(Container($PARAM[id]).ListItem.Art(clearlogo)) + !Skin.HasSetting(homemenu.clean.flix)</visible>
        </control>
        <control type="label">
            <include content="def_font" condition="Skin.HasSetting(homemenu.netflix)">
                <param name="font" value="LargeNetflix" />
            </include>
            <include content="def_font" condition="!Skin.HasSetting(homemenu.netflix)">
                <param name="font" value="LargeNew" />
            </include>
            <width>100%</width>
            <left>$PARAM[left]</left>
            <align>left</align>
            <textcolor>Dark1</textcolor>
            <label>$PARAM[label]</label>
            <include condition="Skin.HasSetting(labels.autoscroll)">LabelScroll</include>
            <visible>$PARAM[visible] + [[[!Skin.HasSetting(home.netflix.clearlogo) | Skin.HasSetting(homemenu.clean.flix)] | [Skin.HasSetting(home.netflix.clearlogo) + Skin.HasSetting(homemenu.netflix) + String.IsEmpty(Container($PARAM[id]).ListItem.Art(clearlogo))]] | !Skin.HasSetting(homemenu.netflix)]</visible>
        </control>
        </definition>
    </include>
    
    <include name="NowPlayingHeaderLabel">
        <definition>
        <param name="left" value="$PARAM[left]" default="0"/>
        <param name="visible" value="$PARAM[visible]" default="true"/>
        <control type="label">
            <include content="def_font" condition="Skin.HasSetting(homemenu.netflix)">
                <param name="font" value="LargeNetflix" />
            </include>
            <include content="def_font" condition="!Skin.HasSetting(homemenu.netflix)">
                <param name="font" value="LargeNew" />
            </include>
            <width>100%</width>
            <left>$PARAM[left]</left>
            <align>left</align>
            <textcolor>Dark1</textcolor>
            <label>$PARAM[label]</label>
            <include condition="Skin.HasSetting(labels.autoscroll)">LabelScroll</include>
            <visible>$PARAM[visible]</visible>
        </control>
        </definition>
    </include>

    <include name="MultiWidgetsHeader">

        <!-- Episodes -->
        <include content="MultiWidgetsHeaderLabel">
            <param name="label" value="$INFO[Container($PARAM[id]).ListItem.Title]" />
            <param name="visible" value="!String.StartsWith(Container($PARAM[id]).ListItem.FolderPath,pvr://) + String.IsEqual(Container($PARAM[id]).ListItem.DBType,episode) + [$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]] + !Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(homemenu.clean.flix)" />
            <param name="id" value="$PARAM[id]" />
        </include>
        
        <include content="MultiWidgetsHeaderLabel">
            <param name="label" value="$INFO[Container($PARAM[id]).ListItem.TvShowTitle,, - ]$INFO[Container($PARAM[id]).ListItem.Title]" />
            <param name="visible" value="!String.StartsWith(Container($PARAM[id]).ListItem.FolderPath,pvr://) + String.IsEqual(Container($PARAM[id]).ListItem.DBType,episode) + [[$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]] + [Skin.HasSetting(homemenu.netflix) | Skin.HasSetting(homemenu.clean.flix)]]" />
            <param name="id" value="$PARAM[id]" />
        </include>

        <!-- All Other -->
        <include content="MultiWidgetsHeaderLabel">
            <param name="label" value="$INFO[Container($PARAM[id]).ListItem.Label]" />
            <param name="visible" value="!String.StartsWith(Container($PARAM[id]).ListItem.FolderPath,pvr://) + !String.IsEqual(Container($PARAM[id]).ListItem.DBType,episode) + String.IsEmpty(Container($PARAM[id]).ListItem.Property(Item))" />
            <param name="id" value="$PARAM[id]" />
        </include>

        <!-- GTO -->
        <include content="MultiWidgetsHeaderLabel">
            <param name="label" value="$INFO[Container($PARAM[id]).ListItem.Label2]$INFO[Container($PARAM[id]).ListItem.Property(StartTime), (,)]" />
            <param name="visible" value="!String.StartsWith(Container($PARAM[id]).ListItem.FolderPath,pvr://) + !String.IsEqual(Container($PARAM[id]).ListItem.DBType,episode) + !String.IsEmpty(Container($PARAM[id]).ListItem.Property(Item)) + !String.IsEmpty(Container($PARAM[id]).ListItem.Label2)" />
            <param name="id" value="$PARAM[id]" />
        </include>

        <!-- PVR -->
        <include content="MultiWidgetsHeaderLabel">
            <param name="label" value="$INFO[Container($PARAM[id]).ListItem.Title]" />
            <param name="visible" value="String.StartsWith(Container($PARAM[id]).ListItem.FolderPath,pvr://) + !String.IsEmpty(Container($PARAM[id]).ListItem.Title)" />
            <param name="id" value="$PARAM[id]" />
        </include>

        <include content="MultiWidgetsHeaderLabel">
            <param name="label" value="$INFO[Container($PARAM[id]).ListItem.Label]" />
            <param name="visible" value="String.StartsWith(Container($PARAM[id]).ListItem.FolderPath,pvr://) + String.IsEmpty(Container($PARAM[id]).ListItem.Title)" />
            <param name="id" value="$PARAM[id]" />
        </include>

    </include>

    <include name="MultiWidgetsPlotLabel">
        <control type="grouplist">
            <height min="$PARAM[plotminheight]" max="$PARAM[plotmaxheight]">auto</height>
            <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Property(Album_Description)) | !String.IsEmpty(Container($PARAM[id]).ListItem.Plot) | !String.IsEmpty(Container($PARAM[id]).ListItem.Property(Artist_Description)) | !String.IsEmpty(Container($PARAM[id]).ListItem.AddonDescription) | [!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Plot)) + String.IsEqual(Container($PARAM[id]).ListItem.DBType,song) + ControlGroup(301).HasFocus()] | String.IsEqual(Container($PARAM[id]).ListItem.DBType,actor) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,file)</visible>
            <include content="def_width" condition="Skin.HasSetting(homemenu.netflix)">
                <param name="width" value="100%" />
            </include>
            <include content="def_width" condition="$EXP[HomeIsVerticalMultiWidgets] + Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)">
                <param name="width" value="1242" />
            </include>
            <orientation>vertical</orientation>
            <itemgap>0</itemgap>

            <!-- Sets Movies Episodes No Netflix -->
            <control type="textbox">
                <include>MultiWidgetsPlotLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.Plot]</label>
                <visible>[[String.IsEqual(Container($PARAM[id]).ListItem.DBType,set) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,movie) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,episode) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,tvshow)] + !String.IsEmpty(Container($PARAM[id]).ListItem.Plot)] + !Skin.HasSetting(homemenu.netflix)</visible>
            </control>

            <!-- Sets Movie Episode Netflix No ClearArt Or Empty -->
            <control type="textbox">
                <include>MultiWidgetsPlotLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.Plot]</label>
                <visible>[[String.IsEqual(Container($PARAM[id]).ListItem.DBType,set) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,movie) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,episode) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,tvshow)] + !String.IsEmpty(Container($PARAM[id]).ListItem.Plot)] + Skin.HasSetting(homemenu.netflix) +  [!Skin.HasSetting(home.netflix.clearlogo) | [Skin.HasSetting(home.netflix.clearlogo) + String.IsEmpty(Container($PARAM[id]).ListItem.Art(clearlogo))]]</visible>
            </control>

            <!-- Sets Movies Episodes Netflix ClearArt -->
            <control type="textbox">
                <height min="36" max="140">auto</height>
                <include>MultiWidgetsPlotLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.Plot]</label>
                <visible>[[String.IsEqual(Container($PARAM[id]).ListItem.DBType,set) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,movie) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,episode) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,tvshow)] + !String.IsEmpty(Container($PARAM[id]).ListItem.Plot)] + Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.netflix.clearlogo) + !String.IsEmpty(Container($PARAM[id]).ListItem.Art(clearlogo))</visible>
            </control>

            <!-- Albums -->
            <control type="textbox">
                <include>MultiWidgetsPlotLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.Property(Album_Description)]</label>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,album) + !String.IsEmpty(Container($PARAM[id]).ListItem.Property(Album_Description))</visible>
            </control>

            <!-- Artists -->
            <control type="textbox">
                <include>MultiWidgetsPlotLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.Property(Artist_Description)]</label>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,artist) + !String.IsEmpty(Container($PARAM[id]).ListItem.Property(Artist_Description))</visible>
            </control>

            <!-- Songs SkinHelper -->
            <control type="textbox">
                <include>MultiWidgetsPlotLabelDefinition</include>
                <label fallback="19055">$INFO[Window(Home).Property(SkinHelper.ListItem.Plot)]</label>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,song) + ControlGroup(301).HasFocus()</visible>
            </control>

            <!-- Songs -->
            <control type="textbox">
                <include>MultiWidgetsPlotLabelDefinition</include>
                <label fallback="19055">$INFO[Container($PARAM[id]).ListItem.Property(Artist_Description)]</label>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,song) + !ControlGroup(301).HasFocus() + !String.IsEmpty(Container($PARAM[id]).ListItem.Property(Artist_Description))</visible>
            </control>

            <!-- Addons -->
            <control type="textbox">
                <include>MultiWidgetsPlotLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.AddonDescription]</label>
                <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.AddonDescription) + !String.IsEmpty(Container($PARAM[id]).ListItem.AddonDescription)</visible>
            </control>

            <!-- PVR -->
            <control type="textbox">
                <include>MultiWidgetsPlotLabelDefinition</include>
                <label fallback="19055">$INFO[Container($PARAM[id]).ListItem.Plot]</label>
                <visible>String.StartsWith(Container($PARAM[id]).ListItem.FolderPath,pvr://)</visible>
            </control>

            <!-- Actor -->
            <control type="textbox">
                <include>MultiWidgetsPlotLabelDefinition</include>
                <label fallback="19055">$INFO[Container(44422).ListItemAbsolute(0).Label,$ADDON[script.embuary.info 32017]: ]$INFO[Container(44422).ListItemAbsolute(1).Label,$COMMA ]$INFO[Container(44422).ListItemAbsolute(2).Label,$COMMA ]$INFO[Container(44422).ListItemAbsolute(3).Label,$COMMA ]$INFO[Container(44422).ListItemAbsolute(4).Label,$COMMA ]$INFO[Container(44422).ListItemAbsolute(5).Label,$COMMA ]</label>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,actor)</visible>
            </control>
            
            <!-- Files -->
            <control type="textbox">
                <include>MultiWidgetsPlotLabelDefinition</include>
                <label>19055</label>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,file)</visible>
            </control>

            <!-- Misc -->
            <control type="textbox">
                <include>MultiWidgetsPlotLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.Plot]</label>
                <visible>![[String.IsEqual(Container($PARAM[id]).ListItem.DBType,set) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,movie) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,episode) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,tvshow)] + !String.IsEmpty(Container($PARAM[id]).ListItem.Plot)] + ![String.IsEqual(Container($PARAM[id]).ListItem.DBType,album) + !String.IsEmpty(Container($PARAM[id]).ListItem.Property(Album_Description))] + ![String.IsEqual(Container($PARAM[id]).ListItem.DBType,artist) + !String.IsEmpty(Container($PARAM[id]).ListItem.Property(Artist_Description))] + ![String.IsEqual(Container($PARAM[id]).ListItem.DBType,song) + ControlGroup(301).HasFocus()] + ![String.IsEqual(Container($PARAM[id]).ListItem.DBType,song) + !ControlGroup(301).HasFocus() + !String.IsEmpty(Container($PARAM[id]).ListItem.Property(Artist_Description))]+ ![!String.IsEmpty(Container($PARAM[id]).ListItem.AddonDescription) + !String.IsEmpty(Container($PARAM[id]).ListItem.AddonDescription)] + ![String.StartsWith(Container($PARAM[id]).ListItem.FolderPath,pvr://)]</visible>
            </control>
        </control>
    </include>

    <include name="MultiWidgetsSubLabel">
        <control type="grouplist">
            <orientation>vertical</orientation>
            <itemgap>0</itemgap>
            
            <!-- Tv Shows -->
            <control type="grouplist">
                <itemgap>0</itemgap>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,tvshow)</visible>
                <orientation>horizontal</orientation>
                <height>36</height>
                <usecontrolcoords>true</usecontrolcoords>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Year,,  •  ]</label>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Year)</visible>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Episode,, $LOCALIZE[20360]]</label>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Episode)</visible>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Property(UnWatchedEpisodes),  •  , $LOCALIZE[16101]]</label>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Property(UnWatchedEpisodes))</visible>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.UserRating,  •  ,.0]$VAR[RtMclabel]</label>
                    <visible>Integer.IsGreater(Container($PARAM[id]).ListItem.UserRating,0) + Skin.HasSetting(userrating.override.rating)</visible>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Rating,  •  ]$VAR[RtMclabel]</label>
                    <visible>!Integer.IsGreater(Container($PARAM[id]).ListItem.UserRating,0) | !Skin.HasSetting(userrating.override.rating)</visible>
                </control>
                <include content="IndicatorTvShowsCleanHome" condition="!Skin.HasSetting(hide.markers) + Skin.HasSetting(homemenu.clean.flix)">
                    <param name="id" value="$PARAM[id]" />
                </include>
            </control>
            
            <!-- Movies -->
            <control type="grouplist">
                <itemgap>0</itemgap>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,movie)</visible>
                <orientation>horizontal</orientation>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Year,,  •  ]</label>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Year)</visible>
                </control>
                <control type="label" description="Duration">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Duration(mins)) + !Skin.HasSetting(NewTime)</visible>
                    <label>$INFO[Container($PARAM[id]).ListItem.Duration(mins),, $LOCALIZE[31102]]</label>
                </control>
                <control type="label" description="Duration">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Duration(mins)) + Skin.HasSetting(NewTime) + Integer.IsGreater(Container($PARAM[id]).ListItem.Duration(h),0)</visible>
                    <label>$INFO[Container($PARAM[id]).ListItem.Duration(h),,$LOCALIZE[31088]] $INFO[Container($PARAM[id]).ListItem.Duration(mm),,$LOCALIZE[31089]]</label>
                </control>
                <control type="label" description="Duration">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Duration(mins)) + Skin.HasSetting(NewTime) + !Integer.IsGreater(Container($PARAM[id]).ListItem.Duration(h),0)</visible>
                    <label>$INFO[Container($PARAM[id]).ListItem.Duration(m),,$LOCALIZE[31089]]</label>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.UserRating,  •  ,.0]$VAR[RtMclabel]</label>
                    <visible>Integer.IsGreater(Container($PARAM[id]).ListItem.UserRating,0) + Skin.HasSetting(userrating.override.rating)</visible>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Rating,  •  ]$VAR[RtMclabel]</label>
                    <visible>!Integer.IsGreater(Container($PARAM[id]).ListItem.UserRating,0) | !Skin.HasSetting(userrating.override.rating)</visible>
                </control>
                <include content="IndicatorMoviesCleanHome" condition="!Skin.HasSetting(hide.markers) + Skin.HasSetting(homemenu.clean.flix)">
                    <param name="id" value="$PARAM[id]" />
                </include>
            </control>
            
            <!-- Episodes -->
            <control type="grouplist">
                <itemgap>0</itemgap>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,episode)</visible>
                <orientation>horizontal</orientation>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.TvShowTitle,,  •  ]</label>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.TvShowTitle) + [$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]] + !Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(homemenu.clean.flix)</visible>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Season,$LOCALIZE[20373] ,  •  ]</label>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Season)</visible>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Episode,$LOCALIZE[20359] ,  •  ]</label>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Episode)</visible>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Premiered,,  •  ]</label>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Premiered)</visible>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Year,,  •  ]</label>
                    <visible>String.IsEmpty(Container($PARAM[id]).ListItem.Premiered) + !String.IsEmpty(Container($PARAM[id]).ListItem.Year)</visible>
                </control>
                <control type="label" description="Duration">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Duration(mins)) + !Skin.HasSetting(NewTime)</visible>
                    <label>$INFO[Container($PARAM[id]).ListItem.Duration(mins),, $LOCALIZE[31102]]</label>
                </control>
                <control type="label" description="Duration">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Duration(mins)) + Skin.HasSetting(NewTime) + Integer.IsGreater(Container($PARAM[id]).ListItem.Duration(h),0)</visible>
                    <label>$INFO[Container($PARAM[id]).ListItem.Duration(h),,$LOCALIZE[31088]] $INFO[Container($PARAM[id]).ListItem.Duration(mm),,$LOCALIZE[31089]]</label>
                </control>
                <control type="label" description="Duration">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Duration(mins)) + Skin.HasSetting(NewTime) + !Integer.IsGreater(Container($PARAM[id]).ListItem.Duration(h),0)</visible>
                    <label>$INFO[Container($PARAM[id]).ListItem.Duration(m),,$LOCALIZE[31089]]</label>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.UserRating,  •  ,.0]$VAR[RtMclabel]</label>
                    <visible>Integer.IsGreater(Container($PARAM[id]).ListItem.UserRating,0) + Skin.HasSetting(userrating.override.rating)</visible>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Rating,  •  ]$VAR[RtMclabel]</label>
                    <visible>!Integer.IsGreater(Container($PARAM[id]).ListItem.UserRating,0) | !Skin.HasSetting(userrating.override.rating)</visible>
                </control>
                <include content="IndicatorMoviesCleanHome" condition="!Skin.HasSetting(hide.markers) + Skin.HasSetting(homemenu.clean.flix)">
                    <param name="id" value="$PARAM[id]" />
                </include>
            </control>
            
            <!-- Sets -->
            <control type="label">
                <include>MultiWidgetsSubLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.Year]$INFO[Container($PARAM[id]).ListItem.Rating,  •  ] $INFO[Control.GetLabel(9966)]</label>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,set)</visible>
            </control>
            
            <!-- Albums -->
            <control type="grouplist">
                <itemgap>0</itemgap>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,album)</visible>
                <orientation>horizontal</orientation>
                <height>36</height>
                <usecontrolcoords>true</usecontrolcoords>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Year]</label>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>  •  </label>
                    <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.Year) + !String.IsEmpty(Container($PARAM[id]).ListItem.Artist)</visible>
                </control>
                <control type="label">
                    <include>MultiWidgetsSubLabelDefinition</include>
                    <label>$INFO[Container($PARAM[id]).ListItem.Artist] $INFO[Control.GetLabel(9967)]</label>
                </control>
            </control>
            
            <!-- Artists -->
            <control type="label">
                <include>MultiWidgetsSubLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.Property(Artist_Style)]</label>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,artist) + !String.IsEmpty(Container($PARAM[id]).ListItem.Property(Artist_Style))</visible>
            </control>
            <control type="label">
                <include>MultiWidgetsSubLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.Genre]</label>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,artist) + String.IsEmpty(Container($PARAM[id]).ListItem.Property(Artist_Style))</visible>
            </control>
            
            <!-- Songs -->
            <control type="label">
                <include>MultiWidgetsSubLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.Artist]$INFO[Container($PARAM[id]).ListItem.Year,  •  ,]</label>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,song)</visible>
            </control>
            
            <!-- Addons -->
            <control type="label">
                <include>MultiWidgetsSubLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.AddonVersion,v]</label>
                <visible>!String.IsEmpty(Container($PARAM[id]).ListItem.AddonDescription)</visible>
            </control>
            
            <!-- PVR -->
            <control type="label">
                <include>MultiWidgetsSubLabelDefinition</include>
                <label>$INFO[Container($PARAM[id]).ListItem.Label]$INFO[Container($PARAM[id]).ListItem.StartTime,  •  ,]$INFO[Container($PARAM[id]).ListItem.EndTime, - ]$INFO[Container($PARAM[id]).ListItem.Duration(mins),  •  , $LOCALIZE[31102]]</label>
                <visible>String.StartsWith(Container($PARAM[id]).ListItem.FolderPath,pvr://)</visible>
            </control>
        </control>
    </include>

    <include name="ClearArtInfoSub">
        <top>-226</top>
        <width>400</width>
        <right>SidePad</right>
        <visible>!Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.multiwidgets.hideclearart) + [![$EXP[HomeIsVerticalMultiWidgets] + Skin.HasSetting(homemenu.vertical.noslide)] | [$EXP[HomeIsVerticalMultiWidgets] + Skin.HasSetting(homemenu.vertical.noslide) + Skin.HasSetting(home.showicons) + Skin.HasSetting(homemenu.only.icons)]]</visible>

        <!-- Artists -->
        <control type="image" description="clearlogo">
            <include>ClearLogoHomeImageContainer</include>
            <texture background="true">$INFO[Container($PARAM[id]).ListItem.Art(clearart)]</texture>
            <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,artist)</visible>
        </control>

        <!-- Albums and Songs -->
        <control type="image" description="clearlogo">
            <include>ClearLogoHomeImageContainer</include>
            <texture background="true">$INFO[Container($PARAM[id]).ListItem.Art(artist.clearart)]</texture>
            <visible>String.IsEqual(Container($PARAM[id]).ListItem.DBType,album) | String.IsEqual(Container($PARAM[id]).ListItem.DBType,song)</visible>
        </control>

        <!-- All Other -->
        <control type="image" description="clearlogo">
            <include>ClearLogoHomeImageContainer</include>
            <texture background="true">$INFO[Container($PARAM[id]).ListItem.Art(clearart)]</texture>
            <visible>!String.IsEqual(Container($PARAM[id]).ListItem.DBType,artist) + !String.IsEqual(Container($PARAM[id]).ListItem.DBType,album) + !String.IsEqual(Container($PARAM[id]).ListItem.DBType,song)</visible>
        </control>
    </include>

    <include name="WidgetsNavigationArrows">
        <control type="group">
            <include>Animation.DelayFadeIn600</include>
            <include>Animation.FadeOut</include>
            <include condition="!Skin.HasSetting(widgets.fade)">Animation.Vertical.Widgets.Label</include>
            <animation effect="slide" start="0" end="0,260" time="0" condition="Skin.HasSetting(homemenu.clean.flix) + [Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)] + Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="0,5" time="0" condition="Skin.HasSetting(homemenu.clean.flix) + Skin.HasSetting(submenu.compatibility) + Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="0,286" time="0" condition="Skin.HasSetting(homemenu.clean.flix) + ![Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)] + Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="0,472" time="0" condition="Skin.HasSetting(homemenu.clean.flix) + [Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)] + !Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="0,-26" time="0" condition="Skin.HasSetting(homemenu.clean.flix) + Skin.HasSetting(submenu.compatibility) + !Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="0,448" time="0" condition="Skin.HasSetting(homemenu.clean.flix) + ![Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)] + !Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="0,-24" time="0" condition="Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets) + Skin.HasSetting(home.oldmenuheight)">Conditional</animation>
            <visible>Integer.IsGreater(Container(301).NumItems,1) + ControlGroup(301).HasFocus()</visible>
            <visible>![Window.IsVisible(DialogVideoInfo.xml) | Window.IsVisible(DialogMusicInfo.xml) | Window.IsVisible(DialogPVRInfo.xml) | Window.IsVisible(DialogAddonInfo.xml) | Window.IsVisible(skin.arctic.zephyr.mod.script-gto-info.xml)]</visible>
            <control type="group">
                <top>538</top>
                <visible>Container(301).HasNext</visible>
                <include>Animation.DelayFadeIn300</include>
                <include>Animation.FadeOut</include>
                <control type="image">
                    <top>0</top>
                    <right>SidePad</right>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2">common/arrow-small.png</texture>
                </control>
            </control>
            <control type="group">
                <top>538</top>
                <visible>!Container(301).HasNext</visible>
                <include>Animation.DelayFadeIn300</include>
                <include>Animation.FadeOut</include>
                <control type="image">
                    <top>0</top>
                    <right>SidePad</right>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2" flipy="true">common/arrow-small.png</texture>
                </control>
            </control>
            <control type="group">
                <top>512</top>
                <visible>Container(301).HasPrevious</visible>
                <include>Animation.DelayFadeIn300</include>
                <include>Animation.FadeOut</include>
                <control type="image">
                    <top>13</top>
                    <right>SidePad</right>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2" flipy="true">common/arrow-small.png</texture>
                </control>
            </control>
            <control type="group">
                <top>512</top>
                <visible>!Container(301).HasPrevious</visible>
                <include>Animation.DelayFadeIn300</include>
                <include>Animation.FadeOut</include>
                <control type="image">
                    <top>13</top>
                    <right>SidePad</right>
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2" flipy="false">common/arrow-small.png</texture>
                </control>
            </control>
        </control>
    </include>

    <include name="WidgetsItemsCount">
        <control type="group">
            <include>Animation.DelayFadeIn600</include>
            <include>Animation.FadeOut</include>
            <include condition="!Skin.HasSetting(widgets.fade)">Animation.Vertical.Widgets.Label</include>
            <animation effect="slide" start="0" end="0,260" time="0" condition="[Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)] + Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="0,5" time="0" condition="Skin.HasSetting(submenu.compatibility) + Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="0,286" time="0" condition="![Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)] + Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="0,472" time="0" condition="[Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)] + !Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="0,-26" time="0" condition="Skin.HasSetting(submenu.compatibility) + !Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="0,448" time="0" condition="![Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)] + !Skin.HasSetting(homemenu.clean.flix.no.slide)">Conditional</animation>
            <animation effect="slide" start="0" end="30,0" time="0" condition="Integer.IsEqual(Container(301).NumItems,1)">Conditional</animation>
            <visible>Skin.HasSetting(homemenu.clean.flix)</visible>
            <visible>![Window.IsVisible(DialogVideoInfo.xml) | Window.IsVisible(DialogMusicInfo.xml) | Window.IsVisible(DialogPVRInfo.xml) | Window.IsVisible(DialogAddonInfo.xml) | Window.IsVisible(skin.arctic.zephyr.mod.script-gto-info.xml)] + !Control.HasFocus(300) + !Control.HasFocus(302)</visible>
            <control type="label">
                <include>Animation.DelayFadeIn300</include>
                <align>right</align>
                <right>110</right>
                <top>503</top>
                <font>SmallNavi</font>
                <width>250</width>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Window(home).Property(ContainerPosition)]</label>
            </control>
        </control>
    </include>

    <include name="HomeWidgetVerticalFlags">
        <control type="group">
            <animation effect="slide" start="0" end="40,0" time="0" condition="Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)">Conditional</animation>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <include>Furniture_Flags</include>
            <include>Furniture_Flags_Audio</include>
        </control>
    </include>
</includes>
