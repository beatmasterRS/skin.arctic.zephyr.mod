<?xml version="1.0" encoding="UTF-8"?>
<!-- Foundation -->
<includes>
    <include file="Defaults.xml"/>
    <include file="Includes_VideoLyrics.xml"/>
    <include file="Includes_Lyrics.xml"/>
    <include file="Includes_Lists.xml"/>
    <include file="Includes_DialogVideoInfo.xml"/>
    <include file="Includes_DialogMusicInfo.xml"/>
    <include file="Includes_DialogAddonInfo.xml"/>
    <include file="Includes_DialogPVRInfo.xml"/>
    <include file="Includes_SubItems_Home.xml"/>
    <include file="Includes_NowPlaying.xml"/>
    <include file="Includes_Custom_Items.xml"/>

    <!-- Views -->
    <include file="View_50_List.xml"/>
    <include file="View_51_BigWide.xml"/>
    <include file="View_52_BigList.xml"/>
    <include file="View_53_Poster.xml"/>
    <include file="View_54_Banner.xml"/>
    <include file="View_55_Wall.xml"/>
    <include file="View_515_SideCards.xml"/>
    <include file="View_56_MediaInfo.xml"/>
    <include file="View_57_ExtraInfo.xml"/>
    <include file="View_58_Cards.xml"/>
    <include file="View_59_BannerWall.xml"/>
    <include file="View_500_Thumbnails.xml"/>
    <include file="View_503_Poster_Square.xml"/>
    <include file="View_505_Wall_Square.xml"/>
    <include file="View_501_Modern_Fanart.xml"/>
    <include file="View_504_Netflix.xml"/>
    <include file="View_507_Fanart.xml"/>
    <include file="View_509_Shift.xml"/>
    <include file="View_513_Shifted.xml"/>
    <include file="View_510_Minimal.xml"/>
    <include file="View_520_Minimal.xml"/>
    <include file="View_511_Double.xml"/>
    <include file="View_512_Double_Banner.xml"/>
    <include file="View_506_Slider.xml"/>
    <include file="View_514_Albums.xml"/>
    <include file="View_517_WallSmall.xml"/>
    <include file="View_516_SeasonsInfo.xml"/>
    <include file="View_526_SeasonsInfo_V2.xml"/>
    <include file="View_519_Shift_Modern.xml"/>
    <include file="View_521_Minimal_V2.xml"/>
    <include file="View_523_Minimal_V2_Music.xml"/>
    <include file="View_522_Minimal_V2_Episodes.xml"/>
    <include file="View_524_Minimal_V2_Seasons.xml"/>
    <include file="View_527_List_V2.xml"/>
    <include file="Includes_Furniture.xml"/>
    <include file="Includes_Home.xml"/>
    <include file="Includes_Labels.xml"/>
    <include file="Includes_Images.xml"/>
    <include file="Includes_Animations.xml"/>
    <include file="Includes_Defs.xml"/>
    <include file="Includes_PVR.xml"/>
    <include file="Includes_OSD.xml"/>

    <!-- Skin Shortcuts -->
    <include file="script-skinshortcuts-includes.xml"/>

    <!-- Expressions -->
    <expression name="HomeIsModernMultiWidgets">!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets)</expression>
    <expression name="HomeIsVerticalMultiWidgets">Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)</expression>
    <expression name="HomeIsModernMultiWidgetsNetflix">!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets) + Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(homemenu.clean.flix)</expression>
    <expression name="HomeIsVerticalMultiWidgetsNetflix">Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets) + Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(homemenu.clean.flix)</expression>
    <expression name="HomeIsCleanMinimal">Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets) + Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(homemenu.clean.flix)</expression>
    <expression name="HomeIsVerticalAll">Skin.HasSetting(home.vertical)</expression>
    <expression name="HomeIsClassic">!Skin.HasSetting(home.vertical) + Skin.HasSetting(home.classicwidgets)</expression>
    <expression name="HomeIsVertical">Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.vertical.widgets)</expression>
    <expression name="HomeIsSpotlight">!Skin.HasSetting(home.classicwidgets) + !Skin.HasSetting(home.vertical) + !Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.modernwidgets)</expression>
    <expression name="HomeIsModern">Skin.HasSetting(home.modernwidgets) + !Skin.HasSetting(home.vertical.widgets) + !Skin.HasSetting(homemenu.netflix)</expression>
    <expression name="IsYoutube">String.Contains(Container.FolderPath,plugin://plugin.video.youtube)</expression>
    <expression name="Widget1Enabled">String.IsEqual(Container(300).ListItem.Property(widgetEnable),yes)</expression>
    <expression name="Widget2Enabled">String.IsEqual(Container(300).ListItem.Property(widgetEnable.2),yes)</expression>
    <expression name="Widget3Enabled">String.IsEqual(Container(300).ListItem.Property(widgetEnable.3),yes)</expression>
    <expression name="Widget4Enabled">String.IsEqual(Container(300).ListItem.Property(widgetEnable.4),yes)</expression>
    <expression name="Widget5Enabled">String.IsEqual(Container(300).ListItem.Property(widgetEnable.5),yes)</expression>
    <expression name="Widget6Enabled">String.IsEqual(Container(300).ListItem.Property(widgetEnable.6),yes)</expression>
    <expression name="HasHomemenuAutoSlideOutAnimation">Skin.HasSetting(homemenu.slide) + !Skin.HasSetting(only.hide.if.widgetcontainer.gets.focus) + [[$EXP[HomeIsModernMultiWidgets] + !Skin.HasSetting(homemenu.clean.flix)] | [$EXP[HomeIsVerticalMultiWidgets] + !Skin.HasSetting(homemenu.vertical.noslide)]]</expression>
    
    <expression name="IsPVRVideo">!Player.HasAudio + VideoPlayer.Content(livetv)</expression>
    <expression name="IsPVRAudio">Player.HasAudio + VideoPlayer.Content(livetv)</expression>
    <expression name="IsAudio">Player.HasAudio + !VideoPlayer.Content(livetv)</expression>
    <expression name="IsVideo">Player.HasVideo + !VideoPlayer.Content(livetv)</expression>
    <expression name="TrailerWindowIsActive">Skin.HasSetting(home.netflix.autoplay.trailer) + [[Window.IsVisible(Home.xml) + [$EXP[HomeIsModernMultiWidgetsNetflix] | $EXP[HomeIsCleanMinimal] | $EXP[HomeIsVerticalMultiWidgetsNetflix]]] | Control.IsVisible(521) | Control.IsVisible(522) | Control.IsVisible(510)] + !Window.IsVisible(DialogVideoInfo.xml) + String.IsEqual(Window(home).Property(TrailerPath2),Player.FileNameAndPath) + !String.IsEmpty(Player.FileNameAndPath)</expression>
    <expression name="TrailerIsReady">Skin.HasSetting(home.netflix.autoplay.trailer) + [Window.IsVisible(Home.xml) | Window.IsVisible(MyVideoNav.xml)] + !Control.HasFocus(300) + !Player.HasMedia + !String.IsEmpty(Window(home).Property(listitem.trailer)) + !System.HasVisibleModalDialog + !Window.IsVisible(script-globalsearch.xml) + !String.IsEqual(Window(home).Property(TrailerPath),Window(home).Property(listitem.trailer)) + !System.IdleTime(30)</expression>
    <expression name="TrailerWaitingForPlayer">!String.IsEmpty(Window(home).Property(TrailerPath2)) + !String.IsEmpty(Window(home).Property(TrailerPath)) + String.IsEmpty(Player.FileNameAndPath)</expression>
    <expression name="TrailerIsPlaying">String.IsEqual(Window(home).Property(TrailerPath2),Player.FileNameAndPath) + !String.IsEmpty(Player.FileNameAndPath)</expression>
    <expression name="AutoTrailerDebugging">Skin.HasSetting(home.netflix.autoplay.trailer) + Skin.HasSetting(DebugInfo.extended) + Skin.HasSetting(DebugInfo.extended)</expression>
    <expression name="ExtendedNowPlayingIsVisible">[Skin.HasSetting(extended.nowplaying) + Window.IsVisible(Home) + Player.HasMedia] + [[!ControlGroup(301).HasFocus() + !Control.HasFocus(8888) + !Control.HasFocus(4567)] | ControlGroup(777).HasFocus()]</expression>
    <expression name="TitleClearlogoAvailable">[!String.IsEmpty(ListItem.Art(clearlogo)) | !String.IsEmpty(ListItem.Art(artist.clearlogo)) | !String.IsEmpty(ListItem.Art(tvshow.clearlogo))] + !Container.Content(episodes) + !Container.Content(seasons)</expression>
    <expression name="IsAudioCodecATMOS">
        String.Contains(ListItem.FileNameAndPath,.atmos.) | String.Contains(ListItem.FileNameAndPath,.atmos-) | String.Contains(ListItem.FileNameAndPath,dolby atmos) | String.Contains(ListItem.FileNameAndPath,dolby-atmos)
        | [VideoPlayer.IsFullscreen + [String.Contains(Player.FileNameAndPath,.atmos.) | String.Contains(Player.FileNameAndPath,.atmos-) | String.Contains(Player.FileNameAndPath,dolby atmos) | String.Contains(Player.FileNameAndPath,dolby-atmos)]]
    </expression>
    <expression name="IsAudioCodecDTSX">
        String.Contains(ListItem.FileNameAndPath,.dts-x.) | String.Contains(ListItem.FileNameAndPath,.dts.x.) | String.Contains(ListItem.FileNameAndPath,.dtsx.) | String.Contains(ListItem.FileNameAndPath,.dts-x-) | String.Contains(ListItem.FileNameAndPath,.dts.x-) | String.Contains(ListItem.FileNameAndPath,.dtsx-)
        | [VideoPlayer.IsFullscreen + [String.Contains(Player.FileNameAndPath,.dts-x.) | String.Contains(Player.FileNameAndPath,.dts.x.) | String.Contains(Player.FileNameAndPath,.dtsx.) | String.Contains(Player.FileNameAndPath,.dts-x-) | String.Contains(Player.FileNameAndPath,.dts.x-) | String.Contains(Player.FileNameAndPath,.dtsx-)]]
    </expression>
    <expression name="IsVideoHDR10Plus">
        String.Contains(ListItem.FileNameAndPath,.hdr10plus.)
        | [VideoPlayer.IsFullscreen + String.Contains(Player.FileNameAndPath,.hdr10plus.)]
    </expression>
    <expression name="IsVideoHDR10">
        String.Contains(ListItem.FileNameAndPath,.hdr10.)
        | [VideoPlayer.IsFullscreen + String.Contains(Player.FileNameAndPath,.hdr10.)]
    </expression>
    <expression name="IsVideoHDR">
        String.Contains(ListItem.FileNameAndPath,.hdr.)
        | [VideoPlayer.IsFullscreen + String.Contains(Player.FileNameAndPath,.hdr.)]
    </expression>
    <expression name="IsVideoHLG">
        String.Contains(ListItem.FileNameAndPath,.hlg.)
        | [VideoPlayer.IsFullscreen + String.Contains(Player.FileNameAndPath,.hlg.)]
    </expression>
    <expression name="IsVideoDolbyVision">
        String.Contains(ListItem.FileNameAndPath,.dv.) | String.Contains(ListItem.FileNameAndPath,dolbyvision) | String.Contains(ListItem.FileNameAndPath,dolby-vision) | String.Contains(ListItem.FileNameAndPath,dolby vision)
        | [VideoPlayer.IsFullscreen + [String.Contains(Player.FileNameAndPath,.dv.) | String.Contains(Player.FileNameAndPath,dolbyvision) | String.Contains(Player.FileNameAndPath,dolby-vision) | String.Contains(Player.FileNameAndPath,dolby vision)]]
    </expression>
    <expression name="HasNextAired">
        [Container.Content(tvshows) | Container.Content(seasons) | String.IsEqual(ListItem.DBTYPE,tvshow) | String.IsEqual(ListItem.DBTYPE,season)]
        + [!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Next_Aired)) | !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Last_Aired))]
    </expression>
    <expression name="IsNewMovie">
        [Container.Content(movies) | Window.isVisible(Home.xml)]
        + [
            String.IsEqual(Window(Home).Property(LatestMovie.1.Title),ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.2.Title),ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.3.Title),ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.4.Title),ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.5.Title),ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.6.Title),ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.7.Title),ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.8.Title),ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.9.Title),ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.10.Title),ListItem.Label)
          ]
    </expression>
    <expression name="IsNewTVShow">
        [Container.Content(tvshows) | Window.isVisible(Home.xml)]
        + [
            String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)
          ]
    </expression>
    <expression name="IsNewEpisode">
        [Container.Content(episodes) | Window.isVisible(Home.xml)]
        + [
            String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)
          ]
    </expression>
    
    <expression name="IsNewMovie301">
        [Container.Content(movies) | Window.isVisible(Home.xml)]
        + [
            String.IsEqual(Window(Home).Property(LatestMovie.1.Title),Container(301).ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.2.Title),Container(301).ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.3.Title),Container(301).ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.4.Title),Container(301).ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.5.Title),Container(301).ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.6.Title),Container(301).ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.7.Title),Container(301).ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.8.Title),Container(301).ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.9.Title),Container(301).ListItem.Label)
            | String.IsEqual(Window(Home).Property(LatestMovie.10.Title),Container(301).ListItem.Label)
          ]
    </expression>
    <expression name="IsNewTVShow301">
        [Container.Content(tvshows) | Window.isVisible(Home.xml)]
        + [
            String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),Container(301).ListItem.TvShowTitle)
          ]
    </expression>
    <expression name="IsNewEpisode301">
        [Container.Content(episodes) | Window.isVisible(Home.xml)]
        + [
            String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeTitle),Container(301).ListItem.Title)
          ]
    </expression>

    <include name="ScrolltimeDetailsList">
        <scrolltime tween="quadratic">300</scrolltime>
    </include>

    <include name="ScrolltimeWidgetsList">
        <scrolltime tween="quadratic">300</scrolltime>
    </include>

    <include name="ScrolltimeWidgetsContainer">
        <scrolltime tween="sine" easing="inout">350</scrolltime>
    </include>

    <include name="ScrolltimeViewsList">
        <scrolltime tween="quadratic">350</scrolltime>
    </include>

    <include name="FontTop">
        <font>Medium</font>
    </include>

    <include name="HiddenButton">
        <posx>-20</posx>
        <posy>-20</posy>
        <width>1</width>
        <height>1</height>
        <label />
        <texturenofocus/>
        <texturefocus/>
    </include>

    <include name="HiddenListControl">
        <top>-3000</top>
        <left>-3000</left>
        <width>1</width>
        <height>1</height>
        <itemlayout/>
        <focusedlayout/>
    </include>

    <include name="Dimensions_Fullscreen">
        <posx>0</posx>
        <posy>0</posy>
        <width>1920</width>
        <height>1080</height>
    </include>

    <include name="GlobalOverlay">
        <control type="image">
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <include>Dimensions_Fullscreen</include>
            <texture border="2">common/black-back.png</texture>
        </control>
    </include>

    <variable name="RatingFlagVarInfo">
        <value condition="String.Contains(ListItem.mpaa,US:G) | String.Contains(ListItem.mpaa,USA:G) | String.Contains(ListItem.mpaa,Rated G)">flags2/rating/info/mpaa_g_certificate_us.png</value>
        <value condition="String.Contains(ListItem.mpaa,PG-13)">flags2/rating/info/mpaa_pg-13_certificate_us.png</value>
        <value condition="String.Contains(ListItem.mpaa,Rated PG) | String.IsEqual(ListItem.Mpaa,PG)">flags2/rating/info/mpaa_pg_certificate_us.png</value>
        <value condition="String.Contains(ListItem.mpaa,Rated NR) | String.IsEqual(ListItem.mpaa,Not Rated)">flags2/rating/info/mpaa_nr_certificate_us.png</value>
        <value condition="String.Contains(ListItem.mpaa,US:R) | String.Contains(ListItem.mpaa,USA:R) | String.Contains(ListItem.mpaa,Rated R) | String.IsEqual(ListItem.mpaa,R)">flags2/rating/info/mpaa_r_certificate_us.png</value>
        <value condition="String.Contains(ListItem.mpaa,US:NC-17)| String.Contains(ListItem.mpaa,USA:NC-17)| String.Contains(ListItem.mpaa,Rated NC-17)">flags2/rating/info/mpaa_nc-17_certificate_us.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:U) | String.Contains(ListItem.mpaa,United Kingdom:U)">flags2/rating/info/bbfc_u_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:PG) | String.Contains(ListItem.mpaa,United Kingdom:PG)">flags2/rating/info/bbfc_pg_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:12A) | String.Contains(ListItem.mpaa,United Kingdom:12A)">flags2/rating/info/bbfc_12a_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:12) | String.Contains(ListItem.mpaa,United Kingdom:12)">flags2/rating/info/bbfc_12_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:15) | String.Contains(ListItem.mpaa,United Kingdom:15)">flags2/rating/info/bbfc_15_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:18) | String.Contains(ListItem.mpaa,United Kingdom:18)">flags2/rating/info/bbfc_18_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-Y) | String.Contains(ListItem.MPAA,United States:TV-Y) | String.Contains(ListItem.MPAA,USA:TV-Y) | String.IsEqual(ListItem.MPAA,Rated TV-Y) | String.IsEqual(ListItem.MPAA,TV-Y)">flags/mpaa/tv-y.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-Y7) | String.Contains(ListItem.MPAA,United States:TV-Y7) | String.Contains(ListItem.MPAA,USA:TV-Y7) | String.IsEqual(ListItem.MPAA,Rated TV-Y7) | String.IsEqual(ListItem.MPAA,TV-Y7)">flags/mpaa/tv-y7.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-G) | String.Contains(ListItem.MPAA,United States:TV-G) | String.Contains(ListItem.MPAA,USA:TV-G) | String.IsEqual(ListItem.MPAA,Rated TV-G) | String.IsEqual(ListItem.MPAA,TV-G)">flags/mpaa/tv-g.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-PG) | String.Contains(ListItem.MPAA,United States:TV-PG) | String.Contains(ListItem.MPAA,USA:TV-PG) | String.IsEqual(ListItem.MPAA,Rated TV-PG) | String.IsEqual(ListItem.MPAA,TV-PG)">flags/mpaa/tv-pg.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-14) | String.Contains(ListItem.MPAA,United States:TV-14) | String.Contains(ListItem.MPAA,USA:TV-14) | String.IsEqual(ListItem.MPAA,Rated TV-14) | String.IsEqual(ListItem.MPAA,TV-14)">flags/mpaa/tv-14.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-MA) | String.Contains(ListItem.MPAA,United States:TV-MA) | String.Contains(ListItem.MPAA,USA:TV-MA) | String.IsEqual(ListItem.MPAA,Rated TV-MA) | String.IsEqual(ListItem.MPAA,TV-MA)">flags/mpaa/tv-ma.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:0) | String.Contains(ListItem.mpaa,ab 0) | String.Contains(ListItem.mpaa,FSK0) | String.Contains(ListItem.mpaa,FSK 0) | String.Contains(ListItem.mpaa,de/0) | String.Contains(ListItem.mpaa,Rated 0)">flags2/rating/info/fsk-0.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:16) | String.Contains(ListItem.mpaa,ab 16) | String.Contains(ListItem.mpaa,FSK16) | String.Contains(ListItem.mpaa,FSK 16) | String.Contains(ListItem.mpaa,de/16) | String.Contains(ListItem.mpaa,Rated 16)">flags2/rating/info/fsk-16.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:6)| String.Contains(ListItem.mpaa,ab 6) | String.Contains(ListItem.mpaa,FSK6) | String.Contains(ListItem.mpaa,FSK 6) | String.Contains(ListItem.mpaa,de/6) | String.Contains(ListItem.mpaa,Rated 6)">flags2/rating/info/fsk-6.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:12) | String.Contains(ListItem.mpaa,ab 12) | String.Contains(ListItem.mpaa,FSK12) | String.Contains(ListItem.mpaa,FSK 12) | String.Contains(ListItem.mpaa,de/12) | String.Contains(ListItem.mpaa,Rated 12)">flags2/rating/info/fsk-12.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:18) | String.Contains(ListItem.mpaa,ab 18) | String.Contains(ListItem.mpaa,FSK18) | String.Contains(ListItem.mpaa,FSK 18) | String.Contains(ListItem.mpaa,de/18) | String.Contains(ListItem.mpaa,Rated 18)">flags2/rating/info/fsk-18.png</value>
        <value condition="String.Contains(ListItem.mpaa,besorolás alatt)">flags2/rating/info/hu_ba.png</value>
        <value condition="String.Contains(ListItem.mpaa,korhatárra való tekintett nélkül megtekintetheto)">flags2/rating/info/hu_kn.png</value>
        <value condition="String.Contains(ListItem.mpaa,12 éven aluliak számára a megtekintése nagykorú felügyelete mellett ajánlott)">flags2/rating/info/hu_12.png</value>
        <value condition="String.Contains(ListItem.mpaa,16 éven aluliak számára nem ajánlott)">flags2/rating/info/hu_16.png</value>
        <value condition="String.Contains(ListItem.mpaa,18 éven aluliak számára nem ajánlott)">flags2/rating/info/hu_18.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:U) | String.Contains(ListItem.mpaa,France:U) | String.Contains(ListItem.mpaa,Tout public) | String.Contains(ListItem.mpaa,Tous public)">flags2/rating/info/csau.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:10) | String.Contains(ListItem.mpaa,France:10) | String.Contains(ListItem.mpaa,France:-10) | String.Contains(ListItem.mpaa,Interdit aux moins de 10 ans) | String.Contains(ListItem.mpaa,des propos ou des images peuvent heurter)">flags2/rating/info/csa10.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:12) | String.Contains(ListItem.mpaa,France:12) | String.Contains(ListItem.mpaa,France:-12) | String.Contains(ListItem.mpaa,Interdit aux moins de 12 ans)">flags2/rating/info/csa12.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:16) | String.Contains(ListItem.mpaa,France:16) | String.Contains(ListItem.mpaa,France:-16) | String.Contains(ListItem.mpaa,Interdit aux moins de 16 ans)">flags2/rating/info/csa16.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:18) | String.Contains(ListItem.mpaa,France:18) | String.Contains(ListItem.mpaa,France:-18) | String.Contains(ListItem.mpaa,Interdit aux moins de 18 ans)">flags2/rating/info/csa18.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:Livre) | String.Contains(ListItem.mpaa,Livre)">flags2/rating/info/mpaa_brazil_livre.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:10) | String.Contains(ListItem.mpaa,10 anos)">flags2/rating/info/mpaa_brazil_10.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:12) | String.Contains(ListItem.mpaa,12 anos)">flags2/rating/info/mpaa_brazil_12.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:14) | String.Contains(ListItem.mpaa,14 anos)">flags2/rating/info/mpaa_brazil_14.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:16) | String.Contains(ListItem.mpaa,16 anos)">flags2/rating/info/mpaa_brazil_16.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:18) | String.Contains(ListItem.mpaa,18 anos)">flags2/rating/info/mpaa_brazil_18.png</value>
        <value condition="String.Contains(ListItem.mpaa,전체) | String.Contains(ListItem.mpaa,0) | String.Contains(ListItem.mpaa,ALL)">flags2/rating/info/kr_certificate_all.png</value>
        <value condition="String.Contains(ListItem.mpaa,12) | String.Contains(ListItem.mpaa,12세)">flags2/rating/info/kr_certificate_12.png</value>
        <value condition="String.Contains(ListItem.mpaa,15) | String.Contains(ListItem.mpaa,15세)">flags2/rating/info/kr_certificate_15.png</value>
        <value condition="String.Contains(ListItem.mpaa,18세) | String.Contains(ListItem.mpaa,불가)  | String.Contains(ListItem.mpaa,19) | String.Contains(ListItem.mpaa,청불) | String.Contains(ListItem.mpaa,18)">flags2/rating/info/kr_certificate_18.png</value>
        <value condition="String.Contains(ListItem.mpaa,제한)">flags2/rating/info/kr_certificate_r.png</value>
        <value>$INFO[ListItem.MPAA,flags2/rating/info/,.png]</value>
    </variable>

    <variable name="RatingFlagVar">
        <value condition="String.Contains(ListItem.mpaa,US:NC-17)| String.Contains(ListItem.mpaa,USA:NC-17)| String.Contains(ListItem.mpaa,Rated NC-17)">flags/mpaa/nc-17.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:U) | String.Contains(ListItem.mpaa,United Kingdom:U)">flags/mpaa/bbfc_u_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:PG) | String.Contains(ListItem.mpaa,United Kingdom:PG)">flags/mpaa/bbfc_pg_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:12A) | String.Contains(ListItem.mpaa,United Kingdom:12A)">flags/mpaa/bbfc_12a_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:12) | String.Contains(ListItem.mpaa,United Kingdom:12)">flags/mpaa/bbfc_12_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:15) | String.Contains(ListItem.mpaa,United Kingdom:15)">flags/mpaa/bbfc_15_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:18) | String.Contains(ListItem.mpaa,United Kingdom:18)">flags/mpaa/bbfc_18_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-Y) | String.Contains(ListItem.MPAA,United States:TV-Y) | String.Contains(ListItem.MPAA,USA:TV-Y) | String.IsEqual(ListItem.MPAA,Rated TV-Y) | String.IsEqual(ListItem.MPAA,TV-Y)">flags/mpaa/tv-y.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-Y7) | String.Contains(ListItem.MPAA,United States:TV-Y7) | String.Contains(ListItem.MPAA,USA:TV-Y7) | String.IsEqual(ListItem.MPAA,Rated TV-Y7) | String.IsEqual(ListItem.MPAA,TV-Y7)">flags/mpaa/tv-y7.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-G) | String.Contains(ListItem.MPAA,United States:TV-G) | String.Contains(ListItem.MPAA,USA:TV-G) | String.IsEqual(ListItem.MPAA,Rated TV-G) | String.IsEqual(ListItem.MPAA,TV-G)">flags/mpaa/tv-g.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-PG) | String.Contains(ListItem.MPAA,United States:TV-PG) | String.Contains(ListItem.MPAA,USA:TV-PG) | String.IsEqual(ListItem.MPAA,Rated TV-PG) | String.IsEqual(ListItem.MPAA,TV-PG)">flags/mpaa/tv-pg.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-14) | String.Contains(ListItem.MPAA,United States:TV-14) | String.Contains(ListItem.MPAA,USA:TV-14) | String.IsEqual(ListItem.MPAA,Rated TV-14) | String.IsEqual(ListItem.MPAA,TV-14)">flags/mpaa/tv-14.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-MA) | String.Contains(ListItem.MPAA,United States:TV-MA) | String.Contains(ListItem.MPAA,USA:TV-MA) | String.IsEqual(ListItem.MPAA,Rated TV-MA) | String.IsEqual(ListItem.MPAA,TV-MA)">flags/mpaa/tv-ma.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:16) | String.Contains(ListItem.mpaa,ab 16) | String.Contains(ListItem.mpaa,FSK16) | String.Contains(ListItem.mpaa,FSK 16) | String.Contains(ListItem.mpaa,de/16) | String.Contains(ListItem.mpaa,Rated 16)">flags/mpaa/fsk-16.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:6)| String.Contains(ListItem.mpaa,ab 6) | String.Contains(ListItem.mpaa,FSK6) | String.Contains(ListItem.mpaa,FSK 6) | String.Contains(ListItem.mpaa,de/6) | String.Contains(ListItem.mpaa,Rated 6)">flags/mpaa/fsk-6.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:12) | String.Contains(ListItem.mpaa,ab 12) | String.Contains(ListItem.mpaa,FSK12) | String.Contains(ListItem.mpaa,FSK 12) | String.Contains(ListItem.mpaa,de/12) | String.Contains(ListItem.mpaa,Rated 12)">flags/mpaa/fsk-12.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:18) | String.Contains(ListItem.mpaa,ab 18) | String.Contains(ListItem.mpaa,FSK18) | String.Contains(ListItem.mpaa,FSK 18) | String.Contains(ListItem.mpaa,de/18) | String.Contains(ListItem.mpaa,Rated 18)">flags/mpaa/fsk-18.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany)|String.Contains(ListItem.mpaa,FSK)| String.Contains(ListItem.mpaa,o.A)| String.Contains(ListItem.mpaa,de/0) | String.Contains(ListItem.mpaa,Rated 0)">flags/mpaa/fsk-0.png</value>
        <value condition="String.Contains(ListItem.mpaa,US:G) | String.Contains(ListItem.mpaa,USA:G) | String.Contains(ListItem.mpaa,Rated G)">flags/mpaa/g.png</value>
        <value condition="String.Contains(ListItem.mpaa,PG-13)">flags/mpaa/pg-13.png</value>
        <value condition="String.Contains(ListItem.mpaa,Rated PG) | String.IsEqual(ListItem.Mpaa,PG)">flags/mpaa/pg.png</value>
        <value condition="String.Contains(ListItem.mpaa,US:NC-17) | String.Contains(ListItem.mpaa,USA:NC-17) | String.Contains(ListItem.mpaa,Rated NC-17) | String.IsEqual(ListItem.MPAA,NC-17)">flags/mpaa/nc-17.png</value>
        <value condition="String.Contains(ListItem.mpaa,Rated NR) | String.IsEqual(ListItem.mpaa,Not Rated)">flags/mpaa/nr.png</value>
        <value condition="String.Contains(ListItem.mpaa,US:R) | String.Contains(ListItem.mpaa,USA:R) | String.Contains(ListItem.mpaa,Rated R) | String.Contains(ListItem.mpaa,Rated) | String.IsEqual(ListItem.mpaa,R)">flags/mpaa/r.png</value>
        <value condition="String.Contains(ListItem.mpaa,besorolás alatt)">flags/mpaa/hu_ba.png</value>
        <value condition="String.Contains(ListItem.mpaa,korhatárra való tekintett nélkül megtekintetheto)">flags/mpaa/hu_kn.png</value>
        <value condition="String.Contains(ListItem.mpaa,12 éven aluliak számára a megtekintése nagykorú felügyelete mellett ajánlott)">flags/mpaa/hu_12.png</value>
        <value condition="String.Contains(ListItem.mpaa,16 éven aluliak számára nem ajánlott)">flags/mpaa/hu_16.png</value>
        <value condition="String.Contains(ListItem.mpaa,18 éven aluliak számára nem ajánlott)">flags/mpaa/hu_18.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:U) | String.Contains(ListItem.mpaa,France:U) | String.Contains(ListItem.mpaa,Tout public) | String.Contains(ListItem.mpaa,Tous public) | String.Contains(ListItem.mpaa,partir de 3 ans) | String.Contains(ListItem.mpaa,partir de 6 ans)">flags/mpaa/csau.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:10) | String.Contains(ListItem.mpaa,France:10) | String.Contains(ListItem.mpaa,France:-10) | String.Contains(ListItem.mpaa,Interdit aux moins de 10 ans) | String.Contains(ListItem.mpaa,des propos ou des images peuvent heurter)">flags/mpaa/csa10.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:12) | String.Contains(ListItem.mpaa,France:12) | String.Contains(ListItem.mpaa,France:-12) | String.Contains(ListItem.mpaa,Interdit aux moins de 12 ans)">flags/mpaa/csa12.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:16) | String.Contains(ListItem.mpaa,France:16) | String.Contains(ListItem.mpaa,France:-16) | String.Contains(ListItem.mpaa,Interdit aux moins de 16 ans)">flags/mpaa/csa16.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:18) | String.Contains(ListItem.mpaa,France:18) | String.Contains(ListItem.mpaa,France:-18) | String.Contains(ListItem.mpaa,Interdit aux moins de 18 ans)">flags/mpaa/csa18.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:Livre) | String.Contains(ListItem.mpaa,Livre)">flags/mpaa/mpaa_brazil_livre.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:10) | String.Contains(ListItem.mpaa,10 anos)">flags/mpaa/mpaa_brazil_10.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:12) | String.Contains(ListItem.mpaa,12 anos)">flags/mpaa/mpaa_brazil_12.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:14) | String.Contains(ListItem.mpaa,14 anos)">flags/mpaa/mpaa_brazil_14.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:16) | String.Contains(ListItem.mpaa,16 anos)">flags/mpaa/mpaa_brazil_16.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:18) | String.Contains(ListItem.mpaa,18 anos)">flags/mpaa/mpaa_brazil_18.png</value>
        <value condition="String.Contains(ListItem.MPAA,Australia:R) | String.Contains(ListItem.MPAA,Australia R)">flags/mpaa/australia_R.png</value>
        <value condition="String.Contains(ListItem.MPAA,Australia:MA) | String.Contains(ListItem.MPAA,Australia MA)">flags/mpaa/australia_MA.png</value>
        <value condition="String.Contains(ListItem.MPAA,Australia:M) | String.Contains(ListItem.MPAA,Australia M)">flags/mpaa/australia_M.png</value>
        <value condition="String.Contains(ListItem.MPAA,Australia:PG) | String.Contains(ListItem.MPAA,Australia PG)">flags/mpaa/australia_PG.png</value>
        <value condition="String.Contains(ListItem.MPAA,Australia:G) | String.Contains(ListItem.MPAA,Australia G)">flags/mpaa/australia_G.png</value>
        <value condition="String.Contains(ListItem.mpaa,전체) | String.Contains(ListItem.mpaa,0) | String.Contains(ListItem.mpaa,ALL)">flags/mpaa/kr_certificate_all.png</value>
        <value condition="String.Contains(ListItem.mpaa,12) | String.Contains(ListItem.mpaa,12세)">flags/mpaa/kr_certificate_12.png</value>
        <value condition="String.Contains(ListItem.mpaa,15) | String.Contains(ListItem.mpaa,15세)">flags/mpaa/kr_certificate_15.png</value>
        <value condition="String.Contains(ListItem.mpaa,18세) | String.Contains(ListItem.mpaa,청불)  | String.Contains(ListItem.mpaa,19) | String.Contains(ListItem.mpaa,불가) | String.Contains(ListItem.mpaa,18)">flags/mpaa/kr_certificate_18.png</value>
        <value condition="String.Contains(ListItem.mpaa,제한)">flags/mpaa/kr_certificate_r.png</value>
        <value>$INFO[ListItem.MPAA,flags/mpaa/,.png]</value>
    </variable>

    <variable name="RatingFlagVarHub">
        <value condition="String.Contains(Container(9500).ListItem.mpaa,US:NC-17)| String.Contains(Container(9500).ListItem.mpaa,USA:NC-17)| String.Contains(Container(9500).ListItem.mpaa,Rated NC-17)">flags/mpaa/nc-17.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,UK:U) | String.Contains(Container(9500).ListItem.mpaa,United Kingdom:U)">flags/mpaa/bbfc_u_certificate_uk.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,UK:PG) | String.Contains(Container(9500).ListItem.mpaa,United Kingdom:PG)">flags/mpaa/bbfc_pg_certificate_uk.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,UK:12A) | String.Contains(Container(9500).ListItem.mpaa,United Kingdom:12A)">flags/mpaa/bbfc_12a_certificate_uk.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,UK:12) | String.Contains(Container(9500).ListItem.mpaa,United Kingdom:12)">flags/mpaa/bbfc_12_certificate_uk.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,UK:15) | String.Contains(Container(9500).ListItem.mpaa,United Kingdom:15)">flags/mpaa/bbfc_15_certificate_uk.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,UK:18) | String.Contains(Container(9500).ListItem.mpaa,United Kingdom:18)">flags/mpaa/bbfc_18_certificate_uk.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,US:TV-Y) | String.Contains(Container(9500).ListItem.MPAA,United States:TV-Y) | String.Contains(Container(9500).ListItem.MPAA,USA:TV-Y) | String.IsEqual(Container(9500).ListItem.MPAA,Rated TV-Y) | String.IsEqual(Container(9500).ListItem.MPAA,TV-Y)">flags/mpaa/tv-y.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,US:TV-Y7) | String.Contains(Container(9500).ListItem.MPAA,United States:TV-Y7) | String.Contains(Container(9500).ListItem.MPAA,USA:TV-Y7) | String.IsEqual(Container(9500).ListItem.MPAA,Rated TV-Y7) | String.IsEqual(Container(9500).ListItem.MPAA,TV-Y7)">flags/mpaa/tv-y7.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,US:TV-G) | String.Contains(Container(9500).ListItem.MPAA,United States:TV-G) | String.Contains(Container(9500).ListItem.MPAA,USA:TV-G) | String.IsEqual(Container(9500).ListItem.MPAA,Rated TV-G) | String.IsEqual(Container(9500).ListItem.MPAA,TV-G)">flags/mpaa/tv-g.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,US:TV-PG) | String.Contains(Container(9500).ListItem.MPAA,United States:TV-PG) | String.Contains(Container(9500).ListItem.MPAA,USA:TV-PG) | String.IsEqual(Container(9500).ListItem.MPAA,Rated TV-PG) | String.IsEqual(Container(9500).ListItem.MPAA,TV-PG)">flags/mpaa/tv-pg.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,US:TV-14) | String.Contains(Container(9500).ListItem.MPAA,United States:TV-14) | String.Contains(Container(9500).ListItem.MPAA,USA:TV-14) | String.IsEqual(Container(9500).ListItem.MPAA,Rated TV-14) | String.IsEqual(Container(9500).ListItem.MPAA,TV-14)">flags/mpaa/tv-14.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,US:TV-MA) | String.Contains(Container(9500).ListItem.MPAA,United States:TV-MA) | String.Contains(Container(9500).ListItem.MPAA,USA:TV-MA) | String.IsEqual(Container(9500).ListItem.MPAA,Rated TV-MA) | String.IsEqual(Container(9500).ListItem.MPAA,TV-MA)">flags/mpaa/tv-ma.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Germany:16) | String.Contains(Container(9500).ListItem.mpaa,ab 16) | String.Contains(ListItem.mpaa,FSK16) | String.Contains(Container(9500).ListItem.mpaa,FSK 16) | String.Contains(Container(9500).ListItem.mpaa,de/16) | String.Contains(Container(9500).ListItem.mpaa,Rated 16)">flags/mpaa/fsk-16.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Germany:6)| String.Contains(Container(9500).ListItem.mpaa,ab 6) | String.Contains(ListItem.mpaa,FSK6) | String.Contains(Container(9500).ListItem.mpaa,FSK 6) | String.Contains(Container(9500).ListItem.mpaa,de/6) | String.Contains(Container(9500).ListItem.mpaa,Rated 6)">flags/mpaa/fsk-6.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Germany:12) | String.Contains(Container(9500).ListItem.mpaa,ab 12) | String.Contains(ListItem.mpaa,FSK12) | String.Contains(Container(9500).ListItem.mpaa,FSK 12) | String.Contains(Container(9500).ListItem.mpaa,de/12) | String.Contains(Container(9500).ListItem.mpaa,Rated 12)">flags/mpaa/fsk-12.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Germany:18) | String.Contains(Container(9500).ListItem.mpaa,ab 18) | String.Contains(ListItem.mpaa,FSK18) | String.Contains(Container(9500).ListItem.mpaa,FSK 18) | String.Contains(Container(9500).ListItem.mpaa,de/18) | String.Contains(Container(9500).ListItem.mpaa,Rated 18)">flags/mpaa/fsk-18.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Germany)|String.Contains(Container(9500).ListItem.mpaa,FSK)| String.Contains(Container(9500).ListItem.mpaa,o.A)| String.Contains(Container(9500).ListItem.mpaa,de/0)| String.Contains(Container(9500).ListItem.mpaa,Rated 0)">flags/mpaa/fsk-0.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,US:G) | String.Contains(Container(9500).ListItem.mpaa,USA:G) | String.Contains(Container(9500).ListItem.mpaa,Rated G)">flags/mpaa/g.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,PG-13)">flags/mpaa/pg-13.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Rated PG) | String.IsEqual(Container(9500).ListItem.Mpaa,PG)">flags/mpaa/pg.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,US:NC-17) | String.Contains(Container(9500).ListItem.mpaa,USA:NC-17) | String.Contains(Container(9500).ListItem.mpaa,Rated NC-17) | String.IsEqual(Container(9500).ListItem.MPAA,NC-17)">flags/mpaa/nc-17.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Rated NR) | String.IsEqual(Container(9500).ListItem.mpaa,Not Rated)">flags/mpaa/nr.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,US:R) | String.Contains(Container(9500).ListItem.mpaa,USA:R) | String.Contains(Container(9500).ListItem.mpaa,Rated R) | String.Contains(Container(9500).ListItem.mpaa,Rated) | String.IsEqual(ListItem.mpaa,R)">flags/mpaa/r.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,besorolás alatt)">flags/mpaa/hu_ba.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,korhatárra való tekintett nélkül megtekintetheto)">flags/mpaa/hu_kn.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,12 éven aluliak számára a megtekintése nagykorú felügyelete mellett ajánlott)">flags/mpaa/hu_12.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,16 éven aluliak számára nem ajánlott)">flags/mpaa/hu_16.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,18 éven aluliak számára nem ajánlott)">flags/mpaa/hu_18.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,FR:U) | String.Contains(Container(9500).ListItem.mpaa,France:U) | String.Contains(ListItem.mpaa,Tout public) | String.Contains(ListItem.mpaa,Tous public) | String.Contains(Container(9500).ListItem.mpaa,partir de 3 ans) | String.Contains(Container(9500).ListItem.mpaa,partir de 6 ans)">flags/mpaa/csau.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,FR:10) | String.Contains(Container(9500).ListItem.mpaa,France:10) | String.Contains(Container(9500).ListItem.mpaa,France:-10) | String.Contains(Container(9500).ListItem.mpaa,Interdit aux moins de 10 ans) | String.Contains(Container(9500).ListItem.mpaa,des propos ou des images peuvent heurter)">flags/mpaa/csa10.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,FR:12) | String.Contains(Container(9500).ListItem.mpaa,France:12) | String.Contains(Container(9500).ListItem.mpaa,France:-12) | String.Contains(Container(9500).ListItem.mpaa,Interdit aux moins de 12 ans)">flags/mpaa/csa12.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,FR:16) | String.Contains(Container(9500).ListItem.mpaa,France:16) | String.Contains(Container(9500).ListItem.mpaa,France:-16) | String.Contains(Container(9500).ListItem.mpaa,Interdit aux moins de 16 ans)">flags/mpaa/csa16.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,FR:18) | String.Contains(Container(9500).ListItem.mpaa,France:18) | String.Contains(Container(9500).ListItem.mpaa,France:-18) | String.Contains(Container(9500).ListItem.mpaa,Interdit aux moins de 18 ans)">flags/mpaa/csa18.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Brazil:Livre) | String.Contains(Container(9500).ListItem.mpaa,Livre)">flags/mpaa/mpaa_brazil_livre.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Brazil:10) | String.Contains(Container(9500).ListItem.mpaa,10 anos)">flags/mpaa/mpaa_brazil_10.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Brazil:12) | String.Contains(Container(9500).ListItem.mpaa,12 anos)">flags/mpaa/mpaa_brazil_12.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Brazil:14) | String.Contains(Container(9500).ListItem.mpaa,14 anos)">flags/mpaa/mpaa_brazil_14.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Brazil:16) | String.Contains(Container(9500).ListItem.mpaa,16 anos)">flags/mpaa/mpaa_brazil_16.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Brazil:18) | String.Contains(Container(9500).ListItem.mpaa,18 anos)">flags/mpaa/mpaa_brazil_18.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,Australia:R) | String.Contains(Container(9500).ListItem.MPAA,Australia R)">flags/mpaa/australia_R.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,Australia:MA) | String.Contains(Container(9500).ListItem.MPAA,Australia MA)">flags/mpaa/australia_MA.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,Australia:M) | String.Contains(Container(9500).ListItem.MPAA,Australia M)">flags/mpaa/australia_M.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,Australia:PG) | String.Contains(Container(9500).ListItem.MPAA,Australia PG)">flags/mpaa/australia_PG.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,Australia:G) | String.Contains(Container(9500).ListItem.MPAA,Australia G)">flags/mpaa/australia_G.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,전체) | String.Contains(Container(9500).ListItem.mpaa,0) | String.Contains(Container(9500).ListItem.mpaa,ALL)">flags/mpaa/kr_certificate_all.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,12) |String.Contains(Container(9500).ListItem.mpaa,12세)">flags/mpaa/kr_certificate_12.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,15) | String.Contains(Container(9500).ListItem.mpaa,15세)">flags/mpaa/kr_certificate_15.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,18세) | String.Contains(Container(9500).ListItem.mpaa,청불)  | String.Contains(Container(9500).ListItem.mpaa,19) | String.Contains(Container(9500).ListItem.mpaa,불가) | String.Contains(Container(9500).ListItem.mpaa,18)">flags/mpaa/kr_certificate_18.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,제한)">flags/mpaa/kr_certificate_r.png</value>
        <value>$INFO[ListItem.MPAA,flags/mpaa/,.png]</value>
    </variable>

    <variable name="StartupFanart">
        <value condition="!String.IsEmpty(Skin.String(startupfanart.fallback))">$INFO[Skin.String(startupfanart.fallback)]</value>
        <value>common/bg.jpg</value>
    </variable>

    <variable name="StartupDiffuse">
        <value condition="String.IsEmpty(Skin.String(startupfanart.fallback))">Background</value>
        <value/>
    </variable>

    <variable name="GlobalFanart">

        <!-- Multi Widgets Weather Background -->
        <value condition="Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !Container(301).IsUpdating + [$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]] + !String.IsEmpty(ListItem.Property(FanartCode)) + !String.Contains(Skin.String(weather.fanart.path),multi) + !Skin.HasSetting(home.dontshowfanart) + !String.IsEmpty(Skin.String(weather.fanart.path))">$INFO[Skin.String(weather.fanart.path)]$INFO[ListItem.Property(FanartCode),,.jpg]</value>
        <value condition="Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !Container(301).IsUpdating + [$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]] + !String.IsEmpty(ListItem.Property(FanartCode)) + String.Contains(Skin.String(weather.fanart.path),multi) + !Skin.HasSetting(home.dontshowfanart) + !String.IsEmpty(Skin.String(weather.fanart.path))">$INFO[Skin.String(weather.fanart.path)]$INFO[ListItem.Property(FanartCode)]/</value>
        <value condition="Window.IsVisible(weather) + !String.IsEmpty(Skin.String(weather.fanart.path))">$INFO[Skin.String(weather.fanart.path)]$INFO[Window(Weather).Property(Current.FanartCode)]/</value>
        <value condition="Window.IsVisible(home) + ![Skin.HasSetting(extended.nowplaying) + Player.Playing + !Skin.HasSetting(home.hide.nowplaying) + [$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]]] + !String.IsEmpty(Skin.String(weather.fanart.path)) + [String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + !Skin.HasSetting(home.dontshowfanart) + String.Contains(Skin.String(weather.fanart.path),multi) + String.IsEmpty(Container(300).ListItem.Property(Background))">$INFO[Skin.String(weather.fanart.path)]$INFO[Window(Weather).Property(Current.FanartCode)]/</value>
        <value condition="Window.IsVisible(home) + ![Skin.HasSetting(extended.nowplaying) + Player.Playing + !Skin.HasSetting(home.hide.nowplaying) + [$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]]] + !String.IsEmpty(Skin.String(weather.fanart.path)) + [String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + !Skin.HasSetting(home.dontshowfanart) + !String.Contains(Skin.String(weather.fanart.path),multi) + String.IsEmpty(Container(300).ListItem.Property(Background))">$INFO[Skin.String(weather.fanart.path)]$INFO[Window(Weather).Property(Current.FanartCode),,.jpg]</value>
        <value condition="!String.IsEmpty(Control.GetLabel(4399)) + Skin.HasSetting(EnableExtraFanart) + !Skin.HasSetting(global.hidefanart) + [!Skin.HasSetting(disable.background.addons.fanart) | [Skin.HasSetting(disable.background.addons.fanart) + !String.Contains(Control.GetLabel(4399),addons) + ![String.Contains(Control.GetLabel(4399),plugin) | String.Contains(Control.GetLabel(4399),script) | String.Contains(Control.GetLabel(4399),service)]]]">$INFO[Control.GetLabel(4399)]</value>

        <!-- Now Playing -->
        <value condition="Skin.HasSetting(extended.nowplaying) + Window.IsVisible(home) + !ControlGroup(301).HasFocus() + !Skin.HasSetting(home.dontshowfanart) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.Image)) + System.AddonIsEnabled(script.artistslideshow) + !Skin.HasSetting(ArtistSlideShow.Disabled) + Player.HasAudio">$INFO[Window(Visualisation).Property(ArtistSlideshow.Image)]</value>
        <value condition="Skin.HasSetting(extended.nowplaying) + Window.IsVisible(home) + !ControlGroup(301).HasFocus() + !Skin.HasSetting(home.dontshowfanart) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + [Skin.HasSetting(musicvis.fanartfallback) + !String.IsEmpty(Player.Art(fanart)) + [String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.Image)) | !System.AddonIsEnabled(script.artistslideshow) | Skin.HasSetting(ArtistSlideShow.Disabled)]] + Player.HasAudio">$INFO[Player.Art(fanart)]</value>
        <value condition="Skin.HasSetting(extended.nowplaying) + Window.IsVisible(home) + !ControlGroup(301).HasFocus() + !Skin.HasSetting(home.dontshowfanart) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + [!String.IsEmpty(Skin.String(fanart.fallback.music)) + [String.IsEmpty(Player.Art(fanart)) | !Skin.HasSetting(musicvis.fanartfallback)] + [String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.Image)) | Skin.HasSetting(ArtistSlideShow.Disabled)]] + Player.HasAudio">$INFO[Skin.String(fanart.fallback.music)]</value>
        <value condition="Skin.HasSetting(extended.nowplaying) + Window.IsVisible(home) + !ControlGroup(301).HasFocus() + !Skin.HasSetting(home.dontshowfanart) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Player.Art(fanart)) + Player.HasMedia">$INFO[Player.Art(fanart)]</value>
        <value condition="Skin.HasSetting(extended.nowplaying) + Window.IsVisible(home) + !ControlGroup(301).HasFocus() + !Skin.HasSetting(home.dontshowfanart) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + String.IsEmpty(Player.Art(fanart)) + String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.Image)) + Player.HasMedia + String.IsEmpty(Container(300).ListItem.Property(background))">common/null.png</value>

        <!-- Custom Widget Background -->
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEqual(Container(300).ListItem.Property(background),playlistBackground) + !String.IsEmpty(ListItem.Property(Background))">$INFO[ListItem.Property(Background)]</value>

        <!--Multi Widget -->
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(ListItem.Art(fanart)) + [!Skin.HasSetting(disable.background.addons.fanart) | [Skin.HasSetting(disable.background.addons.fanart) + !String.Contains(ListItem.Art(fanart),addons) + ![String.Contains(ListItem.Art(fanart),plugin) | String.Contains(ListItem.Art(fanart),script) | String.Contains(ListItem.Art(fanart),service)]]]">$INFO[ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(ListItem.Property(fanart))">$INFO[ListItem.Property(fanart)]</value>

        <!--Multi Widget -->
        <value condition="!Skin.HasSetting(home.dontshowfanart) + Window.IsVisible(home) + !String.IsEmpty(Container(301).ListItem.Art(fanart)) + Control.IsVisible(301)">$INFO[Container(301).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + Window.IsVisible(home) + !String.IsEmpty(Container(301).ListItem.Property(fanart)) + Control.IsVisible(301)">$INFO[Container(301).ListItem.Property(fanart)]</value>
        <!--Multi Widget WEATHER -->
        <value condition="[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] + Window.IsVisible(home) + !String.IsEmpty(Skin.String(weather.fanart.path)) + [String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + !Skin.HasSetting(home.dontshowfanart) + String.Contains(Skin.String(weather.fanart.path),multi)">$INFO[Skin.String(weather.fanart.path)]$INFO[Window(Weather).Property(Current.FanartCode)]/</value>
        <value condition="[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] + Window.IsVisible(home) + !String.IsEmpty(Skin.String(weather.fanart.path)) + [String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + !Skin.HasSetting(home.dontshowfanart) + !String.Contains(Skin.String(weather.fanart.path),multi) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Skin.String(weather.fanart.path)]$INFO[Window(Weather).Property(Current.FanartCode),,.jpg]</value>

        <!--Multi Widget -->
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(30111).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + Control.IsVisible(30111) + !Control.HasFocus(30111)">$INFO[Container(30111).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(30121).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30121).ListItem.Property(Background)) + Control.IsVisible(30121) + !Control.HasFocus(30121)">$INFO[Container(30121).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(30131).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30131).ListItem.Property(Background)) + Control.IsVisible(30131) + !Control.HasFocus(30131)">$INFO[Container(30131).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(30141).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30141).ListItem.Property(Background)) + Control.IsVisible(30141) + !Control.HasFocus(30141)">$INFO[Container(30141).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(30151).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30151).ListItem.Property(Background)) + Control.IsVisible(30151) + !Control.HasFocus(30151)">$INFO[Container(30151).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(30161).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30161).ListItem.Property(Background)) + Control.IsVisible(30161) + !Control.HasFocus(30161)">$INFO[Container(30161).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(30171).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30171).ListItem.Property(Background)) + Control.IsVisible(30171) + !Control.HasFocus(30171)">$INFO[Container(30171).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(30181).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30181).ListItem.Property(Background)) + Control.IsVisible(30181) + !Control.HasFocus(30181)">$INFO[Container(30181).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(30191).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30191).ListItem.Property(Background)) + Control.IsVisible(30191) + !Control.HasFocus(30191)">$INFO[Container(30191).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(301101).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301101).ListItem.Property(Background)) + Control.IsVisible(301101) + !Control.HasFocus(301101)">$INFO[Container(301101).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(301111).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301111).ListItem.Property(Background)) + Control.IsVisible(301111) + !Control.HasFocus(301111)">$INFO[Container(301111).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(301121).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301121).ListItem.Property(Background)) + Control.IsVisible(301121) + !Control.HasFocus(301121)">$INFO[Container(301121).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(301131).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301131).ListItem.Property(Background)) + Control.IsVisible(301131) + !Control.HasFocus(301131)">$INFO[Container(301131).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(301141).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301141).ListItem.Property(Background)) + Control.IsVisible(301141) + !Control.HasFocus(301141)">$INFO[Container(301141).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + !String.IsEmpty(Container(301151).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301151).ListItem.Property(Background)) + Control.IsVisible(301151) + !Control.HasFocus(301151)">$INFO[Container(301151).ListItem.Property(Background)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(3011).ListItem.Property(Background)) + String.IsEmpty(Container(3011).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(3011).ListItem.Property(Background)) + Control.IsVisible(3011)">$INFO[Container(3011).ListItem.Property(Background)]</value>

        <!--Multi Widget First Widget -->
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30111).ListItem.Art(fanart)) + Control.IsVisible(30111) + !Control.HasFocus(30111) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30111).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30121).ListItem.Art(fanart)) + Control.IsVisible(30121) + !Control.HasFocus(30121) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30121).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30131).ListItem.Art(fanart)) + Control.IsVisible(30131) + !Control.HasFocus(30131) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30131).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30141).ListItem.Art(fanart)) + Control.IsVisible(30141) + !Control.HasFocus(30141) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30141).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30151).ListItem.Art(fanart)) + Control.IsVisible(30151) + !Control.HasFocus(30151) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30151).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30161).ListItem.Art(fanart)) + Control.IsVisible(30161) + !Control.HasFocus(30161) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30161).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30171).ListItem.Art(fanart)) + Control.IsVisible(30171) + !Control.HasFocus(30171) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30171).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30181).ListItem.Art(fanart)) + Control.IsVisible(30181) + !Control.HasFocus(30181) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30181).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30191).ListItem.Art(fanart)) + Control.IsVisible(30191) + !Control.HasFocus(30191) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30191).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301101).ListItem.Art(fanart)) + Control.IsVisible(301101) + !Control.HasFocus(301101) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(301101).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301111).ListItem.Art(fanart)) + Control.IsVisible(301111) + !Control.HasFocus(301111) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(301111).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301121).ListItem.Art(fanart)) + Control.IsVisible(301121) + !Control.HasFocus(301121) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(301121).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301131).ListItem.Art(fanart)) + Control.IsVisible(301131) + !Control.HasFocus(301131) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(301131).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301141).ListItem.Art(fanart)) + Control.IsVisible(301141) + !Control.HasFocus(301141) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(301141).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301151).ListItem.Art(fanart)) + Control.IsVisible(301151) + !Control.HasFocus(301151) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(301151).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(3011).ListItem.Property(Background)) + String.IsEmpty(Container(3011).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(3011).ListItem.Art(fanart)) + Control.IsVisible(3011) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(3011).ListItem.Art(fanart)]</value>

        <!--Multi Widget Second Widget (case First Widget become empty) -->
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30112).ListItem.Art(fanart)) + Integer.IsEqual(Container(30111).NumItems,0) + Control.IsVisible(30112) + !Control.HasFocus(30112) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30112).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30122).ListItem.Art(fanart)) + Integer.IsEqual(Container(30121).NumItems,0) + Control.IsVisible(30122) + !Control.HasFocus(30122) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30122).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30132).ListItem.Art(fanart)) + Integer.IsEqual(Container(30131).NumItems,0) + Control.IsVisible(30132) + !Control.HasFocus(30132) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30132).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30142).ListItem.Art(fanart)) + Integer.IsEqual(Container(30141).NumItems,0) + Control.IsVisible(30142) + !Control.HasFocus(30142) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30142).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30152).ListItem.Art(fanart)) + Integer.IsEqual(Container(30151).NumItems,0) + Control.IsVisible(30152) + !Control.HasFocus(30152) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30152).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30162).ListItem.Art(fanart)) + Integer.IsEqual(Container(30161).NumItems,0) + Control.IsVisible(30162) + !Control.HasFocus(30162) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30162).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30172).ListItem.Art(fanart)) + Integer.IsEqual(Container(30171).NumItems,0) + Control.IsVisible(30172) + !Control.HasFocus(30172) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30172).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30182).ListItem.Art(fanart)) + Integer.IsEqual(Container(30181).NumItems,0) + Control.IsVisible(30182) + !Control.HasFocus(30182) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30182).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(30192).ListItem.Art(fanart)) + Integer.IsEqual(Container(30191).NumItems,0) + Control.IsVisible(30192) + !Control.HasFocus(30192) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(30192).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301102).ListItem.Art(fanart)) + Integer.IsEqual(Container(301101).NumItems,0) + Control.IsVisible(301102) + !Control.HasFocus(301102) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(301102).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301112).ListItem.Art(fanart)) + Integer.IsEqual(Container(301111).NumItems,0) + Control.IsVisible(301112) + !Control.HasFocus(301112) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(301112).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301122).ListItem.Art(fanart)) + Integer.IsEqual(Container(301121).NumItems,0) + Control.IsVisible(301122) + !Control.HasFocus(301122) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(301122).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301132).ListItem.Art(fanart)) + Integer.IsEqual(Container(301131).NumItems,0) + Control.IsVisible(301132) + !Control.HasFocus(301132) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(301132).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301142).ListItem.Art(fanart)) + Integer.IsEqual(Container(301141).NumItems,0) + Control.IsVisible(301142) + !Control.HasFocus(301142) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(301142).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(home.dontshowfanart) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]] + Window.IsVisible(home) + String.IsEmpty(Container(301).ListItem.Property(Background)) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist)) + !String.IsEmpty(Container(301152).ListItem.Art(fanart)) + Integer.IsEqual(Container(301151).NumItems,0) + Control.IsVisible(301152) + !Control.HasFocus(301152) + String.IsEmpty(Container(300).ListItem.Property(background)) + [Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(301152).ListItem.Art(fanart)]</value>

        <!-- Fallback, Other -->
        <value condition="Window.IsVisible(home) + !String.IsEmpty(Window(Home).Property(PVR.Artwork.fanart)) + String.IsEmpty(ListItem.Property(fanart)) + Skin.HasSetting(Skin_enablePvrArtwork)">$INFO[Window(Home).Property(PVR.Artwork.fanart)]</value>
        <value condition="Window.IsVisible(home) + String.IsEqual(Container(300).ListItem.Property(background),playlistBackground)">$INFO[Container(9988).ListItem.Art(fanart)]</value>
        <value condition="Window.IsVisible(home) + !String.IsEmpty(Container(300).ListItem.Property(Background)) + [String.IsEmpty(Skin.String(fanart.fallback)) | Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)]">$INFO[Container(300).ListItem.Property(Background)]</value>
        <value condition="Window.IsVisible(home) + !String.IsEmpty(Skin.String(home.slideshowpath)) + [[String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] | String.IsEmpty(Container(300).ListItem.Property(widget)) | Container(301).IsUpdating |  Skin.HasSetting(home.dontshowfanart)]">$INFO[Skin.String(home.slideshowpath)]</value>
        <value condition="Window.IsVisible(home) + !String.IsEmpty(Skin.String(weather.fanart.path)) + Skin.HasSetting(home.showweatherfanart) + [String.IsEmpty(Container(300).ListItem.Property(widget)) | Container(301).IsUpdating]">$INFO[Skin.String(weather.fanart.path)]$INFO[Window(Weather).Property(Current.FanartCode)]/</value>
        <value condition="Window.IsVisible(home) + !Container(301).IsUpdating + !String.IsEmpty(Skin.String(fanart.fallback))">$INFO[Skin.String(fanart.fallback)]</value>
        <value condition="Window.IsVisible(home) + String.IsEqual(Container(300).ListItem.Property(widgetType),system) + !Skin.HasSetting(home.dontshowfanart) + String.IsEmpty(Container(301).ListItem.Property(backgroundPlaylist))">special://skin/extras/backgrounds/systeminfo.jpg</value>
        <value condition="Window.IsVisible(home) + !Container(301).IsUpdating + !String.IsEmpty(Container(301).ListItem.Property(Background))">$INFO[Container(301).ListItem.Property(Background)]</value>
        <value condition="Window.IsVisible(home) + !Container(301).IsUpdating + Skin.HasSetting(homemenu.netflix)">common/null.png</value>
        <value condition="Window.IsVisible(home) + !Container(301).IsUpdating">pvr/background.jpg</value>
        <value condition="Window.IsVisible(tvchannels) + !String.IsEmpty(Window(Home).Property(PVR.Artwork.fanart)) +  Skin.HasSetting(Skin_enablePvrArtwork)">$INFO[Window(Home).Property(PVR.Artwork.Fanart)]</value>
        <value condition="Window.IsVisible(tvguide) + !String.IsEmpty(Window(Home).Property(PVR.Artwork.fanart)) +  Skin.HasSetting(Skin_enablePvrArtwork)">$INFO[Window(Home).Property(PVR.Artwork.Fanart)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ExtraFanArtPath)) + Skin.HasSetting(SkinHelper.EnableExtraFanart) + System.AddonIsEnabled(script.skin.helper.service) + Window.IsVisible(MyVideoNav.xml)">$INFO[Window(Home).Property(SkinHelper.ExtraFanArtPath)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(fanart))">$INFO[ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(9500).ListItem.Art(fanart))">$INFO[Container(9500).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Fanart_Image))">$INFO[ListItem.Property(Fanart_Image)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Fanart))">$INFO[ListItem.Property(Fanart)]</value>
        <value condition="!String.IsEmpty(Skin.String(fanart.fallback))">$INFO[Skin.String(fanart.fallback)]</value>
        <value>common/null.png</value>
    </variable>

    <include name="GlobalVideoWindow">
        <control type="image" description="Background">
            <include>Dimensions_Fullscreen</include>
            <texture colordiffuse="Background">common/bg.jpg</texture>
        </control>
        <control type="image" description="Background">
            <include>Dimensions_Fullscreen</include>
            <texture colordiffuse="ff000000">common/white.png</texture>
            <visible>Player.HasVideo + Skin.HasSetting(global.showvideo)</visible>
        </control>
        <control type="videowindow">
            <include>Dimensions_Fullscreen</include>
            <visible>Player.HasVideo + Skin.HasSetting(global.showvideo)</visible>
        </control>
    </include>

    <include name="GlobalVisualisation">
        <control type="group">
            <visible>Player.HasAudio</visible>
            <control type="visualisation">
                <visible>Skin.HasSetting(ArtistSlideShow.Disabled) | !System.AddonIsEnabled(script.artistslideshow) | Skin.HasSetting(OSDVisualisation.ShowFanart)</visible>
                <description>visualisation</description>
                <include>Dimensions_Fullscreen</include>
            </control>
            <control type="image">

                <!-- AS 3 -->
                <aspectratio>scale</aspectratio>
                <include>Dimensions_Fullscreen</include>
                <include>BackgroundFanartFadetime</include>
                <texture background="true">$INFO[Window(Visualisation).Property(ArtistSlideshow.Image)]</texture>
                <visible>System.AddonIsEnabled(script.artistslideshow) + !Skin.HasSetting(ArtistSlideShow.Disabled)</visible>
                <animation effect="fade" start="100" end="65" time="0" condition="Skin.HasSetting(OSDVisualisation.ShowFanart)">Conditional</animation>
                <animation effect="zoom" start="110" end="130" center="auto" time="10000" tween="sine" easing="inout" pulse="true" condition="Skin.HasSetting(ArtistSlideshow.Animate)">Conditional</animation>
                <animation effect="slide" start="-30,-30" end="30,30" time="6000" tween="sine" easing="inout" pulse="true" condition="Skin.HasSetting(ArtistSlideshow.Animate)">Conditional</animation>
            </control>
        </control>
    </include>

    <include name="GlobalBackgroundFade">
        <colordiffuse>FanartFade</colordiffuse>
        <animation effect="fade" end="5" start="5" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),5) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="10" start="10" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),10) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="15" start="15" time="0" condition="[String.IsEmpty(Skin.String(BackgroundBrightness)) | Integer.IsEqual(Skin.String(BackgroundBrightness),15)] + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="20" start="20" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),20) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="25" start="25" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),25) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="30" start="30" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),30) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="35" start="35" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),35) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="40" start="40" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),40) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="45" start="45" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),45) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="50" start="50" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),50) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="55" start="55" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),55) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="60" start="60" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),60) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="65" start="65" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),65) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="70" start="70" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),70) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="60" start="60" time="0" condition="Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)">Conditional</animation>
    </include>

    <include name="GlobalBackgroundFadeCleanFlix">
        <colordiffuse>FanartFade</colordiffuse>
        <animation effect="fade" end="25" start="25" time="0" condition="true">Conditional</animation>
    </include>

    <include name="GlobalBackgroundFadeBlur">
        <colordiffuse>FanartFadeBlur</colordiffuse>
        <animation effect="fade" end="5" start="5" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),5)">Conditional</animation>
        <animation effect="fade" end="0" start="0" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),0) + !String.IsEmpty(Skin.String(BackgroundBrightnessBlur))">Conditional</animation>
        <animation effect="fade" end="10" start="10" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),10)">Conditional</animation>
        <animation effect="fade" end="15" start="15" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),15)">Conditional</animation>
        <animation effect="fade" end="20" start="20" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),20)">Conditional</animation>
        <animation effect="fade" end="25" start="25" time="0" condition="String.IsEmpty(Skin.String(BackgroundBrightnessBlur)) | Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),25)">Conditional</animation>
        <animation effect="fade" end="30" start="30" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),30)">Conditional</animation>
        <animation effect="fade" end="35" start="35" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),35)">Conditional</animation>
        <animation effect="fade" end="40" start="40" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),40)">Conditional</animation>
        <animation effect="fade" end="45" start="45" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),45)">Conditional</animation>
        <animation effect="fade" end="50" start="50" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),50)">Conditional</animation>
        <animation effect="fade" end="55" start="55" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),55)">Conditional</animation>
        <animation effect="fade" end="60" start="60" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),60)">Conditional</animation>
        <animation effect="fade" end="65" start="65" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),65)">Conditional</animation>
        <animation effect="fade" end="70" start="70" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),70)">Conditional</animation>
    </include>

    <include name="GlobalBackgroundFadeBlur2">
        <colordiffuse>FanartFadeBlur</colordiffuse>
        <animation effect="fade" end="5" start="5" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),5) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="0" start="0" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),0) + Skin.HasSetting(BlurOnHome) + !String.IsEmpty(Skin.String(BackgroundBrightnessBlur))">Conditional</animation>
        <animation effect="fade" end="10" start="10" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),10) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="15" start="15" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),15) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="20" start="20" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),20) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="25" start="25" time="0" condition="[String.IsEmpty(Skin.String(BackgroundBrightnessBlur)) | Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),25)] + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="30" start="30" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),30) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="35" start="35" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),35) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="40" start="40" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),40) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="45" start="45" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),45) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="50" start="50" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),50) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="55" start="55" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),55) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="60" start="60" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),60) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="65" start="65" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),65) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
        <animation effect="fade" end="70" start="70" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),70) + Skin.HasSetting(BlurOnHome)">Conditional</animation>
    </include>

    <include name="Overlay510">
        <colordiffuse>BackgroundNew</colordiffuse>
    </include>

    <include name="Overlay510Blur">
        <colordiffuse>BackgroundNewBlur</colordiffuse>
    </include>

    <include name="IncludeFloorFade">
        <colordiffuse>FloorFade</colordiffuse>
    </include>

    <include name="IncludeFloorFadeBlur">
        <colordiffuse>FloorFadeBlur</colordiffuse>
    </include>

    <variable name="GlobalBackgroundImage">
        <value condition="Skin.HasSetting(EnableEffects) + Skin.HasSetting(BlurEnabled)">$INFO[Window(home).Property(listitem_blurred)]</value>
        <value condition="Skin.HasSetting(EnableEffects)">$INFO[Window(home).Property(ImageFilterFIVE)]</value>
        <value condition="!Skin.HasSetting(EnableEffects)">$VAR[GlobalFanart]</value>
    </variable>

    <include name="ImagePathNormal">
        <imagepath background="true">$VAR[GlobalFanart]</imagepath>
    </include>

    <include name="ImagePathBlurLitebox">
        <imagepath background="true">$INFO[Window(home).Property(ImageFilterFIVE)]</imagepath>
    </include>
    
    <include name="ImagePathBlurEmbuary">
        <imagepath background="true">$INFO[Window(home).Property(listitem_blurred)]</imagepath>
    </include>

    <include name="BackgroundFanartFadetime">
        <include condition="Integer.IsEqual(Skin.String(Fadetime),600) | String.IsEmpty(Skin.String(Fadetime))">FadetimeDefault</include>
        <include condition="Integer.IsEqual(Skin.String(Fadetime),1800)">FadetimeSlow</include>
        <include condition="Integer.IsEqual(Skin.String(Fadetime),3600)">FadetimeSuperSlow</include>
        <include condition="Integer.IsEqual(Skin.String(Fadetime),400)">FadetimeFast</include>
    </include>

    <include name="FadetimeFast">
        <fadetime>400</fadetime>
    </include>

    <include name="FadetimeDefault">
        <fadetime>BackgroundFanartFadetime</fadetime>
    </include>

    <include name="FadetimeSlow">
        <fadetime>1800</fadetime>
    </include>

    <include name="FadetimeSuperSlow">
        <fadetime>3600</fadetime>
    </include>

    <include name="HiddenVideoWindow">

        <!--Hidden video window to prevent audio errors-->
        <control type="videowindow">
            <include>Dimensions_Fullscreen</include>
        </control>
    </include>

    <include name="TrailerWindow">
        <control type="videowindow">
            <visible>$EXP[TrailerWindowIsActive] + !$EXP[ExtendedNowPlayingIsVisible]</visible>
            <include condition="![$EXP[HomeIsCleanMinimal] + Window.IsVisible(Home)]">DefTrailerVideoWindowSmall</include>
            <include condition="$EXP[HomeIsCleanMinimal] + Window.IsVisible(Home)">DefTrailerVideoWindowFullscreen</include>
        </control>        
        <control type="image" description="Background">
            <animation effect="slide" start="0,0" end="0,-90" time="0" condition="Skin.HasSetting(home.netflix.autoplay.trailer.custom.window.force)">Conditional</animation>
            <animation effect="slide" start="0,0" end="0,-50" time="0" condition="Skin.HasSetting(home.netflix.autoplay.trailer.custom.window) + String.IsEqual(VideoPlayer.VideoAspect,1.85) + !String.IsEmpty(VideoPlayer.VideoAspect)">Conditional</animation>
            <animation effect="slide" start="0,0" end="0,-90" time="0" condition="Skin.HasSetting(home.netflix.autoplay.trailer.custom.window) + !String.IsEqual(VideoPlayer.VideoAspect,1.85) + !String.IsEqual(VideoPlayer.VideoAspect,1.78) + !String.IsEqual(VideoPlayer.VideoAspect,1.66) + !String.IsEqual(VideoPlayer.VideoAspect,1.37) + !String.IsEqual(VideoPlayer.VideoAspect,1.33) + !String.IsEmpty(VideoPlayer.VideoAspect)">Conditional</animation>
            <visible>$EXP[TrailerWindowIsActive] + !$EXP[ExtendedNowPlayingIsVisible] + ![$EXP[HomeIsCleanMinimal] + Window.IsVisible(Home)]</visible>
            <top>0</top>
            <include>Dimensions_Fullscreen</include>
            <texture colordiffuse="Background">common/trailerwindow.png</texture>
        </control>
    </include>
    
    <include name="BlurImageEmbuary">
        <control type="image" id="100000">
            <left>-3000</left>
            <right>-3000</right>
            <width>10</width>
            <height>10</height>
            <texture background="true">$VAR[GlobalFanart]</texture>
            <visible>!Window.IsVisible(Custom_Blur.xml)</visible>
        </control>
    </include>
    
    <include name="BlurImageLitebox">
        <control type="multiimage" id="7975">
            <left>-2160</left>
            <width>1</width>
            <height>1</height>
            <fadetime>600</fadetime>
            <timeperimage>HomeTimePerImage</timeperimage>
            <randomize>true</randomize>
            <imagepath background="true">$VAR[GlobalFanart]</imagepath>
            <visible>!Window.IsVisible(Custom_Blur.xml)</visible>
        </control>
    </include>

    <include name="GlobalBackground">        
        <include condition="Skin.HasSetting(EnableEffects) + !Skin.HasSetting(BlurEnabled)">BlurImageLitebox</include>
        <include condition="Skin.HasSetting(EnableEffects) + Skin.HasSetting(BlurEnabled)">BlurImageEmbuary</include>        
        <include condition="!Skin.HasSetting(global.showvideo) + Skin.HasSetting(background.video.fix.audio.errors)">HiddenVideoWindow</include>
        <include>GlobalVideoWindow</include>
        <include condition="Skin.HasSetting(global.showvisualisation) + !String.IsEmpty(Visualisation.Name)">GlobalVisualisation</include>
        <control type="fadelabel" id="4399">
            <top>-900</top>
            <width>2560</width>
            <height>0</height>
            <scroll>false</scroll>
            <scrollout>false</scrollout>
            <randomize>true</randomize>
            <resetonlabelchange>true</resetonlabelchange>
            <visible>Skin.HasSetting(EnableExtraFanart)</visible>
            <label>$INFO[ListItem.Art(fanart)]</label>
            <label>$INFO[ListItem.Art(fanart1)]</label>
            <label>$INFO[ListItem.Art(fanart2)]</label>
            <label>$INFO[ListItem.Art(fanart3)]</label>
            <label>$INFO[ListItem.Art(fanart4)]</label>
            <label>$INFO[ListItem.Art(fanart5)]</label>
            <label>$INFO[ListItem.Art(fanart6)]</label>
            <label>$INFO[ListItem.Art(fanart7)]</label>
            <label>$INFO[ListItem.Art(fanart8)]</label>
            <label>$INFO[ListItem.Art(fanart9)]</label>
            <label>$INFO[ListItem.Art(fanart10)]</label>
            <label>$INFO[ListItem.Art(fanart11)]</label>
            <label>$INFO[ListItem.Art(fanart12)]</label>
            <label>$INFO[ListItem.Art(fanart13)]</label>
            <label>$INFO[ListItem.Art(fanart14)]</label>
            <label>$INFO[ListItem.Art(fanart15)]</label>
            <label>$INFO[ListItem.Art(fanart16)]</label>
            <label>$INFO[ListItem.Art(fanart17)]</label>
            <label>$INFO[ListItem.Art(fanart18)]</label>
            <label>$INFO[ListItem.Art(fanart19)]</label>
            <label>$INFO[ListItem.Art(fanart20)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart1)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart2)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart3)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart4)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart5)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart6)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart7)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart8)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart9)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart10)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart11)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart12)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart13)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart14)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart15)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart16)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart17)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart18)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart19)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart20)]</label>
            <pauseatend>HomeTimePerImage</pauseatend>
        </control>
        
        <!-- Visualisation Overlay -->
        <control type="image" description="Background">
            <include>Dimensions_Fullscreen</include>
            <texture colordiffuse="Background">common/bg.jpg</texture>
            <visible>!$EXP[HomeIsSpotlight] + !$EXP[HomeIsClassic] + !$EXP[HomeIsModern] + [[Player.HasVideo + Skin.HasSetting(global.showvideo)] | [Player.HasAudio + Skin.HasSetting(global.showvisualisation) + !String.IsEmpty(Visualisation.Name)]]</visible>
            <animation effect="fade" start="100" end="75" time="0" condition="true">Conditional</animation>
        </control>

        <!-- Trailer Window Home -->
        <include condition="Skin.HasSetting(home.netflix.autoplay.trailer)">TrailerWindow</include>

        <!-- Global Fanart -->
        <control type="multiimage" description="Fanart">
            <visible>!Skin.HasSetting(EnableEffects)</visible>
            <include condition="![ [$EXP[HomeIsSpotlight] | $EXP[HomeIsClassic] | $EXP[HomeIsModern]] + Window.IsVisible(home)]">GlobalBackgroundFade</include>
            <visible>!Player.HasMedia | [!Skin.HasSetting(global.showvideo) + Player.HasVideo] | [!Skin.HasSetting(global.showvisualisation) + Player.HasAudio] | [Skin.HasSetting(global.showvisualisation) + String.IsEmpty(Visualisation.Name) + Player.HasAudio]</visible>
            <visible>!Skin.HasSetting(global.hidefanart) | Window.IsVisible(home)</visible>
            <include>Dimensions_Fullscreen</include>
            <include>Animation.Background.OpenClose</include>
            <include>BackgroundFanartFadetime</include>
            <timeperimage>HomeTimePerImage</timeperimage>
            <randomize>true</randomize>
            <aspectratio>scale</aspectratio>
            <imagepath background="true">$VAR[GlobalFanart]</imagepath>
            <include>Animation.Animate.Fanart</include>
            <include>Animation.AutoTrailer.FadeOut.Background</include>
        </control>

        <!-- BLUR Global Fanart -->
        <control type="multiimage" description="Fanart">
            <visible>Skin.HasSetting(EnableEffects) + !Window.IsVisible(home)</visible>
            <include>GlobalBackgroundFadeBlur</include>
            <visible>!Player.HasMedia | [!Skin.HasSetting(global.showvideo) + Player.HasVideo] | [!Skin.HasSetting(global.showvisualisation) + Player.HasAudio] | [Skin.HasSetting(global.showvisualisation) + String.IsEmpty(Visualisation.Name) + Player.HasAudio]</visible>
            <visible>!Skin.HasSetting(global.hidefanart) | Window.IsVisible(home)</visible>
            <include>Dimensions_Fullscreen</include>
            <include>Animation.Background.OpenClose</include>
            <include>BackgroundFanartFadetime</include>
            <timeperimage>HomeTimePerImage</timeperimage>
            <randomize>true</randomize>
            <aspectratio>scale</aspectratio>
            <include condition="!Skin.HasSetting(BlurEnabled)">ImagePathBlurLitebox</include>
            <include condition="Skin.HasSetting(BlurEnabled)">ImagePathBlurEmbuary</include>
            <include>Animation.Animate.Fanart</include>
            <include>Animation.AutoTrailer.FadeOut.Background</include>
        </control>

        <!-- BLUR Global Fanart Home-->
        <control type="multiimage" description="Fanart">
            <visible>Skin.HasSetting(EnableEffects) + Window.IsVisible(home)</visible>
            <include condition="!Skin.HasSetting(BlurOnHome) + !$EXP[HomeIsSpotlight] + !$EXP[HomeIsClassic] + !$EXP[HomeIsModern]">GlobalBackgroundFade</include>
            <include condition="Skin.HasSetting(BlurOnHome)">GlobalBackgroundFadeBlur2</include>
            <visible>!Player.HasMedia | [!Skin.HasSetting(global.showvideo) + Player.HasVideo] | [!Skin.HasSetting(global.showvisualisation) + Player.HasAudio] | [Skin.HasSetting(global.showvisualisation) + String.IsEmpty(Visualisation.Name) + Player.HasAudio]</visible>
            <visible>!Skin.HasSetting(global.hidefanart) | Window.IsVisible(home)</visible>
            <include>Dimensions_Fullscreen</include>
            <include>Animation.Background.OpenClose</include>
            <include>BackgroundFanartFadetime</include>
            <timeperimage>HomeTimePerImage</timeperimage>
            <randomize>true</randomize>
            <aspectratio>scale</aspectratio>
            <include condition="!Skin.HasSetting(BlurOnHome)">ImagePathNormal</include>
            <include condition="Skin.HasSetting(BlurOnHome) + !Skin.HasSetting(BlurEnabled)">ImagePathBlurLitebox</include>
            <include condition="Skin.HasSetting(BlurOnHome) + Skin.HasSetting(BlurEnabled)">ImagePathBlurEmbuary</include>
            <include>Animation.Animate.Fanart</include>
            <include>Animation.AutoTrailer.FadeOut.Background</include>
        </control>

        <!-- Fallback -->
        <control type="image" description="Fanart Fallback always">
            <include>GlobalBackgroundFade</include>
            <visible>!Player.HasMedia | [!Skin.HasSetting(global.showvideo) + Player.HasVideo] | [!Skin.HasSetting(global.showvisualisation) + Player.HasAudio] | [Skin.HasSetting(global.showvisualisation) + String.IsEmpty(Visualisation.Name) + Player.HasAudio]</visible>
            <include>Dimensions_Fullscreen</include>
            <visible>!Window.IsVisible(home) + Skin.HasSetting(global.hidefanart) + !String.IsEmpty(Skin.String(fanart.fallback))</visible>
            <include>Animation.Background.OpenClose</include>
            <aspectratio>scale</aspectratio>
            <texture background="true">$INFO[Skin.String(fanart.fallback)]</texture>
            <include>Animation.Animate.Fanart</include>
            <include>Animation.AutoTrailer.FadeOut.Background</include>
        </control>

        <!-- Netflix Preview Window -->
        <control type="multiimage" description="Fanart">
            <visible>[[Window.IsVisible(Home.xml) + Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(hide.homemenu.netflix.preview) + [$EXP[HomeIsModernMultiWidgets] | $EXP[HomeIsVerticalMultiWidgets]]] | [[[Control.IsVisible(510) | Control.IsVisible(520) | Control.IsVisible(521) | Control.IsVisible(522) | Control.IsVisible(523) | Control.IsVisible(524)] + !Skin.HasSetting(hide.views.netflix.preview)]]] + !Window.IsVisible(DialogVideoInfo.xml) + !Window.IsVisible(DialogMusicInfo.xml) + !Window.IsVisible(DialogAddonInfo.xml) + !Window.IsVisible(DialogPVRInfo.xml) + !Window.IsVisible(skin.arctic.zephyr.mod.script-gto-info.xml) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]</visible>
            <visible>!Player.HasMedia | [!Skin.HasSetting(global.showvideo) + Player.HasVideo] | [!Skin.HasSetting(global.showvisualisation) + Player.HasAudio] | [Skin.HasSetting(global.showvisualisation) + String.IsEmpty(Visualisation.Name) + Player.HasAudio]</visible>
            <visible>!Skin.HasSetting(global.hidefanart) | Window.IsVisible(home)</visible>
            <include>Animation.Background.OpenClose</include>
            <animation effect="fade" start="0" end="100" time="350" tween="sine" easing="in" reversible="false">Visible</animation>
            <animation effect="fade" end="0" start="100" time="150">Hidden</animation>
            <animation effect="fade" end="30" start="30" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),30)">Conditional</animation>
            <animation effect="fade" end="40" start="40" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),40)">Conditional</animation>
            <animation effect="fade" end="50" start="50" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),50)">Conditional</animation>
            <animation effect="fade" end="60" start="60" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),60) | String.IsEmpty(Skin.String(FadeNetflixPreview)) | String.IsEqual(Skin.String(FadeNetflixPreview),default)">Conditional</animation>
            <animation effect="fade" end="70" start="70" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),70)">Conditional</animation>
            <animation effect="fade" end="80" start="80" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),80)">Conditional</animation>
            <animation effect="fade" end="90" start="90" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),90)">Conditional</animation>
            <animation effect="fade" end="100" start="100" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),100)">Conditional</animation>
            <include>BackgroundFanartFadetime</include>
            <timeperimage>HomeTimePerImage</timeperimage>
            <randomize>true</randomize>
            <include condition="Skin.HasSetting(homemenu.netflix.preview.fullscreen)">NetflixPreviewWindowFullscreen</include>
            <include condition="!Skin.HasSetting(homemenu.netflix.preview.fullscreen)">NetflixPreviewWindow</include>
            <include>Animation.Animate.Fanart</include>
            <include>Animation.AutoTrailer.FadeOut.Background</include>
        </control>
        
        <!-- Final Overlays -->
        <control type="image" description="FanartOverlay">
            <visible>[!Skin.HasSetting(homemenu.clean.flix) + !$EXP[HomeIsSpotlight] + !$EXP[HomeIsClassic] + !$EXP[HomeIsModern]] | !Window.IsVisible(Home.xml)</visible>
            <include>Dimensions_Fullscreen</include>
            <texture colordiffuse="FloorFade">common/floor.png</texture>
            <include>Animation.AutoTrailer.FadeOut.Background</include>
        </control>
        <control type="image" description="FanartOverlay">
            <visible>Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)</visible>
            <include>Dimensions_Fullscreen</include>
            <animation type="WindowOpen" reversible="false">
                <effect type="fade" start="66" end="100" time="150"/>
            </animation>
            <animation type="WindowClose" reversible="false">
                <effect type="fade" end="33" start="100" time="300"/>
            </animation>
            <texture colordiffuse="FloorFade">common/floor2.png</texture>
        </control>
    </include>

    <include name="GlobalBackgroundExtended">
        <control type="image" description="Background">
            <include>Dimensions_Fullscreen</include>
            <include condition="!Skin.HasSetting(home.vertical)">Animation.FadeFromHome</include>
            <texture colordiffuse="Background">common/bg.jpg</texture>
        </control>
        <control type="multiimage" description="Fanart">
            <visible>!Skin.HasSetting(EnableEffects) | [Skin.HasSetting(EnableEffects) + !Skin.HasSetting(BlurOnHome)]</visible>
            <include>GlobalBackgroundFade</include>
            <visible>!Skin.HasSetting(global.hidefanart)</visible>
            <include>Dimensions_Fullscreen</include>
            <include condition="!Skin.HasSetting(home.vertical)">Animation.FadeFromHome</include>
            <include>BackgroundFanartFadetime</include>
            <timeperimage>HomeTimePerImage</timeperimage>
            <include condition="Skin.HasSetting(homemenu.clean.flix)">GlobalBackgroundFadeCleanFlix</include>
            <randomize>true</randomize>
            <aspectratio>scale</aspectratio>
            <imagepath background="true">$VAR[GlobalFanart]</imagepath>
            <include>Animation.Animate.Fanart</include>
        </control>
        <control type="multiimage" description="Fanart">
            <visible>Skin.HasSetting(EnableEffects) + Skin.HasSetting(BlurOnHome)</visible>
            <visible>!Skin.HasSetting(global.hidefanart)</visible>
            <include>Dimensions_Fullscreen</include>
            <include condition="!Skin.HasSetting(home.vertical)">Animation.FadeFromHome</include>
            <include>GlobalBackgroundFadeBlur</include>
            <include>BackgroundFanartFadetime</include>
            <timeperimage>HomeTimePerImage</timeperimage>
            <include condition="Skin.HasSetting(homemenu.clean.flix)">GlobalBackgroundFadeCleanFlix</include>
            <randomize>true</randomize>
            <aspectratio>scale</aspectratio>
            <imagepath background="true">$VAR[GlobalBackgroundImage]</imagepath>
            <include>Animation.Animate.Fanart</include>
        </control>
        <control type="image" description="FanartOverlay">
            <include>Dimensions_Fullscreen</include>
            <include condition="!Skin.HasSetting(home.vertical)">Animation.FadeFromHome</include>
            <texture colordiffuse="FloorFade">common/floor.png</texture>
            <visible>![Skin.HasSetting(EnableEffects) + Skin.HasSetting(BlurOnHome)]</visible>
        </control>
    </include>

    <variable name="ClickToJump">
        <value condition="Control.IsVisible(501)">SetFocus(501)</value>
        <value condition="Control.IsVisible(507)">SetFocus(507)</value>
        <value condition="Control.IsVisible(504)">SetFocus(504)</value>
        <value condition="Control.IsVisible(50)">SetFocus(50)</value>
        <value condition="Control.IsVisible(51)">SetFocus(51)</value>
        <value condition="Control.IsVisible(52)">SetFocus(52)</value>
        <value condition="Control.IsVisible(53)">SetFocus(53)</value>
        <value condition="Control.IsVisible(54)">SetFocus(54)</value>
        <value condition="Control.IsVisible(56)">SetFocus(56)</value>
        <value condition="Control.IsVisible(57)">SetFocus(57)</value>
        <value condition="Control.IsVisible(58)">SetFocus(58)</value>
        <value condition="Control.IsVisible(59)">SetFocus(59)</value>
        <value condition="Control.IsVisible(500)">SetFocus(500)</value>
        <value condition="Control.IsVisible(55)">SetFocus(55)</value>
        <value condition="Control.IsVisible(555)">SetFocus(555)</value>
        <value condition="Control.IsVisible(550)">SetFocus(550)</value>
        <value condition="Control.IsVisible(509)">SetFocus(509)</value>
        <value condition="Control.IsVisible(505)">SetFocus(505)</value>
        <value condition="Control.IsVisible(519)">SetFocus(519)</value>
        <value condition="Control.IsVisible(511)">SetFocus(511)</value>
        <value condition="Control.IsVisible(512)">SetFocus(512)</value>
        <value condition="Control.IsVisible(513)">SetFocus(513)</value>
        <value condition="Control.IsVisible(514)">SetFocus(514)</value>
        <value condition="Control.IsVisible(515)">SetFocus(515)</value>
        <value condition="Control.IsVisible(5161)">SetFocus(5161)</value>
        <value condition="Control.IsVisible(516)">SetFocus(516)</value>
        <value condition="Control.IsVisible(517)">SetFocus(517)</value>
    </variable>

    <include name="buttontextures">
        <param name="color" value="$PARAM[color]" default="Dark4"/>
        <definition>
        <font>Null</font>
        <textcolor>Dark2</textcolor>
        <texturenofocus colordiffuse="$PARAM[color]" border="0">common/boxsquare.png</texturenofocus>
        <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
        <textureradioonfocus colordiffuse="FFFFFFFF">$PARAM[icon]</textureradioonfocus>
        <textureradioonnofocus colordiffuse="FFFFFFFF">$PARAM[icon]</textureradioonnofocus>
        <textureradioofffocus colordiffuse="FFFFFFFF">$PARAM[icon]</textureradioofffocus>
        <textureradiooffnofocus colordiffuse="FFFFFFFF">$PARAM[icon]</textureradiooffnofocus>
        <textureradiooffdisabled colordiffuse="1FFFFFFF">$PARAM[icon]</textureradiooffdisabled>
        <textureradioondisabled colordiffuse="1FFFFFFF">$PARAM[icon]</textureradioondisabled>
        </definition>
    </include>

    <include name="buttontexturesnumpad">
        <font>Null</font>
        <textcolor>Dark2</textcolor>
        <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
        <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
        <textureradioonfocus colordiffuse="FFFFFFFF">$PARAM[icon]</textureradioonfocus>
        <textureradioonnofocus colordiffuse="FFFFFFFF">$PARAM[icon]</textureradioonnofocus>
        <textureradioofffocus colordiffuse="FFFFFFFF">$PARAM[icon]</textureradioofffocus>
        <textureradiooffnofocus colordiffuse="FFFFFFFF">$PARAM[icon]</textureradiooffnofocus>
        <textureradiooffdisabled colordiffuse="disabled">$PARAM[icon]</textureradiooffdisabled>
        <textureradioondisabled colordiffuse="disabled">$PARAM[icon]</textureradioondisabled>
    </include>

    <include name="buttondimensionskeyboard">
        <width>$PARAM[keyboardbuttonwidth]</width>
        <height>$PARAM[keyboardbuttonheight]</height>
        <radioposx>$PARAM[keyboardbuttonradioposx]</radioposx>
        <radioposy>$PARAM[keyboardbuttonradioposy]</radioposy>
        <radiowidth>48</radiowidth>
    </include>

    <include name="buttondimensionsnumpad">
        <width>186</width>
        <height>89</height>
        <radioposx>70</radioposx>
        <radioposy>30</radioposy>
        <radiowidth>48</radiowidth>
    </include>

    <include name="buttondimensions">
        <width>134</width>
        <height>88</height>
        <radioposx>42</radioposx>
        <radioposy>18</radioposy>
        <radiowidth>48</radiowidth>
    </include>

    <include name="buttondimensionssquare">
        <width>126</width>
        <height>88</height>
        <radioposx>40</radioposx>
        <radioposy>18</radioposy>
        <radiowidth>48</radiowidth>
    </include>

    <include name="buttondimensionssquareblur">
        <width>76</width>
        <height>88</height>
        <radioposx>14</radioposx>
        <radioposy>18</radioposy>
        <radiowidth>48</radiowidth>
    </include>

    <include name="listdimensions">
        <height>68</height>
        <bottom>33</bottom>
        <itemgap>28</itemgap>
    </include>

    <variable name="ListItemAudioCodec">
        <value condition="$EXP[IsAudioCodecATMOS]">atmos</value>
        <value condition="$EXP[IsAudioCodecDTSX]">dts-x</value>
        <value condition="VideoPlayer.IsFullscreen">$INFO[VideoPlayer.AudioCodec]</value>
        <value>$INFO[ListItem.AudioCodec]</value>
    </variable>

    <variable name="ListItemHDR">
        <value condition="$EXP[IsVideoHDR10Plus]">hdr10+</value>
        <value condition="$EXP[IsVideoHDR10]">hdr10</value>
        <value condition="$EXP[IsVideoHDR]">hdr</value>
        <value condition="$EXP[IsVideoHLG]">hlg</value>
        <value condition="$EXP[IsVideoDolbyVision]">dolby vision</value>
    </variable>

    <include name="weatherlist">
        <control type="group">
            <height>106</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <centertop>50%</centertop>
                <centerleft>17%</centerleft>
                <width>90</width>
                <height>90</height>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>resource://resource.images.weathericons.default/$INFO[Window(weather).Property(Hourly.$PARAM[DayId].FanartCode),,.png]</texture>
                <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
            </control>
            <control type="image">
                <centertop>50%</centertop>
                <centerleft>17%</centerleft>
                <width>90</width>
                <height>90</height>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Hourly.$PARAM[DayId].FanartCode),,.png]</texture>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="multiimage">
                <centertop>50%</centertop>
                <centerleft>17%</centerleft>
                <width>90</width>
                <height>90</height>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <imagepath>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Hourly.$PARAM[DayId].FanartCode)]</imagepath>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated) + !String.IsEmpty(Window(weather).Property(Hourly.$PARAM[DayId].FanartCode))</visible>
            </control>
            <control type="label">
                <top>5</top>
                <left>150</left>
                <right>20</right>
                <align>left</align>
                <width>150</width>
                <font>Small33</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[Window.Property(Hourly.$PARAM[DayId].Time),[B],[/B]]</label>
            </control>
            <control type="label">
                <top>35</top>
                <left>150</left>
                <right>20</right>
                <align>left</align>
                <width>160</width>
                <font>Tiny</font>
                <scroll>false</scroll>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[Window.Property(Hourly.$PARAM[DayId].Outlook)]</label>
            </control>
            <control type="label">
                <top>8</top>
                <left>20</left>
                <right>30</right>
                <align>right</align>
                <font>Medium</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[Window.Property(Hourly.$PARAM[DayId].Temperature),[B],[/B]]</label>
            </control>
            <control type="label">
                <top>8</top>
                <left>20</left>
                <right>40%</right>
                <align>right</align>
                <font>Tiny</font>
                <textcolor>PanelWhite100</textcolor>
                <visible>String.IsEmpty(Window.Property(Hourly.$PARAM[DayId].Temperature))</visible>
                <label> - $LOCALIZE[10006] - </label>
            </control>
        </control>
    </include>

    <include name="weatherlisttop">
        <width>$PARAM[weatherwidth]</width>
        <height>PosterH</height>
        <posy>PosterPad</posy>
        <left>$PARAM[weatherleft]</left>
        <control type="image">
            <width>100%</width>
            <height>100%</height>
            <texture border="5" colordiffuse="Panel">common/box.png</texture>
        </control>
        <control type="multiimage" description="Fanart">
            <visible>!Skin.HasSetting(weather.hidefanart)</visible>
            <width>100%</width>
            <height>100%</height>
            <include>BackgroundFanartFadetime</include>
            <timeperimage>HomeTimePerImage</timeperimage>
            <randomize>true</randomize>
            <aspectratio>scale</aspectratio>
            <animation effect="fade" start="100" end="10" condition="true">Conditional</animation>
            <imagepath background="true">$INFO[Skin.String(weather.fanart.path)]$INFO[Window(Weather).Property(Hourly.$PARAM[weatherfanartcode].FanartCode)]/</imagepath>
        </control>
        <control type="image">
            <left>0</left>
            <top>0</top>
            <right>0</right>
            <bottom>0</bottom>
            <texture colordiffuse="BoxNotification" border="4" background="true">common/box21.png</texture>
            <visible>!Skin.HasSetting(thumbnails.white)</visible>
        </control>
    </include>

    <include name="weatherlistinput">
        <posy>PosterPad</posy>
        <left>SidePad</left>
        <right>SidePad</right>
        <height>PosterH</height>
        <include>Animation.Weather</include>
        <control type="image">
            <width>1760</width>
            <height>640</height>
            <texture colordiffuse="Box2" border="4" background="true">common/box21.png</texture>
            <visible>!Skin.HasSetting(thumbnails.white)</visible>
        </control>
        <control type="image">
            <left>1</left>
            <top>1</top>
            <right>1</right>
            <bottom>1</bottom>
            <width>1758</width>
            <height>638</height>
            <texture border="5" colordiffuse="Panel">common/box.png</texture>
        </control>
        <control type="image">
            <left>1</left>
            <top>1</top>
            <right>1</right>
            <bottom>1</bottom>
            <width>1758</width>
            <height>638</height>
            <texture>$INFO[Window.Property(Map.$PARAM[InputId].Area)]</texture>
            <aspectratio align="center" aligny="center">scale</aspectratio>
        </control>
        <control type="image">
            <left>1</left>
            <top>1</top>
            <right>1</right>
            <bottom>1</bottom>
            <width>1758</width>
            <height>638</height>
            <texture>$INFO[Window.Property(Map.$PARAM[InputId].Layer)]</texture>
            <aspectratio align="center" aligny="center">scale</aspectratio>
            <animation type="Conditional" condition="true" reversible="false">
                <effect type="fade" end="40" start="100" time="0"/>
            </animation>
        </control>
        <control type="label">
            <top>510</top>
            <width>1401</width>
            <height>70</height>
            <align>right</align>
            <right>12</right>
            <textcolor>B3000000</textcolor>
            <shadowcolor>white</shadowcolor>
            <font>Tiny</font>
            <label>[B]$INFO[ListItem.Label][/B]</label>
        </control>
        <control type="image">
            <top>569</top>
            <width>1401</width>
            <height>60</height>
            <right>11</right>
            <texture>$INFO[Window.Property(Map.$PARAM[InputId].Legend)]</texture>
            <aspectratio align="right" aligny="bottom">keep</aspectratio>
        </control>
    </include>

    <include name="weatherlistinputpagetwo">
        <control type="group">
            <width>285</width>
            <height>PosterH</height>
            <posy>PosterPad</posy>
            <left>$PARAM[weatherlistinputpagetwoleft]</left>
            <control type="image">
                <width>100%</width>
                <height>100%</height>
                <texture border="5" colordiffuse="Panel">common/box.png</texture>
            </control>
            <control type="multiimage" description="Fanart">
                <visible>!Skin.HasSetting(weather.hidefanart) + String.Contains(Skin.String(weather.fanart.path),multi) + !String.IsEmpty(Skin.String(weather.fanart.path))</visible>
                <width>100%</width>
                <height>100%</height>
                <include>BackgroundFanartFadetime</include>
                <timeperimage>HomeTimePerImage</timeperimage>
                <randomize>true</randomize>
                <aspectratio>scale</aspectratio>
                <animation effect="fade" start="100" end="10" condition="true">Conditional</animation>
                <imagepath background="true">$INFO[Skin.String(weather.fanart.path)]$INFO[Window.Property(Daily.$PARAM[Daily].FanartCode)]/</imagepath>
            </control>
            <control type="image" description="Fanart">
                <visible>!Skin.HasSetting(weather.hidefanart) + !String.Contains(Skin.String(weather.fanart.path),multi) + !String.IsEmpty(Skin.String(weather.fanart.path))</visible>
                <width>100%</width>
                <height>100%</height>
                <aspectratio>scale</aspectratio>
                <animation effect="fade" start="100" end="10" condition="true">Conditional</animation>
                <texture background="true">$INFO[Skin.String(weather.fanart.path)]$INFO[Window.Property(Daily.$PARAM[Daily].FanartCode),,.jpg]</texture>
            </control>
            <control type="image">
                <centertop>35%</centertop>
                <centerleft>50%</centerleft>
                <width>285</width>
                <height>285</height>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window.Property(Daily.$PARAM[Daily].FanartCode),,.png]</texture>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="multiimage">
                <centertop>35%</centertop>
                <centerleft>50%</centerleft>
                <width>285</width>
                <height>285</height>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <imagepath>$INFO[Skin.String(weather.icons.path),,/]$INFO[Window(weather).Property(Daily.$PARAM[Daily].FanartCode)]</imagepath>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated) + !String.IsEmpty(Window(weather).Property(Daily.$PARAM[Daily].FanartCode))</visible>
            </control>
            <control type="image">
                <centertop>35%</centertop>
                <centerleft>50%</centerleft>
                <width>240</width>
                <height>240</height>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>resource://resource.images.weathericons.default/$INFO[Window.Property(Daily.$PARAM[Daily].FanartCode),,.png]</texture>
                <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
            </control>
            <control type="label">
                <top>20</top>
                <left>20</left>
                <right>20</right>
                <align>center</align>
                <font>Small</font>
                <textcolor>PanelWhite100</textcolor>
                <label fallback="10006">$INFO[Window.Property(Daily.$PARAM[Daily].LongDay)]</label>
            </control>
            <control type="label">
                <centertop>65%</centertop>
                <left>20</left>
                <right>20</right>
                <align>center</align>
                <font>LargeBold</font>
                <textcolor>PanelWhite100</textcolor>
                <label fallback="10006">$INFO[Window.Property(Daily.$PARAM[Daily].HighTemperature),[B],[/B]]$INFO[Window.Property(Daily.$PARAM[Daily].lowTemperature),  ,]</label>
            </control>
            <control type="textbox">
                <top>76%</top>
                <height>130</height>
                <left>20</left>
                <right>20</right>
                <align>center</align>
                <font>Tiny</font>
                <textcolor>PanelWhite100</textcolor>
                <label fallback="10006">$INFO[Window(Weather).Property(Daily.$PARAM[Daily].Outlook)]</label>
            </control>
            <control type="image">
                <left>0</left>
                <top>0</top>
                <right>0</right>
                <bottom>0</bottom>
                <texture colordiffuse="BoxNotification" border="4" background="true">common/box21.png</texture>
                <visible>!Skin.HasSetting(thumbnails.white)</visible>
            </control>
        </control>
    </include>

    <include name="DialogConfirmButtons">
        <control type="button" id="12">
            <description>Yes</description>
            <width>270</width>
            <label>107</label>
            <font>Button</font>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
        </control>
        <control type="button" id="11">
            <description>Yes</description>
            <width>270</width>
            <label>107</label>
            <font>Button</font>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
        </control>
        <control type="button" id="10">
            <description>No</description>
            <width>270</width>
            <label>106</label>
            <font>Button</font>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
        </control>
    </include>

    <include name="DialogMusicInfoNavigation">
        <control type="grouplist" id="9000">
            <bottom>144</bottom>
            <left>783</left>
            <right>SidePad</right>
            <include>listdimensions</include>
            <orientation>horizontal</orientation>
            <ondown condition="Control.HasFocus(9002) + String.IsEqual(Window.Property(ShowDisc),1) + !String.IsEmpty(ListItem.Art(discart)) + String.IsEmpty(Window.Property(RotateCover))">ClearProperty(ShowDisc)</ondown>
            <ondown condition="Control.HasFocus(9002) + String.IsEqual(Window.Property(ShowDisc),1) + !String.IsEmpty(ListItem.Art(discart))">ClearProperty(RotateCover)</ondown>
            <ondown condition="!String.IsEqual(Window.Property(ShowDisc),1) + !String.IsEqual(Window.Property(RotateCover),1)">9601</ondown>
            <onup condition="String.IsEqual(Window.Property(musiccontent),2)">9501</onup>
            <onup condition="String.IsEqual(Window.Property(musiccontent),3)">9502</onup>
            <onup condition="String.IsEqual(Window.Property(musiccontent),4) + Integer.IsGreater(Container(9503).NumItems,0)">95031</onup>
            <onup condition="String.IsEqual(Window.Property(musiccontent),1)">9009</onup>
            <onup condition="String.IsEqual(Window.Property(musiccontent),8) + Integer.IsGreater(Container(9508).NumItems,1)">9508</onup>
            <onup condition="Control.HasFocus(9002) + !String.IsEqual(Window.Property(ShowDisc),1) + !String.IsEmpty(ListItem.Art(discart))">SetProperty(ShowDisc,1)</onup>
            <onup condition="Control.HasFocus(9002) + String.IsEqual(Window.Property(ShowDisc),1) + !String.IsEmpty(ListItem.Art(discart)) + !String.IsEmpty(ListItem.Art(back))">SetProperty(RotateCover,1)</onup>
            <onup condition="Control.HasFocus(9002) + String.IsEqual(Window.Property(ShowDisc),1) + !String.IsEmpty(ListItem.Art(discart)) + String.IsEmpty(ListItem.Art(back))">ClearProperty(ShowDisc)</onup>
            <onup condition="Control.HasFocus(9002) + String.IsEqual(Window.Property(ShowDisc),1) + String.IsEqual(Window.Property(RotateCover),1) + !String.IsEmpty(ListItem.Art(discart))">ClearProperty(RotateCover)</onup>
            <onup condition="Control.HasFocus(9002) + String.IsEqual(Window.Property(ShowDisc),1) + String.IsEqual(Window.Property(RotateCover),1) + !String.IsEmpty(ListItem.Art(discart))">ClearProperty(ShowDisc)</onup>
            <onup condition="String.IsEmpty(Window.Property(musiccontent))">9010</onup>
            <control type="radiobutton" id="9001">
                <visible>[String.IsEqual(ListItem.DBType,album) | String.IsEqual(ListItem.DBType,song)] + ![ListItem.IsPlaying | [!String.IsEmpty(ListItem.FolderPath) + String.IsEqual(ListItem.FileNameAndPath,Player.Folderpath)]]</visible>
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>ClearProperty(RotateCover)</onfocus>
                <onclick condition="String.IsEmpty(ListItem.DBID)">PlayMedia($INFO[ListItem.FilenameAndPath])</onclick>
                <onclick condition="System.HasAddon(script.playalbum) + String.IsEqual(ListItem.DBType,song) + !String.IsEmpty(ListItem.DBID)">RunScript(script.playalbum,songid=$INFO[ListItem.DBID])</onclick>
                <onclick condition="System.HasAddon(script.playalbum) + String.IsEqual(ListItem.DBType,album) + !String.IsEmpty(ListItem.DBID)">RunScript(script.playalbum,albumid=$INFO[ListItem.DBID])</onclick>
                <onclick condition="!System.HasAddon(script.playalbum) + !String.IsEmpty(ListItem.DBID)">InstallAddon(script.playalbum)</onclick>
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/play.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9201">
                <visible>[String.IsEqual(ListItem.DBType,album) | String.IsEqual(ListItem.DBType,song)] + [ListItem.IsPlaying | [!String.IsEmpty(ListItem.FolderPath) + String.IsEqual(ListItem.FileNameAndPath,Player.Folderpath)]]</visible>
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>ClearProperty(RotateCover)</onfocus>
                <include>buttondimensionssquare</include>
                <onclick condition="Player.Playing">Pause</onclick>
                <onclick condition="!Player.Playing">Play</onclick>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/pause.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/pause.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradiooffnofocus>
                <selected>Player.Playing</selected>
            </control>

            <!-- Info (Startseite) Button -->
            <control type="radiobutton" id="9002">
                <visible>!String.IsEqual(ListItem.DBType,song)</visible>
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/info.png"/>
                </include>
            </control>

            <!-- Tracklist Button -->
            <control type="radiobutton" id="9003">
                <visible>String.IsEqual(ListItem.DBType,album)</visible>
                <onfocus condition="!String.IsEqual(Window.Property(musiccontent),1)">ClearProperty(musiccontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>ClearProperty(RotateCover)</onfocus>
                <onfocus>SetProperty(musiccontent,1)</onfocus>
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/musictracklist.png"/>
                </include>
            </control>

            <!-- SETS Button -->
            <control type="radiobutton" id="9004">
                <visible>String.IsEqual(ListItem.DBType,artist)</visible>
                <onfocus condition="!String.IsEqual(Window.Property(musiccontent),2)">ClearProperty(musiccontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>SetProperty(musiccontent,2)</onfocus>
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/set.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.music.sets)</visible>
            </control>

            <!-- Youtube Button -->
            <control type="radiobutton" id="9005">
                <onfocus condition="!String.IsEqual(Window.Property(musiccontent),3)">ClearProperty(musiccontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>SetProperty(musiccontent,3)</onfocus>
                <onfocus>SetProperty(musicyoutube,1)</onfocus>
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/youtube.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.music.youtube)</visible>
            </control>

            <!-- Fanart Button -->
            <control type="radiobutton" id="9006">
                <visible>String.IsEqual(ListItem.DBType,artist)</visible>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus condition="!String.IsEqual(Window.Property(musiccontent),4)">ClearProperty(musiccontent)</onfocus>
                <onfocus>SetProperty(musiccontent,4)</onfocus>
                <font>Button</font>
                <textcolor>Dark2</textcolor>
                <include>buttondimensionssquare</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/image.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.music.fanart)</visible>
            </control>

            <!-- Rating Button -->
            <control type="radiobutton" id="9007">
                <visible>!String.IsEqual(ListItem.DBType,artist)</visible>
                <include>OnFocusOnClick</include>
                <include>ClearOnFocusOnClick</include>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <onclick>SendClick(7)</onclick>
                <include>buttondimensionssquare</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/rating.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/rating.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/rating_new.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/rating_new.png</textureradiooffnofocus>
                <selected>String.IsEmpty(ListItem.UserRating)</selected>
                <textcolor>Dark4</textcolor>
                <font>Null</font>
                <visible>!Skin.HasSetting(hidebutton.music.rating)</visible>
            </control>

            <!-- More Of Artist Button -->
            <control type="radiobutton" id="9029">
                <visible>String.IsEqual(ListItem.DBType,song)</visible>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus condition="!String.IsEqual(Window.Property(musiccontent),8)">ClearProperty(musiccontent)</onfocus>
                <onfocus>SetProperty(musiccontent,8)</onfocus>
                <font>Button</font>
                <textcolor>Dark2</textcolor>
                <include>buttondimensionssquare</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/more.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.music.more)</visible>
            </control>

            <!-- Setting Button -->
            <control type="radiobutton" id="9008">
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/manage.png"/>
                </include>
                <onclick>SetFocus(9400)</onclick>
                <visible>!Skin.HasSetting(global.kioskmode)</visible>
            </control>
        </control>
    </include>

    <include name="DialogVideoInfoNavigation">
        <control type="grouplist" id="9000">
            <visible>true</visible>
            <bottom>224</bottom>
            <left>570</left>
            <right>81</right>
            <include>listdimensions</include>
            <ondown condition="String.IsEqual(Window.Property(moviecontent),1) + String.IsEqual(Window.Property(ShowDisc),1) + String.IsEqual(ListItem.DBType,movie) + !String.IsEmpty(ListItem.Art(discart))">ClearProperty(ShowDisc)</ondown>
            <ondown condition="!String.IsEqual(Window.Property(ShowDisc),1)">9601</ondown>
            <orientation>horizontal</orientation>
            <onup condition="String.IsEqual(Window.Property(moviecontent),2)">9502</onup>
            <onup condition="String.IsEqual(Window.Property(moviecontent),3)">9503</onup>
            <onup condition="String.IsEqual(Window.Property(moviecontent),4)">9504</onup>
            <onup condition="String.IsEqual(Window.Property(moviecontent),7)">9506</onup>
            <onup condition="String.IsEqual(Window.Property(moviecontent),8)">9515</onup>
            <onup condition="String.IsEqual(Window.Property(moviecontent),10)">9560</onup>
            <onup condition="String.IsEqual(Window.Property(moviecontent),5) + Integer.IsGreater(Container(9505).NumItems,0)">95051</onup>
            <onup condition="String.IsEqual(Window.Property(moviecontent),6)">7011</onup>
            <onup condition="String.IsEqual(Window.Property(moviecontent),1) + !String.IsEqual(Window.Property(ShowDisc),1) + String.IsEqual(ListItem.DBType,movie) + !String.IsEmpty(ListItem.Art(discart))">SetProperty(ShowDisc,1)</onup>
            <onup condition="String.IsEqual(Window.Property(moviecontent),1) + String.IsEqual(Window.Property(ShowDisc),1) + String.IsEqual(ListItem.DBType,movie) + !String.IsEmpty(ListItem.Art(discart))">ClearProperty(ShowDisc)</onup>
            <onup condition="String.IsEmpty(Window.Property(moviecontent))">50</onup>
            <control type="radiobutton" id="8">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <include>buttondimensions</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/play.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/play.png</textureradiooffnofocus>
                <selected>ListItem.IsResumable</selected>
                <visible>!ListItem.IsPlaying</visible>
                <visible>!String.IsEqual(ListItem.DBType,tvshow)</visible>
            </control>

            <control type="radiobutton" id="9078">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onclick condition="Skin.HasSetting(home.netflix.autoplay.trailer) + $EXP[TrailerIsPlaying] + !Skin.HasSetting(trailer.dont.stop.on.unfocus)">Stop</onclick>
                <onclick condition="Skin.HasSetting(home.netflix.autoplay.trailer) + $EXP[TrailerIsPlaying] + !Skin.HasSetting(trailer.dont.stop.on.unfocus)">ClearProperty(TrailerPath,home)</onclick>
                <onclick>SendClick(8)</onclick>
                <include>buttondimensions</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/folder.png"/>
                </include>
                <visible>String.IsEqual(ListItem.DBType,tvshow)</visible>
            </control>

            <control type="radiobutton" id="9201">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <include>buttondimensions</include>
                <onclick condition="Player.Playing">Pause</onclick>
                <onclick condition="!Player.Playing">Play</onclick>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/pause.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/pause.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradiooffnofocus>
                <selected>Player.Playing</selected>
                <visible>ListItem.IsPlaying</visible>
            </control>

            <control type="radiobutton" id="9077">
                <visible>String.IsEqual(ListItem.DBType,tvshow) + Integer.IsGreater(ListItem.Property(UnwatchedEpisodes),0) + !String.IsEmpty(ListItem.DBID) + !Skin.HasSetting(HideNextUpEpisodeButton) + !String.IsEmpty(Container(9911).ListItem.FileNameAndPath)</visible>
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onclick>Dialog.Close(all)</onclick>
                <onclick>PlayMedia($ESCINFO[Container(9911).ListItem.FileNameAndPath])</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/upnext.png"/>
                </include>
            </control>

            <control type="radiobutton" id="9001">
                <visible>String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow) | String.IsEqual(ListItem.DBType,episode)</visible>
                <onfocus condition="!String.IsEqual(Window.Property(moviecontent),1)">ClearProperty(moviecontent)</onfocus>
                <onfocus>SetProperty(moviecontent,1)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/info.png"/>
                </include>
            </control>
            
            <!-- Trailer - ListItem.Trailer | IMDB.Trailer | Bingie.Helper -->
            <control type="radiobutton" id="1224">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/trailer.png"/>
                </include>
                <visible>!Skin.HasSetting(PlayTrailerWindowed) + [[Skin.HasSetting(Use.IMDB.Trailer) + System.AddonIsEnabled(plugin.video.imdb.trailers) + !String.IsEmpty(ListItem.IMDBNumber)] | [!Skin.HasSetting(Use.IMDB.Trailer) + String.IsEmpty(ListItem.Trailer) + System.AddonIsEnabled(script.bingie.helper)] | [!Skin.HasSetting(Use.IMDB.Trailer) + !String.IsEmpty(ListItem.Trailer)]]</visible>                
                <onclick condition="Skin.HasSetting(Use.IMDB.Trailer) | String.IsEmpty(ListItem.Trailer)">Dialog.Close(2003)</onclick>                
                <onclick condition="!Skin.HasSetting(Use.IMDB.Trailer) + !String.IsEmpty(ListItem.Trailer)">SendClick(11)</onclick>
                <onclick condition="!Skin.HasSetting(Use.IMDB.Trailer) + String.IsEmpty(ListItem.Trailer) + System.AddonIsEnabled(script.bingie.helper)">RunScript(script.bingie.helper,action=playtrailer,MODE=fullscreen,title=$INFO[ListItem.Title],local=true)</onclick>
                <onclick condition="Skin.HasSetting(Use.IMDB.Trailer)">PlayMedia(plugin://plugin.video.imdb.trailers/?action=play_id&amp;imdb=$INFO[ListItem.IMDBNumber])</onclick>                
                <visible>!Skin.HasSetting(hidebutton.video.trailer)</visible>
            </control>

            <!-- Trailer Windowed - ListItem.Trailer | IMDB.Trailer | Bingie.Helper -->
            <control type="radiobutton" id="1223">
                <onfocus condition="!String.IsEqual(Window.Property(moviecontent),6)">ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>SetProperty(moviecontent,6)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/trailer.png"/>
                </include>
                <visible>Skin.HasSetting(PlayTrailerWindowed) + [[Skin.HasSetting(Use.IMDB.Trailer) + System.AddonIsEnabled(plugin.video.imdb.trailers) + !String.IsEmpty(ListItem.IMDBNumber)] | [!Skin.HasSetting(Use.IMDB.Trailer) + String.IsEmpty(ListItem.Trailer) + System.AddonIsEnabled(script.bingie.helper)] | [!Skin.HasSetting(Use.IMDB.Trailer) + !String.IsEmpty(ListItem.Trailer)]]</visible>
                <onclick condition="!Skin.HasSetting(Use.IMDB.Trailer) + !String.IsEmpty(ListItem.Trailer)">PlayMedia($INFO[ListItem.Trailer],1)</onclick>
                <onclick condition="!Skin.HasSetting(Use.IMDB.Trailer) + String.IsEmpty(ListItem.Trailer) + System.AddonIsEnabled(script.bingie.helper)">RunScript(script.bingie.helper,action=playtrailer,MODE=windowed,title=$INFO[ListItem.Title],local=true)</onclick>
                <onclick condition="Skin.HasSetting(Use.IMDB.Trailer)">PlayMedia(plugin://plugin.video.imdb.trailers/?action=play_id&amp;imdb=$INFO[ListItem.IMDBNumber],1)</onclick>
                <visible>!Skin.HasSetting(hidebutton.video.trailer)</visible>
            </control>

            <!-- Cinema -->
            <control type="radiobutton" id="49">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <description>Home Theatre</description>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/playcinema.png"/>
                </include>
                <onclick>RunScript(script.embuary.helper,action=playcinema,dbid=$INFO[ListItem.DBID],type=$INFO[ListItem.DBType],title='$ESCINFO[ListItem.Title]')</onclick>
                <visible>String.IsEqual(ListItem.DBTYPE,movie) | String.IsEqual(ListItem.DBTYPE,episode)</visible>
                <visible>Skin.HasSetting(hidebutton.video.cinema)</visible>
            </control>
            <control type="radiobutton" id="7">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <include>OnFocusOnClick</include>
                <include>ClearOnFocusOnClick</include>
                <include>buttondimensions</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/rating.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/rating.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/rating_new.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/rating_new.png</textureradiooffnofocus>
                <selected>String.IsEmpty(ListItem.UserRating)</selected>
                <visible>[String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow) | String.IsEqual(ListItem.DBType,episode)] + Control.IsEnabled(7)</visible>
                <visible>!Skin.HasSetting(hidebutton.video.rating)</visible>
            </control>
            <control type="radiobutton" id="1236">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <include>OnFocusOnClick</include>
                <include>ClearOnFocusOnClick</include>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/more.png"/>
                </include>
                <visible>System.AddonIsEnabled(plugin.video.specialfeatures)</visible>
                <visible>String.IsEqual(Window(home).Property(SpecialFeatures.Visible),true)</visible>
                <onclick>Action(close)</onclick>
                <onclick>RunScript(plugin.video.specialfeatures,listitem)</onclick>
                <visible>!Skin.HasSetting(hidebutton.video.specialfeatures)</visible>
            </control>
            <control type="radiobutton" id="9002">
                <visible>String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)</visible>
                <onfocus condition="!String.IsEqual(Window.Property(moviecontent),2)">ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>SetProperty(moviecontent,2)</onfocus>
                <onfocus>SetProperty(videosimilar,1)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/similar.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.video.similar)</visible>
            </control>
            <control type="radiobutton" id="9003">
                <visible>String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)</visible>
                <onfocus condition="!String.IsEqual(Window.Property(moviecontent),3)">ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>SetProperty(moviecontent,3)</onfocus>
                <onfocus>SetProperty(videostudio,1)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/studio.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.video.studio)</visible>
            </control>
            <control type="radiobutton" id="9006">
                <visible>String.IsEqual(ListItem.DBType,movie)</visible>
                <onfocus condition="!String.IsEqual(Window.Property(moviecontent),6)">ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>SetProperty(moviecontent,7)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/director.png"/>
                </include>
                <visible>Skin.HasSetting(showbutton.video.director)</visible>
            </control>
            <control type="radiobutton" id="9015">
                <visible>String.IsEqual(ListItem.DBType,movie)</visible>
                <onfocus condition="!String.IsEqual(Window.Property(moviecontent),6)">ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>SetProperty(moviecontent,8)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/set.png"/>
                </include>
                <visible>Skin.HasSetting(showbutton.video.set) + !String.IsEmpty(ListItem.SetId)</visible>
            </control>
            <control type="radiobutton" id="9004">
                <visible>String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)</visible>
                <onfocus condition="!String.IsEqual(Window.Property(moviecontent),4)">ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>SetProperty(moviecontent,4)</onfocus>
                <onfocus>SetProperty(videoyoutube,1)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/youtube.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.video.youtube)</visible>
            </control>
            <control type="radiobutton" id="9005">
                <onfocus condition="!String.IsEqual(Window.Property(moviecontent),5)">ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <onfocus>SetProperty(moviecontent,5)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/image.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.video.fanart)</visible>
            </control>
            <control type="radiobutton" id="9011">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/trakt.png"/>
                </include>
                <onclick condition="!String.IsEmpty(ListItem.Property(tmdb_id))">RunScript(plugin.video.themoviedb.helper,sync_trakt=watchlist,tmdb_id=$INFO[ListItem.Property(tmdb_id)],cache_refresh)</onclick>
                <onclick condition="String.IsEmpty(ListItem.Property(tmdb_id))">RunScript(plugin.video.themoviedb.helper,sync_trakt=watchlist,tmdb_id=$INFO[window(home).property(tmdbhelper.listitem.tmdb_id)],$VAR[DB_type],cache_refresh)</onclick>
                <visible>!Skin.HasSetting(hidebutton.video.trakt) + [!String.IsEmpty(ListItem.Property(tmdb_id)) | !String.IsEmpty(window(home).property(tmdbhelper.listitem.tmdb_id))] + [String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)] + !String.IsEmpty(Window(Home).Property(TMDbHelper.TraktIsAuth))</visible>
            </control>
            <control type="radiobutton" id="9010">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(ShowDisc)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/manage.png"/>
                </include>
                <onclick>SetFocus(9400)</onclick>
                <visible>!Skin.HasSetting(global.kioskmode)</visible>
            </control>
        </control>
    </include>

    <include name="DialogExtendedVideoInfoNavigation">
        <control type="grouplist" id="9000">
            <bottom>224</bottom>
            <left>571</left>
            <right>SidePad</right>
            <include>listdimensions</include>
            <ondown>9601</ondown>
            <onup condition="Control.IsVisible(50)">51</onup>
            <onup condition="Control.IsVisible(9501)">9501</onup>
            <onup condition="Control.IsVisible(10052)">10052</onup>
            <onup condition="Control.IsVisible(10053)">10053</onup>
            <onup condition="Control.IsVisible(10054)">10054</onup>
            <onup condition="Control.IsVisible(10100)">10100</onup>
            <orientation>horizontal</orientation>
            <control type="radiobutton" id="9001">
                <onfocus>ClearProperty(actinfo)</onfocus>
                <onup>10054</onup>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/thumb.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9002">
                <onfocus condition="!String.IsEqual(Window.Property(actinfo),1)">ClearProperty(actinfo)</onfocus>
                <onfocus>SetProperty(actinfo,1)</onfocus>
                <onfocus>SetProperty(extendedtype,movie,home)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/trailer.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9003">
                <onfocus condition="!String.IsEqual(Window.Property(actinfo),2)">ClearProperty(actinfo)</onfocus>
                <onfocus>SetProperty(actinfo,2)</onfocus>
                <onfocus>SetProperty(extendedtype,tv,home)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/tvshows.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9119">
                <onfocus condition="!String.IsEqual(Window.Property(actinfo),5)">ClearProperty(actinfo)</onfocus>
                <onfocus>SetProperty(actinfo,5)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/youtube.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9007">
                <onfocus>ClearProperty(actinfo)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/settings.png"/>
                </include>
                <visible>!Skin.HasSetting(global.kioskmode)</visible>
                <onclick condition="System.HasAddon(script.embuary.info)">Addon.OpenSettings(script.embuary.info)</onclick>
            </control>
        </control>
    </include>

    <include name="DialogExtendedPersonInfoNavigation">
        <control type="grouplist" id="9000">
            <onup condition="String.IsEqual(Window.Property(videoinfo),1)">10053</onup>
            <onup condition="String.IsEqual(Window.Property(videoinfo),2)">10054</onup>
            <onup condition="String.IsEqual(Window.Property(videoinfo),3)">10055</onup>
            <onup condition="String.IsEqual(Window.Property(videoinfo),4)">10056</onup>
            <onup condition="String.IsEqual(Window.Property(videoinfo),5)">10058</onup>
            <onup condition="String.IsEqual(Window.Property(videoinfo),6)">10057</onup>
            <onup condition="String.IsEmpty(Window.Property(videoinfo))">10052</onup>
            <bottom>224</bottom>
            <left>571</left>
            <right>SidePad</right>
            <include>listdimensions</include>
            <ondown>9601</ondown>
            <orientation>horizontal</orientation>
            <control type="radiobutton" id="8">
                <onfocus>ClearProperty(videoinfo)</onfocus>
                <visible>[!String.IsEmpty(Container(10051).ListItem.DBID) + !String.IsEmpty(Container(10051).ListItem.Property(file)) + !String.IsEqual(Container(10051).ListItem.Property(call),tv)] | [!String.IsEmpty(Container(10051).ListItem.DBID) + String.IsEqual(Container(10051).ListItem.Property(call),tv)] | [Skin.HasSetting(extended.info.override.play)]</visible>
                <onclick condition="[!String.IsEmpty(Container(10051).ListItem.DBID) + !String.IsEmpty(Container(10051).ListItem.Property(file)) + !String.IsEqual(Container(10051).ListItem.Property(call),tv)] + !Skin.HasSetting(extended.info.override.play)">PlayMedia($INFO[Container(10051).ListItem.Property(file)])</onclick>
                <onclick condition="!Window.IsVisible(MyVideoNav.xml) + [!String.IsEmpty(Container(10051).ListItem.DBID) + String.IsEqual(Container(10051).ListItem.Property(call),tv)] + !Skin.HasSetting(extended.info.override.play)">ActivateWindow(videos,videodb://tvshows/titles/$INFO[Container(10051).ListItem.DBID]/,return)</onclick>
                <onclick condition="Window.IsVisible(MyVideoNav.xml) + [!String.IsEmpty(Container(10051).ListItem.DBID) + String.IsEqual(Container(10051).ListItem.Property(call),tv)] + !Skin.HasSetting(extended.info.override.play)">Container.Update(videodb://tvshows/titles/$INFO[Container(10051).ListItem.DBID]/)</onclick>
                <onclick condition="!String.IsEmpty(Container(90051).ListItem.Property(TMDb_ID)) + Skin.HasSetting(extended.info.override.play)">RunPlugin(plugin://plugin.video.themoviedb.helper?info=play&amp;tmdb_id=$INFO[Container(90051).ListItem.Property(TMDb_ID)]&amp;type=movie)</onclick>
                <onclick>Dialog.Close(all)</onclick>
                <enable>[!String.IsEmpty(Container(90051).ListItem.Property(TMDb_ID)) + Skin.HasSetting(extended.info.override.play)] | !Skin.HasSetting(extended.info.override.play)</enable>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/play.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9001">
                <onfocus>ClearProperty(videoinfo)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/cast.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9002">
                <onfocus condition="!String.IsEqual(Window.Property(videoinfo),1)">ClearProperty(videoinfo)</onfocus>
                <onfocus>SetProperty(videoinfo,1)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/similar.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9003">
                <onfocus condition="!String.IsEqual(Window.Property(videoinfo),2)">ClearProperty(videoinfo)</onfocus>
                <onfocus>SetProperty(videoinfo,2)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/youtube.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9005">
                <onfocus condition="!String.IsEqual(Window.Property(videoinfo),4)">ClearProperty(videoinfo)</onfocus>
                <onfocus>SetProperty(videoinfo,4)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/crew.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9006">
                <visible>Integer.IsGreater(Container(10058).NumItems,0)</visible>
                <onfocus condition="!String.IsEqual(Window.Property(videoinfo),5)">ClearProperty(videoinfo)</onfocus>
                <onfocus>SetProperty(videoinfo,5)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/seasons.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9008">
                <visible>Integer.IsGreater(Container(10057).NumItems,0)</visible>
                <onfocus condition="!String.IsEqual(Window.Property(videoinfo),6)">ClearProperty(videoinfo)</onfocus>
                <onfocus>SetProperty(videoinfo,6)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/set.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9004">
                <onfocus condition="!String.IsEqual(Window.Property(videoinfo),3)">ClearProperty(videoinfo)</onfocus>
                <onfocus>SetProperty(videoinfo,3)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/image.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9007">
                <onfocus>ClearProperty(videoinfo)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/settings.png"/>
                </include>
                <visible>!Skin.HasSetting(global.kioskmode)</visible>
                <onclick condition="System.HasAddon(script.embuary.info)">Addon.OpenSettings(script.embuary.info)</onclick>
            </control>
        </control>
    </include>

    <include name="DialogAddonInfoNavigation">
        <control type="grouplist" id="9000">
            <bottom>224</bottom>
            <left>783</left>
            <right>SidePad</right>
            <include>listdimensions</include>
            <ondown>9601</ondown>
            <onup condition="Control.IsVisible(50)">50</onup>
            <orientation>horizontal</orientation>
            <control type="radiobutton" id="12">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/launch.png"/>
                </include>
                <textcolor>Dark4</textcolor>
                <font>Null</font>
                <visible>Control.IsEnabled(12)</visible>
            </control>
            <control type="radiobutton" id="6">
                <include>buttondimensionssquare</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/uninstall.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/uninstall.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/install.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/install.png</textureradiooffnofocus>
                <visible>!Skin.HasSetting(global.kioskmode)</visible>
                <visible>Control.IsEnabled(6)</visible>
                <textcolor>Dark4</textcolor>
                <font>Null</font>
                <selected>ListItem.Property(addon.isinstalled) | !Window.IsActive(addonbrowser)</selected>
            </control>
            <control type="radiobutton" id="7">
                <include>buttondimensionssquare</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/disable.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/disable.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/enabled.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/enabled.png</textureradiooffnofocus>
                <visible>!Skin.HasSetting(global.kioskmode)</visible>
                <visible>Control.IsEnabled(7)</visible>
                <textcolor>Dark4</textcolor>
                <font>Null</font>
                <selected>!String.StartsWith(Control.GetLabel(7),$LOCALIZE[24022]) | !Window.IsActive(addonbrowser)</selected>
            </control>
            <control type="radiobutton" id="9">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/configure.png"/>
                </include>
                <visible>Control.IsEnabled(9)</visible>
            </control>
            <control type="radiobutton" id="8">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/install.png"/>
                </include>
                <visible>Control.IsEnabled(8)</visible>
            </control>
            <control type="radiobutton" id="14">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/update.png"/>
                </include>
                <visible>Control.IsEnabled(14)</visible>
            </control>
            <control type="radiobutton" id="13">
                <include>buttondimensionssquare</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/autoupdateon.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/autoupdateon.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/autoupdate.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/autoupdate.png</textureradiooffnofocus>
                <visible>!Skin.HasSetting(global.kioskmode)</visible>
                <visible>Control.IsEnabled(13)</visible>
                <textcolor>Dark4</textcolor>
                <font>Null</font>
            </control>
            <control type="radiobutton" id="10">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/dependency.png"/>
                </include>
                <visible>Control.IsEnabled(10)</visible>
            </control>
        </control>
    </include>

    <include name="DialogPVRInfoNavigation">
        <control type="grouplist" id="9000">
            <bottom>224</bottom>
            <left>783</left>
            <right>SidePad</right>
            <include>listdimensions</include>
            <onup>50</onup>
            <ondown>9601</ondown>
            <orientation>horizontal</orientation>
            <control type="radiobutton" id="5">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/launch.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo)</visible>
            </control>
            <control type="radiobutton" id="4">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/similar.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo)</visible>
            </control>
            <control type="radiobutton" id="6">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/record2.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo)</visible>
            </control>
            <control type="radiobutton" id="8">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/play_record.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo) | Window.IsVisible(PVRRecordingInfo)</visible>
            </control>
            <control type="radiobutton" id="9">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/timer.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo)</visible>
            </control>
            <control type="radiobutton" id="11">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/ring.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo)</visible>
            </control>
            <control type="radiobutton" id="666">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/record2.png"/>
                </include>
                <onclick>Action(close)</onclick>
                <onclick>RunScript(plugin.video.iptv.recorder,$ESCINFO[ListItem.ChannelName],$ESCINFO[ListItem.Title],$ESCINFO[ListItem.Date],$ESCINFO[ListItem.Duration],$ESCINFO[ListItem.Plot])</onclick>
                <visible>System.AddonIsEnabled(plugin.video.iptv.recorder)</visible>
            </control>
            <control type="radiobutton" id="667">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/play_record.png"/>
                </include>
                <onclick>Action(close)</onclick>
                <onclick>ActivateWindow(10025,&quot;plugin://plugin.video.iptv.recorder/recordings&quot;,return)</onclick>
                <visible>System.AddonIsEnabled(plugin.video.iptv.recorder)</visible>
            </control>
            <control type="radiobutton" id="10">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/play.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo)</visible>
            </control>
        </control>
    </include>

    <include name="DialogVideoInfoHeader">
        <control type="label">
            <font>LargeNew</font>
            <description>Header Label</description>
            <textcolor>Dark1</textcolor>
            <label>$VAR[LabelWIPDialogVideoInfoHeader]</label>
        </control>
        <control type="label">
            <top>55</top>
            <height>36</height>
            <font>Tiny</font>
            <textcolor>Dark1</textcolor>
            <label>$VAR[LabelWIPDialogVideoInfoTagline]</label>
            <aligny>center</aligny>
        </control>
    </include>

    <include name="ExtendedImage">
        <control type="button" id="$PARAM[buttonid]">
            <include>HiddenButton</include>
            <onleft>SetFocus($PARAM[containerid])</onleft>
            <onleft>LEFT</onleft>
            <onleft>SetFocus($PARAM[buttonid])</onleft>
            <onright>SetFocus($PARAM[containerid])</onright>
            <onright>RIGHT</onright>
            <onright>SetFocus($PARAM[buttonid])</onright>
            <ondown>Close</ondown>
        </control>
        <control type="group">
            <visible>Control.HasFocus($PARAM[buttonid])</visible>
            <animation effect="fade" end="100" start="20" time="200" delay="200" easing="out">Visible</animation>
            <animation effect="fade" end="0" start="100" time="200" easing="out">Hidden</animation>
            <control type="image">
                <left>0</left>
                <top>0</top>
                <width>1920</width>
                <height>1080</height>
                <texture>common/black.png</texture>
            </control>
            <control type="image">
                <height>1080</height>
                <fadetime>ImageViewerFadetime</fadetime>
                <aspectratio align="center">keep</aspectratio>
                <texture background="true">$INFO[Container($PARAM[containerid]).ListItem.Art(thumb)]</texture>
            </control>
        </control>
    </include>

    <include name="OnFocusOnClick">
        <onclick>SetProperty(SetUserRating,mixed,home)</onclick>
        <onfocus>SetProperty(SetUserRating,mixed,home)</onfocus>
    </include>

    <include name="ClearOnFocusOnClick">
        <onunfocus>ClearProperty(SetUserRating,home)</onunfocus>
    </include>

    <include name="DefDialogBackgroundRating">
        <include>Animation.ZoomIn</include>
        <include>Animation.FadeOut</include>
        <centerleft>50%</centerleft>
        <centertop>50%</centertop>
        <height>310</height>
        <width>468</width>
        <control type="image">
            <width>100%</width>
            <height>100%</height>
            <texture border="16" colordiffuse="White100">common/rounded-shadow8.png</texture>
        </control>
    </include>

    <include name="DialogSelectUserRating">
        <control id="3" type="list">
            <onleft>noop</onleft>
            <onright>noop</onright>
            <onup>noop</onup>
            <include>HiddenListControl</include>
            <include>ClearOnFocusOnClick</include>
        </control>
        <control id="21" type="button">
            <onleft condition="!String.IsEmpty(Container(3).ListItemNoWrap(-1).Label)">Control.Move(3,-1)</onleft>
            <onright condition="!String.IsEmpty(Container(3).ListItemNoWrap(1).Label)">Control.Move(3,1)</onright>
            <ondown condition="!String.IsEmpty(Container(3).ListItemNoWrap(-1).Label)">Control.Move(3,-1)</ondown>
            <onup condition="!String.IsEmpty(Container(3).ListItemNoWrap(1).Label)">Control.Move(3,1)</onup>
            <onclick>SetFocus(3)</onclick>
            <onclick>Select</onclick>
            <include>HiddenButton</include>
        </control>
        <control type="group">
            <centerleft>50%</centerleft>
            <centertop>50%</centertop>
            <control type="textbox">
                <top>110</top>
                <left>38</left>
                <right>30</right>
                <height>86</height>
                <font>Tiny</font>
                <align>left</align>
                <label>31296</label>
            </control>
            <control type="group">
                <control type="grouplist">
                    <centerleft>50%</centerleft>
                    <top>210</top>
                    <width>340</width>
                    <height>45</height>
                    <orientation>horizontal</orientation>
                    <align>center</align>
                    <itemgap>12</itemgap>
                    <usecontrolcoords>true</usecontrolcoords>
                    <include content="Def_Flag">
                        <param name="Star" value="FlagstarSelect1" />
                        <param name="width" value="45" />
                    </include>
                    <include content="Def_Flag">
                        <param name="Star" value="FlagstarSelect2" />
                        <param name="width" value="45" />
                    </include>
                    <include content="Def_Flag">
                        <param name="Star" value="FlagstarSelect3" />
                        <param name="width" value="45" />
                    </include>
                    <include content="Def_Flag">
                        <param name="Star" value="FlagstarSelect4" />
                        <param name="width" value="45" />
                    </include>
                    <include content="Def_Flag">
                        <param name="Star" value="FlagstarSelect5" />
                        <param name="width" value="45" />
                    </include>
                </control>
                <control type="group">
                    <centerleft>50%</centerleft>
                    <top>225</top>
                    <width>330</width>
                    <height>45</height>
                    <align>center</align>
                    <include>Animation.DelayFadeIn</include>
                    <control type="image">
                        <include>arrowdimensions</include>
                        <left>0</left>
                        <texture colordiffuse="Black70" flipx="true">common/arrow-small-right.png</texture>
                    </control>
                    <control type="image">
                        <include>arrowdimensions</include>
                        <right>0</right>
                        <texture colordiffuse="Black70">common/arrow-small-right.png</texture>
                    </control>
                </control>
            </control>
        </control>
    </include>

    <include name="DialogSelect">
        <control type="list" id="3">
            <left>8</left>
            <width>1064</width>
            <posy>115</posy>
            <height>696</height>
            <onleft>5</onleft>
            <onright>1723</onright>
            <pagecontrol>1723</pagecontrol>
            <onup>3</onup>
            <ondown>3</ondown>
            <itemlayout height="69" width="696">
                <control type="label">
                    <left>30</left>
                    <right>30</right>
                    <font>Small</font>
                    <textcolor>Black70</textcolor>
                    <height>66</height>
                    <aligny>center</aligny>
                    <info>ListItem.Label</info>
                </control>
                <control type="image">
                    <right>30</right>
                    <centertop>50%</centertop>
                    <width>24</width>
                    <height>24</height>
                    <texture colordiffuse="$VAR[ColorHighlight]">osd/minicheck_big.png</texture>
                    <visible>ListItem.IsSelected</visible>
                </control>
            </itemlayout>
            <focusedlayout height="69" width="696">
                <control type="image">
                    <left>0</left>
                    <right>0</right>
                    <height>66</height>
                    <texture border="5" colordiffuse="$VAR[ColorHighlight]">common/white.png</texture>
                    <animation effect="fade" start="100" end="0" condition="!Control.HasFocus(3)">Conditional</animation>
                </control>
                <control type="image">
                    <width>100%</width>
                    <height>66</height>
                    <texture border="8" colordiffuse="$VAR[ColorHighlightOtherBar]">common/gradient-box-wide-cut.png</texture>
                    <animation effect="fade" start="100" end="0" condition="!Control.HasFocus(3)">Conditional</animation>
                </control>
                <control type="label">
                    <left>30</left>
                    <right>30</right>
                    <height>66</height>
                    <font>Small</font>
                    <aligny>center</aligny>
                    <textcolor>Selected</textcolor>
                    <selectedcolor>Selected</selectedcolor>
                    <info>ListItem.Label</info>
                    <visible>Control.HasFocus(3)</visible>
                </control>
                <control type="label">
                    <left>30</left>
                    <right>30</right>
                    <height>66</height>
                    <font>Small</font>
                    <aligny>center</aligny>
                    <textcolor>Black70</textcolor>
                    <selectedcolor>Black70</selectedcolor>
                    <info>ListItem.Label</info>
                    <visible>!Control.HasFocus(3)</visible>
                </control>
                <control type="image">
                    <right>30</right>
                    <centertop>50%</centertop>
                    <width>24</width>
                    <height>24</height>
                    <texture colordiffuse="Selected">osd/minicheck_big.png</texture>
                    <visible>ListItem.IsSelected</visible>
                </control>
            </focusedlayout>
        </control>
    </include>

    <include name="DialogCustomSettings">
        <control type="group">
            <visible allowhiddenfocus="true">ControlGroup(9400).HasFocus() + !Window.IsVisible(DialogBusy.xml)</visible>
            <visible>![Window.IsVisible(DialogNumeric.xml) | Window.IsVisible(DialogSelect.xml) | Window.IsVisible(DialogKeyboard.xml)]</visible>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <control type="image">
                <include>Dimensions_Fullscreen</include>
                <texture border="2">common/black-back.png</texture>
            </control>
            <control type="group">
                <centerleft>50%</centerleft>
                <centertop>50%</centertop>
                <width>468</width>
                <top>200</top>
                <height>370</height>
                <control type="image">
                    <visible>!Integer.IsGreater(Container(9400).NumItems,3)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>340</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsEqual(Container(9400).NumItems,4)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>410</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsEqual(Container(9400).NumItems,5)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>480</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsEqual(Container(9400).NumItems,6)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>550</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsEqual(Container(9400).NumItems,5)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>480</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsEqual(Container(9400).NumItems,6)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>550</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsGreater(Container(9400).NumItems,6)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>620</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="group">
                    <left>18</left>
                    <top>0</top>
                    <control type="label">
                        <description>Header Label</description>
                        <left>70</left>
                        <width>1000</width>
                        <posy>0</posy>
                        <include>FontTop</include>
                        <textcolor>Dark2</textcolor>
                        <label>16106</label>
                    </control>
                    <include content="Kodi_Logo">
                        <param name="dimensions" value="40"/>
                        <param name="top" value="15"/>
                        <param name="left" value="15"/>
                    </include>

                    <!-- Lines -->
                    <control type="image">
                        <top>70</top>
                        <left>17</left>
                        <width>385</width>
                        <height>1</height>
                        <bottom>10</bottom>
                        <colordiffuse>Black12</colordiffuse>
                        <texture>common/white.png</texture>
                    </control>
                </control>
                <control type="group">
                    <height>350</height>
                    <left>-48</left>
                    <top>-22</top>
                    <control type="image">
                        <description>arrow image</description>
                        <centerleft>50%</centerleft>
                        <posy>-16</posy>
                        <include>arrowdimensions</include>
                        <texture colordiffuse="White70" flipy="true">common/arrow-small.png</texture>
                    </control>
                    <control type="image">
                        <description>arrow image</description>
                        <centerleft>50%</centerleft>
                        <posy>342</posy>
                        <include>arrowdimensions</include>
                        <texture colordiffuse="White70" flipy="false">common/arrow-small.png</texture>
                        <animation effect="slide" end="0,70" time="0" condition="Integer.IsGreater(Container(9400).NumItems,3)">Conditional</animation>
                        <animation effect="slide" end="0,70" time="0" condition="Integer.IsGreater(Container(9400).NumItems,4)">Conditional</animation>
                        <animation effect="slide" end="0,70" time="0" condition="Integer.IsGreater(Container(9400).NumItems,5)">Conditional</animation>
                        <animation effect="slide" end="0,70" time="0" condition="Integer.IsGreater(Container(9400).NumItems,6)">Conditional</animation>
                    </control>
                </control>
                <include content="Def_Gradient_Settings_Image">
                    <param name="controlid" value="9400"/>
                    <param name="left" value="0"/>
                    <param name="top" value="90"/>
                    <param name="width" value="450"/>
                </include>
                <control type="grouplist" id="9400">
                    <top>90</top>
                    <onback>9000</onback>
                    <onleft>9000</onleft>
                    <onright>9000</onright>
                    <usecontrolcoords>true</usecontrolcoords>
                    <itemgap>0</itemgap>
                    <scrolltime>0</scrolltime>
                    <height>490</height>
                    <control type="button" id="92">
                        <include>DefContextButtonGradient</include>
                        <label>184</label>
                        <align>left</align>
                        <onclick>SendClick(6)</onclick>
                    </control>
                    <control type="button" id="93">
                        <include>DefContextButtonGradient</include>
                        <label>31283</label>
                        <align>left</align>
                        <onclick>SendClick(10)</onclick>
                    </control>
                    <control type="button" id="94">
                        <description>Artwork Downloader</description>
                        <include>DefContextButtonGradient</include>
                        <label>$ADDON[script.artwork.downloader 32194]</label>
                        <align>left</align>
                        <onclick condition="String.IsEqual(ListItem.DBType,tvshow)">RunScript(script.artwork.downloader, mode=gui, mediatype=tvshow, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,movie)">RunScript(script.artwork.downloader, mode=gui, mediatype=movie, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,musicvideo)">RunScript(script.artwork.downloader, mode=gui, mediatype=musicvideo, dbid=$INFO[ListItem.DBID])</onclick>
                        <visible>System.AddonIsEnabled(script.artwork.downloader) + [String.IsEqual(ListItem.DBType,tvshow) | String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,musicvideo)]</visible>
                    </control>
                    <control type="button" id="95">
                        <description>Artwork Downloader</description>
                        <include>DefContextButtonGradient</include>
                        <label>$ADDON[script.artwork.downloader 32193]</label>
                        <align>left</align>
                        <onclick condition="String.IsEqual(ListItem.DBType,tvshow)">RunScript(script.artwork.downloader, mediatype=tvshow, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,movie)">RunScript(script.artwork.downloader, mediatype=movie, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,musicvideo)">RunScript(script.artwork.downloader, mediatype=musicvideo, dbid=$INFO[ListItem.DBID])</onclick>
                        <visible>System.AddonIsEnabled(script.artwork.downloader) + [String.IsEqual(ListItem.DBType,tvshow) | String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,musicvideo)]</visible>
                    </control>
                    <control type="button" id="80">
                        <description>Filter</description>
                        <include>DefContextButtonGradient</include>
                        <label>31284</label>
                        <align>left</align>
                        <onclick condition="String.IsEqual(ListItem.DBType,tvshow)">RunScript(script.artwork.beef, mode=gui, mediatype=tvshow, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,movie)">RunScript(script.artwork.beef, mode=gui, mediatype=movie, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,musicvideo)">RunScript(script.artwork.beef, mode=gui, mediatype=musicvideo, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,artist)">RunScript(script.artwork.beef, mode=gui, mediatype=artist, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,song)">RunScript(script.artwork.beef, mode=gui, mediatype=song, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,set)">RunScript(script.artwork.beef, mode=gui, mediatype=set, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,episode)">RunScript(script.artwork.beef, mode=gui, mediatype=episode, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,album)">RunScript(script.artwork.beef, mode=gui, mediatype=album, dbid=$INFO[ListItem.DBID])</onclick>
                        <visible>System.AddonIsEnabled(script.artwork.beef)</visible>
                    </control>
                    <control type="button" id="81">
                        <description>Filter</description>
                        <include>DefContextButtonGradient</include>
                        <label>31278</label>
                        <align>left</align>
                        <onclick condition="String.IsEqual(ListItem.DBType,tvshow)">RunScript(script.artwork.beef, mode=auto, mediatype=tvshow, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,movie)">RunScript(script.artwork.beef, mode=auto, mediatype=movie, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,musicvideo)">RunScript(script.artwork.beef, mode=auto, mediatype=musicvideo, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,artist)">RunScript(script.artwork.beef, mode=auto, mediatype=artist, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,song)">RunScript(script.artwork.beef, mode=auto, mediatype=song, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,set)">RunScript(script.artwork.beef, mode=auto, mediatype=set, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,episode)">RunScript(script.artwork.beef, mode=auto, mediatype=episode, dbid=$INFO[ListItem.DBID])</onclick>
                        <onclick condition="String.IsEqual(ListItem.DBType,album)">RunScript(script.artwork.beef, mode=auto, mediatype=album, dbid=$INFO[ListItem.DBID])</onclick>
                        <visible>System.AddonIsEnabled(script.artwork.beef)</visible>
                    </control>
                    <control type="button" id="97">
                        <include>DefContextButtonGradient</include>
                        <label>$ADDON[script.metadata.editor 32000]</label>
                        <align>left</align>
                        <onclick>RunScript(script.metadata.editor,dbid=$INFO[ListItem.DBID],type=$INFO[ListItem.DBType])</onclick>
                        <visible>System.AddonIsEnabled(script.metadata.editor)</visible>
                    </control>
                    <control type="button" id="96">
                        <include>DefContextButtonGradient</include>
                        <label>5</label>
                        <align>left</align>
                        <onclick>ActivateWindow(1260)</onclick>
                    </control>
                </control>
            </control>
        </control>
    </include>

    <include name="DialogSelectlabelInclude">
        <control type="label">
            <right>40</right>
            <font>Tiny</font>
            <height>50</height>
            <bottom>30</bottom>
            <align>right</align>
            <textcolor>Black70</textcolor>
            <label>$VAR[DialogSelectlabel]</label>
        </control>
    </include>

    <variable name="nofocus-shadow10">
        <value condition="Skin.HasSetting(global.moreshadows)">nofocus-shadow37.png</value>
        <value>nofocus-shadow36.png</value>
    </variable>

    <variable name="shadow-24">
        <value condition="Skin.HasSetting(global.moreshadows)">shadow-25.png</value>
        <value>shadow-24.png</value>
    </variable>

    <variable name="background_side">
        <value condition="Skin.HasSetting(global.moreshadows)">background_side1.png</value>
        <value>background_side.png</value>
    </variable>

    <variable name="background_top">
        <value condition="Skin.HasSetting(global.moreshadows)">background_top1.png</value>
        <value>background_top.png</value>
    </variable>

    <variable name="ColorTheme">
        <value condition="String.IsEqual(Skin.CurrentColourTheme,Light)">light/</value>
        <value/>
    </variable>

    <variable name="ColorBorder">
        <value condition="Skin.HasSetting(osd.usethemeNewOSD)">$VAR[OSDPanelWhite30]</value>
        <value>BoxNotification</value>
    </variable>

    <variable name="MoreOfArtistContent">
        <value condition="!String.IsEmpty(ListItem.Artist) + !String.IsEqual(ListItem.Artist,) + !String.IsEqual(ListItem.Artist, )">musicdb://songs/?xsp=%7B%22order%22%3A%7B%22ignorefolders%22%3A0%2C%22method%22%3A%22songs%22%7D%2C%22rules%22%3A%7B%22and%22%3A%5B%7B%22field%22%3A%22artist%22%2C%22operator%22%3A%22contains%22%2C%22value%22%3A%5B%22$INFO[ListItem.Artist]%22%5D%7D%5D%7D%2C%22type%22%3A%22songs%22%7D</value>
    </variable>

    <variable name="StorageIconLabel">
        <value condition="ListItem.IsPlaying">&#62811;</value>
        <value>&#xf4ea;</value>
    </variable>

    <include name="WidgetSelector">
        <control type="button" id="4988">
            <include>DefWidgetSelectorInfo</include>
            <label>31144</label>
            <enable>false</enable>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu) + String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
        </control>
        <control type="button" id="9101" description="Alt chooser">
            <width>100%</width>
            <height>66</height>
            <label>$LOCALIZE[31414]$VAR[LabelWidget1]</label>
            <label2>$VAR[LabelWidgetShortcutsName]</label2>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
            <align>left</align>
            <include>DefDialogButtonsGradient</include>
            <onclick>SetProperty(skinshortcuts-Widget,1,Home)</onclick>
            <onclick>SetFocus(9451)</onclick>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu)</visible>
            <visible>String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
        </control>
        <control type="button" id="9102" description="Custom">
            <width>100%</width>
            <height>66</height>
            <label>$LOCALIZE[31415]$VAR[LabelWidget2]</label>
            <label2>$VAR[LabelWidgetShortcutsName2]</label2>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
            <align>left</align>
            <include>DefDialogButtonsGradient</include>
            <onclick>SetProperty(skinshortcuts-Widget,2,Home)</onclick>
            <onclick>SetFocus(4197)</onclick>
            <animation effect="fade" start="100" end="50" time="0" condition="!String.IsEqual(Container(211).ListItem.Property(widgetEnable.2),yes)">Conditional</animation>
            <visible>String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu)</visible>
            <visible>[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [Skin.HasSetting(home.modernwidgets)  + Skin.HasSetting(home.vertical.widgets)]</visible>
        </control>
        <control type="button" id="9103" description="Custom">
            <width>100%</width>
            <height>66</height>
            <label>$LOCALIZE[31416]$VAR[LabelWidget3]</label>
            <label2>$VAR[LabelWidgetShortcutsName3]</label2>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
            <align>left</align>
            <include>DefDialogButtonsGradient</include>
            <onclick>SetProperty(skinshortcuts-Widget,3,Home)</onclick>
            <onclick>SetFocus(4198)</onclick>
            <animation effect="fade" start="100" end="50" time="0" condition="!String.IsEqual(Container(211).ListItem.Property(widgetEnable.3),yes)">Conditional</animation>
            <visible>String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu)</visible>
            <visible>[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [Skin.HasSetting(home.modernwidgets)  + Skin.HasSetting(home.vertical.widgets)]</visible>
        </control>
        <control type="button" id="9104" description="Custom">
            <width>100%</width>
            <height>66</height>
            <label>$LOCALIZE[31417]$VAR[LabelWidget4]</label>
            <label2>$VAR[LabelWidgetShortcutsName4]</label2>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
            <align>left</align>
            <include>DefDialogButtonsGradient</include>
            <onclick>SetProperty(skinshortcuts-Widget,4,Home)</onclick>
            <onclick>SetFocus(4199)</onclick>
            <animation effect="fade" start="100" end="50" time="0" condition="!String.IsEqual(Container(211).ListItem.Property(widgetEnable.4),yes)">Conditional</animation>
            <visible>String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu)</visible>
            <visible>[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [Skin.HasSetting(home.modernwidgets)  + Skin.HasSetting(home.vertical.widgets)]</visible>
        </control>
        <control type="button" id="9105" description="Custom">
            <width>100%</width>
            <height>66</height>
            <label>$LOCALIZE[31418]$VAR[LabelWidget5]</label>
            <label2>$VAR[LabelWidgetShortcutsName5]</label2>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
            <align>left</align>
            <include>DefDialogButtonsGradient</include>
            <onclick>SetProperty(skinshortcuts-Widget,5,Home)</onclick>
            <onclick>SetFocus(4590)</onclick>
            <animation effect="fade" start="100" end="50" time="0" condition="!String.IsEqual(Container(211).ListItem.Property(widgetEnable.5),yes)">Conditional</animation>
            <visible>String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu)</visible>
            <visible>[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [Skin.HasSetting(home.modernwidgets)  + Skin.HasSetting(home.vertical.widgets)]</visible>
        </control>
        <control type="button" id="9106" description="Custom">
            <width>100%</width>
            <height>66</height>
            <label>$LOCALIZE[31477]$VAR[LabelWidget6]</label>
            <label2>$VAR[LabelWidgetShortcutsName6]</label2>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
            <align>left</align>
            <include>DefDialogButtonsGradient</include>
            <onclick>SetProperty(skinshortcuts-Widget,6,Home)</onclick>
            <onclick>SetFocus(11001)</onclick>
            <animation effect="fade" start="100" end="50" time="0" condition="!String.IsEqual(Container(211).ListItem.Property(widgetEnable.6),yes)">Conditional</animation>
            <visible>String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu)</visible>
            <visible>[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [Skin.HasSetting(home.modernwidgets)  + Skin.HasSetting(home.vertical.widgets)]</visible>
        </control>
        <control type="button" id="4989">
            <include>DefWidgetSelectorInfo</include>
            <label>33063</label>
            <enable>false</enable>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu) + String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
        </control>
    </include>

    <include name="fadevertical">
        <animation effect="fade" start="100" end="50" time="400" condition="Control.HasFocus(300) | Control.HasFocus(302)">Conditional</animation>
    </include>

    <include name="fadehorizontal">
        <animation effect="fade" start="100" end="70" time="400" condition="Control.HasFocus(300) | Control.HasFocus(302)">Conditional</animation>
    </include>

    <include name="defaultcontroltrue">
        <defaultcontrol always="true">300</defaultcontrol>
    </include>

    <include name="defaultcontrolfalse">
        <defaultcontrol always="false">300</defaultcontrol>
    </include>

    <include name="JumpbarHelper">
        <control type="button" id="390000">
            <include>HiddenButton</include>
            <onfocus condition="!String.IsEqual(ListItem.SortLetter,A) + !String.IsEqual(ListItem.SortLetter,B) + !String.IsEqual(ListItem.SortLetter,C) + !String.IsEqual(ListItem.SortLetter,D) + !String.IsEqual(ListItem.SortLetter,E) + !String.IsEqual(ListItem.SortLetter,F) + !String.IsEqual(ListItem.SortLetter,G) + !String.IsEqual(ListItem.SortLetter,H) + !String.IsEqual(ListItem.SortLetter,I) + !String.IsEqual(ListItem.SortLetter,J) + !String.IsEqual(ListItem.SortLetter,K) + !String.IsEqual(ListItem.SortLetter,L) + !String.IsEqual(ListItem.SortLetter,M) + !String.IsEqual(ListItem.SortLetter,N) + !String.IsEqual(ListItem.SortLetter,O) + !String.IsEqual(ListItem.SortLetter,P) + !String.IsEqual(ListItem.SortLetter,Q) + !String.IsEqual(ListItem.SortLetter,R) + !String.IsEqual(ListItem.SortLetter,S) + !String.IsEqual(ListItem.SortLetter,T) + !String.IsEqual(ListItem.SortLetter,U) + !String.IsEqual(ListItem.SortLetter,V) + !String.IsEqual(ListItem.SortLetter,W) + !String.IsEqual(ListItem.SortLetter,X) + !String.IsEqual(ListItem.SortLetter,Y) + !String.IsEqual(ListItem.SortLetter,Z) + [Integer.IsGreater(Container(290001).NumItems,0) | Container(290001).IsUpdating]">SetFocus(290001,0,absolute)</onfocus>
            <onfocus condition="!String.IsEqual(ListItem.SortLetter,A) + !String.IsEqual(ListItem.SortLetter,B) + !String.IsEqual(ListItem.SortLetter,C) + !String.IsEqual(ListItem.SortLetter,D) + !String.IsEqual(ListItem.SortLetter,E) + !String.IsEqual(ListItem.SortLetter,F) + !String.IsEqual(ListItem.SortLetter,G) + !String.IsEqual(ListItem.SortLetter,H) + !String.IsEqual(ListItem.SortLetter,I) + !String.IsEqual(ListItem.SortLetter,J) + !String.IsEqual(ListItem.SortLetter,K) + !String.IsEqual(ListItem.SortLetter,L) + !String.IsEqual(ListItem.SortLetter,M) + !String.IsEqual(ListItem.SortLetter,N) + !String.IsEqual(ListItem.SortLetter,O) + !String.IsEqual(ListItem.SortLetter,P) + !String.IsEqual(ListItem.SortLetter,Q) + !String.IsEqual(ListItem.SortLetter,R) + !String.IsEqual(ListItem.SortLetter,S) + !String.IsEqual(ListItem.SortLetter,T) + !String.IsEqual(ListItem.SortLetter,U) + !String.IsEqual(ListItem.SortLetter,V) + !String.IsEqual(ListItem.SortLetter,W) + !String.IsEqual(ListItem.SortLetter,X) + !String.IsEqual(ListItem.SortLetter,Y) + !String.IsEqual(ListItem.SortLetter,Z) + !Integer.IsGreater(Container(290001).NumItems,0) + !Container(290001).IsUpdating">SetFocus(50)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,A)">SetFocus(290001,1,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,B)">SetFocus(290001,2,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,C)">SetFocus(290001,3,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,D)">SetFocus(290001,4,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,E)">SetFocus(290001,5,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,F)">SetFocus(290001,6,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,G)">SetFocus(290001,7,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,H)">SetFocus(290001,8,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,I)">SetFocus(290001,9,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,J)">SetFocus(290001,10,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,K)">SetFocus(290001,11,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,L)">SetFocus(290001,12,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,M)">SetFocus(290001,13,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,N)">SetFocus(290001,14,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,O)">SetFocus(290001,15,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,P)">SetFocus(290001,16,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,Q)">SetFocus(290001,17,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,R)">SetFocus(290001,18,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,S)">SetFocus(290001,19,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,T)">SetFocus(290001,20,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,U)">SetFocus(290001,21,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,V)">SetFocus(290001,22,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,W)">SetFocus(290001,23,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,X)">SetFocus(290001,24,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,Y)">SetFocus(290001,25,absolute)</onfocus>
            <onfocus condition="String.IsEqual(ListItem.SortLetter,Z)">SetFocus(290001,26,absolute)</onfocus>
        </control>
    </include>

    <include name="ProgressBar">
        <control type="ranges">
            <visible>Skin.HasSetting(cutlist.markers)</visible>
            <bottom>10</bottom>
            <width>100%</width>
            <height>8</height>
            <texturebg colordiffuse="OSDProgressBarColor">osd/progress-bg.png</texturebg>
            <lefttexture colordiffuse="FFFF0000">osd/progress-end.png</lefttexture>
            <midtexture colordiffuse="FFFF0000">osd/progress-end.png</midtexture>
            <righttexture colordiffuse="FFFF0000">osd/progress-end.png</righttexture>
            <info>Player.Cutlist</info>
        </control>
        <control type="progress" description="cache">
            <description>Progress Bar</description>
            <width>100%</width>
            <bottom>10</bottom>
            <height>8</height>
            <info>Player.ProgressCache</info>
            <texturebg colordiffuse="OSDProgressBarColor">osd/progress-bg.png</texturebg>
            <lefttexture colordiffuse="Highlight2">osd/progress-end.png</lefttexture>
            <midtexture colordiffuse="Highlight2">osd/progress-end.png</midtexture>
            <righttexture colordiffuse="Highlight2">osd/progress-end.png</righttexture>
            <visible>!Pvr.IsPlayingTv</visible>
        </control>
        <control type="progress" id="23">
            <description>Progress Bar</description>
            <width>100%</width>
            <bottom>10</bottom>
            <height>8</height>
            <info>Player.Progress</info>
            <visible>!Player.Seeking</visible>
            <visible>!Pvr.IsPlayingTv</visible>
        </control>
        <control type="progress" id="401">
            <description>Progress Bar</description>
            <width>100%</width>
            <bottom>10</bottom>
            <height>8</height>
            <visible>Player.Seeking</visible>
        </control>
        <control type="progress" id="404">
            <left>0</left>
            <bottom>10</bottom>
            <width>100%</width>
            <height>8</height>
            <info>PVR.EpgEventProgress</info>
            <visible>Pvr.IsPlayingTv</visible>
        </control>
        <control type="ranges">
            <visible>Skin.HasSetting(chapter.markers)</visible>
            <left>0</left>
            <bottom>10</bottom>
            <width>100%</width>
            <height>8</height>
            <texturebg border="3" colordiffuse="00FFFFFF">osd/ch.png</texturebg>
            <righttexture>osd/ch.png</righttexture>
            <info>Player.Chapters</info>
        </control>
    </include>
    
    <include name="ProgressBarInfo">
        <control type="ranges">
            <visible>Skin.HasSetting(cutlist.markers)</visible>
            <bottom>10</bottom>
            <width>100%</width>
            <height>8</height>
            <texturebg colordiffuse="OSDProgressBarColor">osd/progress-bg.png</texturebg>
            <lefttexture colordiffuse="FFFF0000">osd/progress-end.png</lefttexture>
            <midtexture colordiffuse="FFFF0000">osd/progress-end.png</midtexture>
            <righttexture colordiffuse="FFFF0000">osd/progress-end.png</righttexture>
            <info>Player.Cutlist</info>
        </control>
        <control type="progress">
            <description>Progress Bar</description>
            <width>100%</width>
            <bottom>10</bottom>
            <height>8</height>
            <info>Player.ProgressCache</info>
            <texturebg colordiffuse="OSDProgressBarColor">osd/progress-bg.png</texturebg>
            <lefttexture colordiffuse="Highlight2">osd/progress-end.png</lefttexture>
            <midtexture colordiffuse="Highlight2">osd/progress-end.png</midtexture>
            <righttexture colordiffuse="Highlight2">osd/progress-end.png</righttexture>
            <visible>!Pvr.IsPlayingTv</visible>
        </control>
        <control type="progress">
            <description>Progress Bar</description>
            <width>100%</width>
            <bottom>10</bottom>
            <height>8</height>
            <info>Player.Progress</info>
            <visible>!Player.Seeking</visible>
            <visible>!Pvr.IsPlayingTv</visible>
        </control>
        <control type="progress">
            <description>Progress Bar</description>
            <width>100%</width>
            <bottom>10</bottom>
            <height>8</height>
            <visible>Player.Seeking</visible>
        </control>
        <control type="progress">
            <left>0</left>
            <bottom>10</bottom>
            <width>100%</width>
            <height>8</height>
            <info>PVR.EpgEventProgress</info>
            <visible>Pvr.IsPlayingTv</visible>
        </control>
        <control type="ranges">
            <visible>Skin.HasSetting(chapter.markers)</visible>
            <left>0</left>
            <bottom>10</bottom>
            <width>100%</width>
            <height>8</height>
            <texturebg border="3" colordiffuse="00FFFFFF">osd/ch.png</texturebg>
            <righttexture>osd/ch.png</righttexture>
            <info>Player.Chapters</info>
        </control>
    </include>

    <!-- Code from https://github.com/jurialmunkey/skin.arctic.zephyr.2/ -->
    <variable name="Weather_Sunrise">
        <value condition="!String.IsEmpty(Window(Weather).Property(Current.Sunrise))">$INFO[Window(Weather).Property(Current.Sunrise),$LOCALIZE[31404] ,]</value>
        <value condition="!String.IsEmpty(Window(Weather).Property(Today.Sunrise))">$INFO[Window(Weather).Property(Today.Sunrise),$LOCALIZE[31404] ,]</value>
    </variable>

    <variable name="Weather_Sunset">
        <value condition="!String.IsEmpty(Window(Weather).Property(Current.Sunset))">$INFO[Window(Weather).Property(Current.Sunset),$LOCALIZE[31405] ,]</value>
        <value condition="!String.IsEmpty(Window(Weather).Property(Today.Sunset))">$INFO[Window(Weather).Property(Today.Sunset),$LOCALIZE[31405] ,]</value>
    </variable>

    <variable name="Weather_LowTemp">
        <value condition="!String.IsEmpty(Window(Weather).Property(Current.LowTemp))">$INFO[Window(Weather).Property(Current.LowTemp),,°]</value>
        <value condition="!String.IsEmpty(Window(Weather).Property(Day0.LowTemp))">$INFO[Window(Weather).Property(Day0.LowTemp),,°]</value>
    </variable>

    <variable name="Weather_HighTemp">
        <value condition="!String.IsEmpty(Window(Weather).Property(Current.HighTemp))">$INFO[Window(Weather).Property(Current.HighTemp),,°]</value>
        <value condition="!String.IsEmpty(Window(Weather).Property(Day0.HighTemp))">$INFO[Window(Weather).Property(Day0.HighTemp),,°]</value>
    </variable>

    <variable name="Weather_UVIndex_Label">
        <value condition="!String.IsEmpty(Window(Weather).Property(Current.UVIndex))">$LOCALIZE[403]</value>
        <value condition="!String.IsEmpty(Window(Weather).Property(Current.Precipitation))">$INFO[Window(Weather).Property(Current.Precipitation),$LOCALIZE[1448] ,]</value>
    </variable>

    <variable name="Weather_UVIndex_Info">
        <value condition="!String.IsEmpty(Window(Weather).Property(Current.UVIndex))">$INFO[Window(Weather).Property(Current.UVIndex)]</value>
        <value condition="!String.IsEmpty(Window(Weather).Property(Current.Cloudiness))">$INFO[Window(Weather).Property(Current.Cloudiness),$LOCALIZE[31068] ,]</value>
    </variable>

    <variable name="SetTMDBHelperWidgetContainer">
        <value condition="Control.IsVisible(30111)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30111),00:00,silent)</value>
        <value condition="Control.IsVisible(30121)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30121),00:00,silent)</value>
        <value condition="Control.IsVisible(30131)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30131),00:00,silent)</value>
        <value condition="Control.IsVisible(30141)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30141),00:00,silent)</value>
        <value condition="Control.IsVisible(30151)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30151),00:00,silent)</value>
        <value condition="Control.IsVisible(30161)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30161),00:00,silent)</value>
        <value condition="Control.IsVisible(30171)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30171),00:00,silent)</value>
        <value condition="Control.IsVisible(30181)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30181),00:00,silent)</value>
        <value condition="Control.IsVisible(30191)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30191),00:00,silent)</value>
    </variable>

    <include name="unlock_views">
        <onclick condition="[Container.Content() + !String.IsEmpty(Skin.String(Skin.ForcedView.))]">Skin.Reset(Skin.ForcedView.)</onclick>
        <onclick condition="[Container.Content(tags) + !String.IsEmpty(Skin.String(Skin.ForcedView.tags))]">Skin.Reset(Skin.ForcedView.tags)</onclick>
        <onclick condition="[Container.Content(years) + !String.IsEmpty(Skin.String(Skin.ForcedView.years))]">Skin.Reset(Skin.ForcedView.years)</onclick>
        <onclick condition="[Container.Content(genres) + !String.IsEmpty(Skin.String(Skin.ForcedView.genres))]">Skin.Reset(Skin.ForcedView.genres)</onclick>
        <onclick condition="[Container.Content(countries) + !String.IsEmpty(Skin.String(Skin.ForcedView.countries))]">Skin.Reset(Skin.ForcedView.countries)</onclick>
        <onclick condition="[Container.Content(studios) + !String.IsEmpty(Skin.String(Skin.ForcedView.studios))]">Skin.Reset(Skin.ForcedView.studios)</onclick>
        <onclick condition="[Container.Content(playlists) + !String.IsEmpty(Skin.String(Skin.ForcedView.playlists))]">Skin.Reset(Skin.ForcedView.playlists)</onclick>
        <onclick condition="[Container.Content(movies) + !String.IsEmpty(Skin.String(Skin.ForcedView.movies))]">Skin.Reset(Skin.ForcedView.movies)</onclick>
        <onclick condition="[Container.Content(sets) + !String.IsEmpty(Skin.String(Skin.ForcedView.sets))]">Skin.Reset(Skin.ForcedView.sets)</onclick>
        <onclick condition="[Container.Content(tvshows) + !String.IsEmpty(Skin.String(Skin.ForcedView.tvshows))]">Skin.Reset(Skin.ForcedView.tvshows)</onclick>
        <onclick condition="[Container.Content(seasons) + !String.IsEmpty(Skin.String(Skin.ForcedView.seasons))]">Skin.Reset(Skin.ForcedView.seasons)</onclick>
        <onclick condition="[Container.Content(episodes) + !String.IsEmpty(Skin.String(Skin.ForcedView.episodes))]">Skin.Reset(Skin.ForcedView.episodes)</onclick>
        <onclick condition="[Container.Content(artists) + !String.IsEmpty(Skin.String(Skin.ForcedView.artists))]">Skin.Reset(Skin.ForcedView.artists)</onclick>
        <onclick condition="[Container.Content(albums) + !String.IsEmpty(Skin.String(Skin.ForcedView.albums))]">Skin.Reset(Skin.ForcedView.albums)</onclick>
        <onclick condition="[Container.Content(songs) + !String.IsEmpty(Skin.String(Skin.ForcedView.songs))]">Skin.Reset(Skin.ForcedView.songs)</onclick>
        <onclick condition="[Container.Content(musicvideos) + !String.IsEmpty(Skin.String(Skin.ForcedView.musicvideos))]">Skin.Reset(Skin.ForcedView.musicvideos)</onclick>
        <onclick condition="[Container.Content(addons) + !String.IsEmpty(Skin.String(Skin.ForcedView.addons))]">Skin.Reset(Skin.ForcedView.addons)</onclick>
        <onclick condition="[Container.Content(actors) + !String.IsEmpty(Skin.String(Skin.ForcedView.actors))]">Skin.Reset(Skin.ForcedView.actors)</onclick>
        <onclick condition="[Container.Content(directors) + !String.IsEmpty(Skin.String(Skin.ForcedView.directors))]">Skin.Reset(Skin.ForcedView.directors)</onclick>
        <onclick condition="[Container.Content(files) + !String.IsEmpty(Skin.String(Skin.ForcedView.files))]">Skin.Reset(Skin.ForcedView.files)</onclick>
        <onclick condition="[Container.Content(mixed) + !String.IsEmpty(Skin.String(Skin.ForcedView.mixed))]">Skin.Reset(Skin.ForcedView.mixed)</onclick>
        <onclick condition="[Container.Content(images) + !String.IsEmpty(Skin.String(Skin.ForcedView.images))]">Skin.Reset(Skin.ForcedView.images)</onclick>
        <onclick condition="[Container.Content(games) + !String.IsEmpty(Skin.String(Skin.ForcedView.games))]">Skin.Reset(Skin.ForcedView.games)</onclick>
        <onclick condition="[Container.Content(unknown) + !String.IsEmpty(Skin.String(Skin.ForcedView.unknown))]">Skin.Reset(Skin.ForcedView.unknown)</onclick>
        <onclick condition="[Container.Content(videos) + !String.IsEmpty(Skin.String(Skin.ForcedView.videos))]">Skin.Reset(Skin.ForcedView.videos)</onclick>
    </include>

    <include name="lock_views">
        <onclick condition="[Container.Content() + String.IsEmpty(Skin.String(Skin.ForcedView.))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(tags) + String.IsEmpty(Skin.String(Skin.ForcedView.tags))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(years) + String.IsEmpty(Skin.String(Skin.ForcedView.years))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(genres) + String.IsEmpty(Skin.String(Skin.ForcedView.genres))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(countries) + String.IsEmpty(Skin.String(Skin.ForcedView.countries))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(studios) + String.IsEmpty(Skin.String(Skin.ForcedView.studios))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(playlists) + String.IsEmpty(Skin.String(Skin.ForcedView.playlists))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(movies) + String.IsEmpty(Skin.String(Skin.ForcedView.movies))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(sets) + String.IsEmpty(Skin.String(Skin.ForcedView.sets))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(tvshows) + String.IsEmpty(Skin.String(Skin.ForcedView.tvshows))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(seasons) + String.IsEmpty(Skin.String(Skin.ForcedView.seasons))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(episodes) + String.IsEmpty(Skin.String(Skin.ForcedView.episodes))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(artists) + String.IsEmpty(Skin.String(Skin.ForcedView.artists))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(albums) + String.IsEmpty(Skin.String(Skin.ForcedView.albums))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(songs) + String.IsEmpty(Skin.String(Skin.ForcedView.songs))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(musicvideos) + String.IsEmpty(Skin.String(Skin.ForcedView.musicvideos))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(addons) + String.IsEmpty(Skin.String(Skin.ForcedView.addons))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(actors) + String.IsEmpty(Skin.String(Skin.ForcedView.actors))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(directors) + String.IsEmpty(Skin.String(Skin.ForcedView.directors))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(files) + String.IsEmpty(Skin.String(Skin.ForcedView.files))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(mixed) + String.IsEmpty(Skin.String(Skin.ForcedView.mixed))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(images) + String.IsEmpty(Skin.String(Skin.ForcedView.images))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(games) + String.IsEmpty(Skin.String(Skin.ForcedView.games))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(unknown) + String.IsEmpty(Skin.String(Skin.ForcedView.unknown))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(videos) + String.IsEmpty(Skin.String(Skin.ForcedView.videos))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
    </include>

    <include name="forced_view">
        <visible>[Container.Content(games) + [String.IsEqual(Skin.String(Skin.ForcedView.games),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.games))]] | [Container.Content(movies) + [String.IsEqual(Skin.String(Skin.ForcedView.movies),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.movies))]] | [Container.Content(sets) + [String.IsEqual(Skin.String(Skin.ForcedView.sets),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.sets))]] | [Container.Content(tvshows) + [String.IsEqual(Skin.String(Skin.ForcedView.tvshows),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.tvshows))]] | [Container.Content(seasons) + [String.IsEqual(Skin.String(Skin.ForcedView.seasons),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.seasons))]] | [Container.Content(episodes) + [String.IsEqual(Skin.String(Skin.ForcedView.episodes),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.episodes))]] | [Container.Content(actors) + [String.IsEqual(Skin.String(Skin.ForcedView.actors),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.actors))]] | [Container.Content(artists) + [String.IsEqual(Skin.String(Skin.ForcedView.artists),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.artists))]] | [Container.Content(albums) + [String.IsEqual(Skin.String(Skin.ForcedView.albums),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.albums))]] | [Container.Content(songs) + [String.IsEqual(Skin.String(Skin.ForcedView.songs),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.songs))]] | [Container.Content(addons) + [String.IsEqual(Skin.String(Skin.ForcedView.addons),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.addons))]] | [Container.Content(genres) + [String.IsEqual(Skin.String(Skin.ForcedView.genres),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.genres))]] | [Container.Content(images) + [String.IsEqual(Skin.String(Skin.ForcedView.images),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.images))]] | [Container.Content(videos) + [String.IsEqual(Skin.String(Skin.ForcedView.videos),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.videos))]] | [Container.Content() + [String.IsEqual(Skin.String(Skin.ForcedView.),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.))]] | [Container.Content(tags) + [String.IsEqual(Skin.String(Skin.ForcedView.tags),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.tags))]] | [Container.Content(years) + [String.IsEqual(Skin.String(Skin.ForcedView.years),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.years))]] | [Container.Content(countries) + [String.IsEqual(Skin.String(Skin.ForcedView.countries),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.countries))]] | [Container.Content(studios) + [String.IsEqual(Skin.String(Skin.ForcedView.studios),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.studios))]] | [Container.Content(playlists) + [String.IsEqual(Skin.String(Skin.ForcedView.playlists),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.playlists))]] | [Container.Content(musicvideos) + [String.IsEqual(Skin.String(Skin.ForcedView.musicvideos),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.musicvideos))]] | [Container.Content(directors) + [String.IsEqual(Skin.String(Skin.ForcedView.directors),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.directors))]] | [Container.Content(files) + [String.IsEqual(Skin.String(Skin.ForcedView.files),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.files))]] | [Container.Content(mixed) + [String.IsEqual(Skin.String(Skin.ForcedView.mixed),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.mixed))]] | [Container.Content(unknown) + [String.IsEqual(Skin.String(Skin.ForcedView.unknown),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.unknown))]] | [!Container.Content(games) + !Container.Content(movies) + !Container.Content(sets) + !Container.Content(tvshows) + !Container.Content(seasons) + !Container.Content(episodes) + !Container.Content(actors) + !Container.Content(artists) + !Container.Content(albums) + !Container.Content(songs) + !Container.Content(addons) + !Container.Content(genres) + !Container.Content(images) + !Container.Content(videos) + !Container.Content() + !Container.Content(tags) + !Container.Content(years) + !Container.Content(countries) + !Container.Content(studios) + !Container.Content(playlists) + !Container.Content(musicvideos) + !Container.Content(directors) + !Container.Content(files) + !Container.Content(mixed) + !Container.Content(unknown)] | Window.IsVisible(MyPlaylist.xml)</visible>
    </include>

    <variable name="ColorSettings">
        <value condition="String.IsEqual(Skin.CurrentColourTheme,Darker)">FF1F1E1D</value>
        <value condition="String.IsEqual(Skin.CurrentColourTheme,Darkest)">FF1F1E1D</value>
        <value condition="String.IsEqual(Skin.CurrentColourTheme,Light)">FF1E1E1E</value>
        <value condition="String.IsEqual(Skin.CurrentColourTheme,Light Brown)">Light3</value>
        <value>FF1F1E1D</value>
    </variable>

    <include name="DialogForcedArrow">
        <align>center</align>
        <top>20</top>
        <include>arrowdimensions</include>
        <texture colordiffuse="Dark1" flipy="false">common/arrow-small-right.png</texture>
    </include>

    <include name="more">
        <control type="label">
            <align>center</align>
            <aligny>center</aligny>
            <width>100%</width>
            <height>100%</height>
            <textcolor>PanelWhite70</textcolor>
            <font>Small</font>
            <label>31429</label>
            <visible>!String.IsEqual(ListItem.Label,..)</visible>
            <visible>String.IsEqual(ListItem.Property(LabelMore),more)</visible>
        </control>
    </include>

    <include name="morecontent">
        <content>
            <item>
                <label>$LOCALIZE[31429]</label>
                <property name="LabelMore">more</property>
                <icon>buttonsdialogs/morewidget.png</icon>
                <onclick>ActivateWindow($PARAM[targetcontent],$PARAM[content],return)</onclick>
                <visible>Integer.IsGreater(Container($PARAM[id]).NumItems,9)</visible>
            </item>
        </content>
    </include>

    <include name="SetWidgetContainerForTMDB">
        <control type="button">
            <visible>false</visible>
            <onfocus>$VAR[SetTMDBHelperWidgetContainer]</onfocus>
            <onfocus>SetProperty(WindowTitle,$INFO[Container(300).ListItem.Label],home)</onfocus>
        </control>
    </include>

    <include name="SetWidgetContainerPosition">
        <control type="button">
            <visible>false</visible>
            <onfocus>SetProperty(ContainerPosition,$INFO[Container($PARAM[id]).CurrentItem]$INFO[Container($PARAM[id]).NumItems, / ,],home)</onfocus>
        </control>
    </include>

    <include name="SetAutoTrailerControl">
        <control type="button">
            <visible>false</visible>

            <!-- Set Property / Skin String -->
            <onfocus>SetProperty(listitem.trailer,$INFO[ListItem.Trailer],home)</onfocus>

            <!-- Reset / Stop On Unfocus -->
            <onunfocus condition="String.IsEmpty(Window(home).Property(TrailerIsPlayingFullscreen))">ClearProperty(TrailerPath,home)</onunfocus>
            <onunfocus condition="$EXP[TrailerIsPlaying] + !Skin.HasSetting(trailer.dont.stop.on.unfocus) + String.IsEmpty(Window(home).Property(TrailerIsPlayingFullscreen))">Stop</onunfocus>

            <!-- Reset Fullscreen Property -->
            <onunfocus condition="!String.IsEmpty(Window(home).Property(TrailerIsPlayingFullscreen))">ClearProperty(TrailerIsPlayingFullscreen,home)</onunfocus>
        </control>
    </include>

    <include name="MusicVisualisationInfoMatrx">
        <control type="group">
            <left>$PARAM[left]</left>
            <right>SidePadNewOSD</right>
            <visible>$PARAM[visible]</visible>
            <top>20</top>
            <animation effect="slide" start="0,0" end="0,-50" time="150" condition="Skin.HasSetting(osd.usethemeNewOSDMusic)">Conditional</animation>
            <bottom>20</bottom>
            <control type="label" description="Finishes Time">
                <animation effect="slide" start="0,0" end="0,-70" time="150" condition="Skin.HasSetting(osd.artistinfos)">Conditional</animation>
                <bottom>85</bottom>
                <height>40</height>
                <width>950</width>
                <font>MediumBold</font>
                <textcolor>$VAR[OSDPanelWhite70Music]</textcolor>
                <label>$VAR[PlayerStatusNewOSD]</label>
            </control>
            <control type="grouplist">
                <width>700</width>
                <height>64</height>
                <orientation>horizontal</orientation>
                <align>left</align>
                <itemgap>8</itemgap>
                <bottom>7</bottom>
                <control type="label">
                    <width>auto</width>
                    <align>left</align>
                    <height>40</height>
                    <font>Tiny</font>
                    <textcolor>$VAR[OSDPanelWhite70Music]</textcolor>
                    <label>$VAR[Label_MusicPlayerCodec]</label>
                </control>
                <control type="label">
                    <width>auto</width>
                    <align>left</align>
                    <height>40</height>
                    <font>Tiny</font>
                    <textcolor>$VAR[OSDPanelWhite70Music]</textcolor>
                    <label>$INFO[MusicPlayer.BitRate, •  ,kbps]</label>
                    <visible>!String.IsEmpty(MusicPlayer.BitRate)</visible>
                </control>
                <control type="label">
                    <width>auto</width>
                    <align>left</align>
                    <height>40</height>
                    <font>Tiny</font>
                    <textcolor>$VAR[OSDPanelWhite70Music]</textcolor>
                    <label>$INFO[MusicPlayer.Samplerate, •  ,kHz]</label>
                    <visible>!String.IsEmpty(MusicPlayer.Samplerate)</visible>
                </control>
                <control type="label">
                    <width>auto</width>
                    <align>left</align>
                    <height>40</height>
                    <font>Tiny</font>
                    <textcolor>$VAR[OSDPanelWhite70Music]</textcolor>
                    <label>$INFO[MusicPlayer.BPM, •  ,bpm]</label>
                    <visible>!String.IsEmpty(MusicPlayer.BPM)</visible>
                </control>
                <control type="label">
                    <width>auto</width>
                    <align>left</align>
                    <height>40</height>
                    <font>Tiny</font>
                    <textcolor>$VAR[OSDPanelWhite70Music]</textcolor>
                    <label>$INFO[MusicPlayer.BitsPerSample, •  ,bit]</label>
                    <visible>!String.IsEmpty(MusicPlayer.BitsPerSample)</visible>
                </control>
            </control>
            <control type="group">
                <top>255</top>
                <visible>Skin.HasSetting(osd.artistinfos)</visible>
                <control type="textbox">
                    <description>RSS feed</description>
                    <bottom>255</bottom>
                    <height>70</height>
                    <font>Tiny</font>
                    <align>justify</align>
                    <textcolor>$VAR[OSDPanelWhite70Music]</textcolor>
                    <label fallback="19055">$INFO[Window(Visualisation).Property(ArtistSlideshow.ArtistBiography),]</label>
                </control>
            </control>
            <control type="progress" description="cache">
                <description>Progress Bar</description>
                <width>100%</width>
                <bottom>10</bottom>
                <height>8</height>
                <info>Player.ProgressCache</info>
                <visible>true</visible>
                <texturebg colordiffuse="OSDProgressBarColor">osd/progress-bg.png</texturebg>
                <lefttexture colordiffuse="Highlight2">osd/progress-end.png</lefttexture>
                <midtexture colordiffuse="Highlight2">osd/progress-end.png</midtexture>
                <righttexture colordiffuse="Highlight2">osd/progress-end.png</righttexture>
            </control>
            <control type="progress">
                <description>Progress Bar</description>
                <width>100%</width>
                <bottom>10</bottom>
                <height>8</height>
                <info>Player.Progress</info>
            </control>
        </control>
    </include>

    <include name="OverlayEnableAddons">
        <control type="button" id="9608">
            <include>HiddenButton</include>
            <onfocus>AlarmClock(Busy3,SetFocus(9113),00:00,silent)</onfocus>
            <onfocus>AlarmClock(Busy4,SetFocus(11000),00:01,silent)</onfocus>
        </control>
    </include>

    <include name="includecontent">
        <content target="$PARAM[target]" sortby="$PARAM[sortby]" limit="$PARAM[limit]">$PARAM[ContentToLoad]</content>
    </include>

    <include name="OnClickInclude">
        <onclick condition="!Window.IsVisible(Custom_MovieSets.xml)">$PARAM[onclick1]</onclick>
        <onclick condition="!Window.IsVisible(Custom_MovieSets.xml)">$PARAM[onclick2]</onclick>
        <onclick condition="!Window.IsVisible(Custom_MovieSets.xml)">$PARAM[onclick3]</onclick>
    </include>

    <include name="OnClickInclude2">
        <onclick condition="!Window.IsVisible(Custom_MovieSets.xml)">RunScript(script.embuary.helper,action=goto,path='"musicdb://albums/$INFO[ListItem.DBID]/"',target=music)</onclick>
    </include>

    <include name="IntentButton">
        <control type="button">
            <width>1</width>
            <height>1</height>
            <label />
            <enable>false</enable>
        </control>
    </include>

    <include name="NetflixPreviewWindowFullscreen">
        <aspectratio scalediffuse="false">scale</aspectratio>
        <width>1280</width>
        <height>720</height>
        <right>0</right>
        <top>0</top>
        <imagepath background="true" diffuse="common/homediffuse510fs.png">$VAR[GlobalFanart]</imagepath>
    </include>

    <include name="NetflixPreviewWindow">
        <aspectratio>scale</aspectratio>
        <include>Dimensions_Fullscreen</include>
        <imagepath background="true" diffuse="common/homediffuse510.png">$VAR[GlobalFanart]</imagepath>
    </include>

    <include name="Widgets">

        <!-- Widget 1 -->
        <include>skinshortcuts-template-widget-vertical.1</include>

        <!-- Widget 2 -->
        <include>skinshortcuts-template-widget-vertical.2</include>

        <!-- Widget 3 -->
        <include>skinshortcuts-template-widget-vertical.3</include>

        <!-- Widget 4 -->
        <include>skinshortcuts-template-widget-vertical.4</include>

        <!-- Widget 5 -->
        <include>skinshortcuts-template-widget-vertical.5</include>

        <!-- Widget 6 -->
        <include>skinshortcuts-template-widget-vertical.6</include>
    </include>

    <include name="ResetViewtypes">
        <onclick>Skin.Reset(home.classicwidgets)</onclick>
        <onclick>Skin.Reset(home.vertical)</onclick>
        <onclick>Skin.Reset(home.modernwidgets)</onclick>
        <onclick>Skin.Reset(home.vertical.widgets)</onclick>
        <onclick>Skin.Reset(homemenu.netflix)</onclick>
        <onclick>Skin.Reset(homemenu.clean.flix)</onclick>
    </include>

    <variable name="HomemenuViewtypeImage">
        <value condition="Control.HasFocus(1)">1</value>
        <value condition="Control.HasFocus(2)">2</value>
        <value condition="Control.HasFocus(3)">3</value>
        <value condition="Control.HasFocus(4)">4</value>
        <value condition="Control.HasFocus(5)">5</value>
        <value condition="Control.HasFocus(6)">6</value>
        <value condition="Control.HasFocus(7)">7</value>
        <value condition="Control.HasFocus(8)">8</value>
        <value condition="Control.HasFocus(9)">9</value>
        <value>1</value>
    </variable>

    <variable name="AlbumPath">
        <value condition="ListItem.IsFolder + String.IsEqual(ListItem.DBType,album)">$INFO[ListItem.FolderPath]</value>
    </variable>
    
    <variable name="ActorPath">
        <value condition="ListItem.IsFolder + String.IsEqual(Container(301).ListItem.DBType,actor)">$INFO[Container(301).ListItem.FolderPath]</value>
        <value condition="ListItem.IsFolder + String.IsEqual(ListItem.DBType,actor)">$INFO[ListItem.FolderPath]</value>
    </variable>

    <variable name="AlbumPath301">
        <value condition="Container(301).ListItem.IsFolder + String.IsEqual(Container(301).ListItem.DBType,album)">$INFO[Container(301).ListItem.FolderPath]</value>
    </variable>

    <variable name="DB_type">
        <value condition="String.IsEqual(ListItem.DBType,movie) | ListItem.IsCollection | String.IsEqual(ListItem.DBType,set)">type=movie</value>
        <value condition="String.IsEqual(ListItem.DBType,tvshow) | String.IsEqual(ListItem.DBType,season) | String.IsEqual(ListItem.DBType,episode)">type=tv</value>
    </variable>

    <variable name="CustomBlurImage">
        <value condition="!String.IsEmpty(Window(home).Property(Fanart))">$INFO[Window(home).Property(Fanart)]</value>
        <value>special://skin/extras/views/cars.jpg</value>
    </variable>

    <include name="LabelScroll">
        <scroll>true</scroll>
    </include>

    <include name="Item_Selected">
        <property name="ItemSelected">$LOCALIZE[31124]</property>
    </include>

    <variable name="WidgetColorSwitch">
        <value condition="Skin.HasSetting(homemenu.clean.flix)">Dark2</value>
        <value>Dark1</value>
    </variable>

    <variable name="Tmdb_Type">
        <value condition="String.IsEqual(Window(home).Property(Item_DBTYPE),movie) | String.IsEqual(Window(home).Property(Item_DBTYPE),set)">movie</value>
        <value condition="String.IsEqual(Window(home).Property(Item_DBTYPE),tvshow) | String.IsEqual(Window(home).Property(Item_DBTYPE),season) | String.IsEqual(Window(home).Property(Item_DBTYPE),episode)">tv</value>
    </variable>

    <variable name="Info_Query">
        <value condition="!String.IsEmpty(Window(home).Property(Item_Title)) + !String.IsEmpty(Window(home).Property(Item_Year))">query=$INFO[Window(home).Property(Item_Title)]&amp;year=$INFO[Window(home).Property(Item_Year)]</value>
        <value condition="!String.IsEmpty(Window(home).Property(Item_Title))">query=$INFO[Window(home).Property(Item_Title)]</value>
    </variable>

    <include name="Image_Content_Additional_Fanart">
        <content>$VAR[Image_Content_Additional_Fanart]</content>
    </include>

    <include name="IndicatorMoviesCleanHome">
        <control type="grouplist">
            <orientation>horizontal</orientation>
            <control type="label">
                <include>MultiWidgetsSubLabelDefinition</include>
                <label>  •  </label>
                <visible>Container($PARAM[id]).ListItem.IsPlaying | Container($PARAM[id]).ListItem.IsResumable |
                [String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayWatched.png) + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.watched)] |
                [String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayUnwatched.png) + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.newcontent) + [
                        [
                            String.IsEqual(Window(Home).Property(LatestMovie.1.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.2.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.3.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.4.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.5.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.6.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.7.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.8.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.9.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.10.Title),Container($PARAM[id]).ListItem.Label)
                        ]
                        |
                        [
                            String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        ]
                    ]
                ]</visible>
            </control>

            <!-- Resumable -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=Dark2]&#62596;[/COLOR]</label>
                <visible>!Container($PARAM[id]).ListItem.IsPlaying + Container($PARAM[id]).ListItem.IsResumable</visible>
            </control>

            <!-- Watched -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=FF00DD44]&#10003;[/COLOR]</label>
                <visible>!Container($PARAM[id]).ListItem.IsPlaying + String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayWatched.png) + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.watched)</visible>
            </control>
            
            <!-- Is Playing -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=Dark2]&#62811;[/COLOR]</label>
                <visible>Container($PARAM[id]).ListItem.IsPlaying + !Skin.HasSetting(hide.markers.isplaying)</visible>
            </control>

            <!-- New -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=ColoredIcons]&#62079;[/COLOR]</label>
                <visible>!Container($PARAM[id]).ListItem.IsPlaying + String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayUnwatched.png) + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.newcontent) + [
                    [
                        String.IsEqual(Window(Home).Property(LatestMovie.1.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.2.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.3.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.4.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.5.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.6.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.7.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.8.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.9.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.10.Title),Container($PARAM[id]).ListItem.Label)
                    ]
                    |
                    [
                        String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                    ]
                ]</visible>
            </control>
        </control>
    </include>

    <include name="IndicatorTvShowsCleanHome">
        <control type="grouplist">
            <orientation>horizontal</orientation>
            <control type="label">
                <include>MultiWidgetsSubLabelDefinition</include>
                <label>  •  </label>
                <visible>Container($PARAM[id]).ListItem.IsResumable |
                [String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayWatched.png) + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.watched)] |
                [String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayUnwatched.png) + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.newcontent) +
                    [
                        String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    ]
                ]</visible>
            </control>

            <!-- Resumable -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=Dark2]&#62596;[/COLOR]</label>
                <visible>Container($PARAM[id]).ListItem.IsResumable</visible>
            </control>

            <!-- Watched -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=FF00DD44]&#10003;[/COLOR]</label>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayWatched.png) + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.watched)</visible>
            </control>

            <!-- New -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=ColoredIcons]&#62079;[/COLOR]</label>
                <visible>String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayUnwatched.png) + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.newcontent) +
                [
                    String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                ]</visible>
            </control>
        </control>
    </include>

    <variable name="SetsPath">
        <value condition="ListItem.IsCollection + !String.IsEmpty(ListItem.DBID)">videodb://movies/sets/$INFO[ListItem.DBID]/?setid=$INFO[ListItem.DBID]</value>
    </variable>

    <include name="SlideOutItemsButton">
        <control type="button">
            <include>HiddenButton</include>
            <onfocus>AlarmClock(slide_out,SetFocus(2011),00:05,silent)</onfocus>
            <onfocus condition="Control.HasFocus(300)">SetProperty(LastMenuItem,300,home)</onfocus>
            <onfocus condition="Control.HasFocus(302)">SetProperty(LastMenuItem,302,home)</onfocus>
        </control>
    </include>

    <include name="SlideOutHomemenuButton">
        <control type="button" id="2011">
            <visible allowhiddenfocus="true">false</visible>
            <include>HiddenButton</include>
            <onup condition="!String.IsEmpty(Window(home).Property(LastMenuItem))">SetFocus($INFO[Window(home).Property(LastMenuItem)])</onup>
            <onleft condition="!String.IsEmpty(Window(home).Property(LastMenuItem))">SetFocus($INFO[Window(home).Property(LastMenuItem)])</onleft>
            <onright condition="!String.IsEmpty(Window(home).Property(LastMenuItem))">SetFocus($INFO[Window(home).Property(LastMenuItem)])</onright>
            <ondown condition="!String.IsEmpty(Window(home).Property(LastMenuItem))">SetFocus($INFO[Window(home).Property(LastMenuItem)])</ondown>
            <onback condition="!String.IsEmpty(Window(home).Property(LastMenuItem))">SetFocus($INFO[Window(home).Property(LastMenuItem)])</onback>
            <onup condition="String.IsEmpty(Window(home).Property(LastMenuItem))">300</onup>
            <onleft condition="String.IsEmpty(Window(home).Property(LastMenuItem))">300</onleft>
            <onright condition="String.IsEmpty(Window(home).Property(LastMenuItem))">300</onright>
            <ondown condition="String.IsEmpty(Window(home).Property(LastMenuItem))">300</ondown>
            <onback condition="String.IsEmpty(Window(home).Property(LastMenuItem))">300</onback>
        </control>
    </include>

    <include name="ButtonPlaylist">
        <control type="button" id="6148">
            <description>Music playlist</description>
            <label>13350</label>
            <include>DefContextButtonGradient</include>
            <align>left</align>
            <onclick>ActivateWindow(musicplaylist)</onclick>
            <visible>!String.IsEqual(Playlist.Length(music),0) + Window.IsVisible(MyMusicNav.xml)</visible>
        </control>
        <control type="button" id="6149">
            <description>Video playlist</description>
            <label>13350</label>
            <include>DefContextButtonGradient</include>
            <align>left</align>
            <onclick>ActivateWindow(videoplaylist)</onclick>
            <visible>!String.IsEqual(Playlist.Length(video),0) + Window.IsVisible(MyVideoNav.xml)</visible>
        </control>
    </include>

    <include name="ControlButtons">
        <control type="grouplist" id="6150">
            <visible>Player.HasMedia</visible>
            <usecontrolcoords>true</usecontrolcoords>
            <top>10</top>
            <height>60</height>
            <width>450</width>
            <align>center</align>
            <itemgap>10</itemgap>
            <include>ScrolltimeViewsList</include>
            <orientation>horizontal</orientation>
            <onup>20</onup>
            <ondown>9000</ondown>
            <onleft>6150</onleft>
            <onright>6150</onright>
            <onback>50</onback>
            <control type="button" id="6151">
                <texturefocus colordiffuse="$VAR[ColorHighlight]" flipx="true">osd/next.png</texturefocus>
                <texturenofocus colordiffuse="Black70" flipx="true">osd/next.png</texturenofocus>
                <width>48</width>
                <height>48</height>
                <onclick>PlayerControl(Previous)</onclick>
            </control>
            <control type="button" id="6152">
                <texturefocus colordiffuse="$VAR[ColorHighlight]" flipx="true">osd/ff.png</texturefocus>
                <texturenofocus colordiffuse="Black70" flipx="true">osd/ff.png</texturenofocus>
                <width>48</width>
                <height>48</height>
                <onclick>PlayerControl(Rewind)</onclick>
                <enable>Player.SeekEnabled</enable>
                <animation effect="fade" start="100" end="33" time="100" condition="!Player.SeekEnabled">Conditional</animation>
            </control>
            <control type="togglebutton" id="6153">
                <texturefocus colordiffuse="$VAR[ColorHighlight]">osd/pause.png</texturefocus>
                <texturenofocus colordiffuse="Black70">osd/pause.png</texturenofocus>
                <alttexturefocus colordiffuse="$VAR[ColorHighlight]">osd/play.png</alttexturefocus>
                <alttexturenofocus colordiffuse="Black70">osd/play.png</alttexturenofocus>
                <width>48</width>
                <height>48</height>
                <usealttexture>Player.Paused | Player.Forwarding | Player.Rewinding</usealttexture>
                <onclick>PlayerControl(Play)</onclick>
                <enable>Player.PauseEnabled</enable>
                <animation effect="fade" start="100" end="33" time="100" condition="!Player.PauseEnabled">Conditional</animation>
            </control>
            <control type="button" id="6154">
                <texturefocus colordiffuse="$VAR[ColorHighlight]">osd/stop.png</texturefocus>
                <texturenofocus colordiffuse="Black70">osd/stop.png</texturenofocus>
                <width>48</width>
                <height>48</height>
                <onclick>PlayerControl(Stop)</onclick>
            </control>
            <control type="button" id="6155">
                <texturefocus colordiffuse="$VAR[ColorHighlight]">osd/ff.png</texturefocus>
                <texturenofocus colordiffuse="Black70">osd/ff.png</texturenofocus>
                <width>48</width>
                <height>48</height>
                <onclick>PlayerControl(Forward)</onclick>
                <enable>Player.SeekEnabled</enable>
                <animation effect="fade" start="100" end="33" time="100" condition="!Player.SeekEnabled">Conditional</animation>
            </control>
            <control type="button" id="6156">
                <texturefocus colordiffuse="$VAR[ColorHighlight]">osd/next.png</texturefocus>
                <texturenofocus colordiffuse="Black70">osd/next.png</texturenofocus>
                <width>48</width>
                <height>48</height>
                <onclick>PlayerControl(Next)</onclick>
            </control>
            <control type="button" id="6157">
                <texturefocus colordiffuse="$VAR[ColorHighlight]">osd/fullscreen.png</texturefocus>
                <texturenofocus colordiffuse="Black70">osd/fullscreen.png</texturenofocus>
                <width>48</width>
                <height>48</height>
                <onclick condition="Player.HasVideo">ActivateWindow(fullscreenvideo)</onclick>
                <onclick condition="Player.HasAudio">ActivateWindow(visualisation)</onclick>
            </control>
        </control>
    </include>

    <include name="Container_NumItems">
        <param name="id" value="$PARAM[id]" default="9505"/>
        <param name="visible" value="$PARAM[visible]" default="false"/>
        <definition>
        <control type="group">
            <include>Animation.DelayFadeIn1200</include>
            <visible>$PARAM[visible]</visible>
            <control type="label">
                <align>right</align>
                <right>125</right>
                <bottom>80</bottom>
                <font>SmallNavi</font>
                <height>34</height>
                <width>200</width>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Container($PARAM[id]).CurrentItem] / $INFO[Container($PARAM[id]).NumItems]</label>
                <animation effect="slide" start="0,0" end="45,0" time="0" condition="!Integer.IsGreater(Container($PARAM[id]).NumItems,1)">Conditional</animation>
            </control>
            <control type="grouplist">
                <orientation>horizontal</orientation>
                <height>22</height>
                <align>right</align>
                <right>SidePad</right>
                <width>100</width>
                <bottom>SidePad</bottom>
                <visible>Integer.IsGreater(Container($PARAM[id]).NumItems,1)</visible>
                <control type="image">
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2" flipx="true">common/arrow-small-right.png</texture>
                </control>
                <control type="image">
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2">common/arrow-small-right.png</texture>
                </control>
            </control>
        </control>
        </definition>
    </include>

    <include name="weatherlayoutwidgetsvertical.poster">
        <include>def_weatherposter</include>
    </include>

    <include name="weatherlayoutwidgetsvertical.square">
        <include>def_weathersquare</include>
    </include>

    <include name="weatherlayoutwidgetsvertical.fanart">
        <include>def_weatherfanart</include>
    </include>

    <include name="weatherlayoutwidgetsvertical.poster.focus">
        <param name="zoom_condition" value="$PARAM[zoom_condition]" default="Skin.HasSetting(items.focus.zoom)"/>
        <definition>
        <control type="group">
            <include condition="$PARAM[zoom_condition]">Animation.Focus.Zoom</include>
            <include>def_weatherposter</include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
                <param name="glow_height" value="$PARAM[glow_height]" />
                <param name="glow_top" value="$PARAM[glow_top]"/>
                <param name="glow_zoom" value="$PARAM[glow_zoom]"/>
                <param name="glow_left" value="$PARAM[glow_left]"/>
                <param name="glow_right" value="$PARAM[glow_right]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="weatherlayoutwidgetsvertical.square.focus">
        <param name="zoom_condition" value="$PARAM[zoom_condition]" default="Skin.HasSetting(items.focus.zoom)"/>
        <definition>
        <control type="group">
            <include condition="$PARAM[zoom_condition]">Animation.Focus.Zoom</include>
            <include>def_weathersquare</include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
                <param name="glow_height" value="$PARAM[glow_height]" />
                <param name="glow_top" value="$PARAM[glow_top]"/>
                <param name="glow_zoom" value="$PARAM[glow_zoom]"/>
                <param name="glow_left" value="$PARAM[glow_left]"/>
                <param name="glow_right" value="$PARAM[glow_right]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="weatherlayoutwidgetsvertical.fanart.focus">
        <param name="zoom_condition" value="$PARAM[zoom_condition]" default="Skin.HasSetting(items.focus.zoom)"/>
        <definition>
        <control type="group">
            <include condition="$PARAM[zoom_condition]">Animation.Focus.Zoom</include>
            <include>def_weatherfanart</include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
                <param name="glow_height" value="$PARAM[glow_height]" />
                <param name="glow_top" value="$PARAM[glow_top]"/>
                <param name="glow_zoom" value="$PARAM[glow_zoom]"/>
                <param name="glow_left" value="$PARAM[glow_left]"/>
                <param name="glow_right" value="$PARAM[glow_right]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="layoutweather">
        <itemlayout height="344" width="256" condition="String.IsEqual(Container(300).ListItem.Property(widgetaspect),Poster) | String.IsEmpty(Container(300).ListItem.Property(widgetaspect))">
            <control type="image">
                <left>17</left>
                <top>10</top>
                <right>17</right>
                <bottom>10</bottom>
                <texture border="5" colordiffuse="Light4">common/black-back.png</texture>
            </control>
            <include content="def_weatherfanart.widgets">
                <param name="bordertopbottom" value="10"/>
                <param name="borderleftright" value="17"/>
            </include>
            <control type="image">
                <top>90</top>
                <centerleft>50%</centerleft>
                <height>160</height>
                <width>160</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[ListItem.Property(FanartTexture)]</texture>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="multiimage">
                <top>90</top>
                <centerleft>50%</centerleft>
                <height>160</height>
                <width>160</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <imagepath>$INFO[ListItem.Property(AnimatedFanartImagepath)]</imagepath>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="image">
                <top>90</top>
                <centerleft>50%</centerleft>
                <height>160</height>
                <width>160</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[ListItem.Property(OutlookTexture)]</texture>
                <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
            </control>
            <control type="label">
                <top>30</top>
                <height>50</height>
                <font>NotificationBold</font>
                <align>center</align>
                <aligny>center</aligny>
                <textcolor>PanelWhite100</textcolor>
                <label fallback="10006">$INFO[ListItem.Property(Title)]</label>
            </control>
            <control type="label">
                <bottom>30</bottom>
                <aligny>center</aligny>
                <scroll>false</scroll>
                <align>center</align>
                <font>Home</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$VAR[WeatherPropertyLabel]</label>
                <visible>String.IsEmpty(ListItem.Property(Today))</visible>
            </control>
            <control type="label">
                <bottom>30</bottom>
                <aligny>center</aligny>
                <scroll>false</scroll>
                <align>center</align>
                <font>Large</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[ListItem.Property(HighTemp)]</label>
                <visible>!String.IsEmpty(ListItem.Property(Today))</visible>
            </control>
        </itemlayout>
        <itemlayout height="344" width="359" condition="!String.IsEqual(Container(300).ListItem.Property(widgetaspect),Fanart) + !String.IsEqual(Container(300).ListItem.Property(widgetaspect),Thumbnail) + !String.IsEqual(Container(300).ListItem.Property(widgetaspect),Poster) + !String.IsEmpty(Container(300).ListItem.Property(widgetaspect))">
            <control type="image">
                <left>17</left>
                <top>10</top>
                <right>17</right>
                <bottom>10</bottom>
                <texture border="5" colordiffuse="Light4">common/black-back.png</texture>
            </control>
            <include content="def_weatherfanart.widgets">
                <param name="bordertopbottom" value="10"/>
                <param name="borderleftright" value="17"/>
            </include>
            <control type="image">
                <top>100</top>
                <left>35</left>
                <height>140</height>
                <width>140</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[ListItem.Property(FanartTexture)]</texture>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="multiimage">
                <top>100</top>
                <left>35</left>
                <height>140</height>
                <width>140</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <imagepath>$INFO[ListItem.Property(AnimatedFanartImagepath)]</imagepath>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="image">
                <top>100</top>
                <left>35</left>
                <height>140</height>
                <width>140</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[ListItem.Property(OutlookTexture)]</texture>
                <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
            </control>
            <control type="label">
                <left>45</left>
                <right>50</right>
                <top>60</top>
                <height>50</height>
                <font>NotificationBold</font>
                <align>right</align>
                <aligny>center</aligny>
                <textcolor>PanelWhite100</textcolor>
                <label fallback="10006">$INFO[ListItem.Property(Title)]</label>
            </control>
            <control type="label">
                <bottom>130</bottom>
                <right>50</right>
                <aligny>center</aligny>
                <scroll>false</scroll>
                <align>right</align>
                <font>Home</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$VAR[WeatherPropertyLabel]</label>
                <visible>String.IsEmpty(ListItem.Property(Today))</visible>
            </control>
            <control type="label">
                <bottom>130</bottom>
                <right>50</right>
                <aligny>center</aligny>
                <scroll>false</scroll>
                <align>right</align>
                <font>Large</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[ListItem.Property(HighTemp)]</label>
                <visible>!String.IsEmpty(ListItem.Property(Today))</visible>
            </control>
            <control type="label">
                <left>42</left>
                <right>50</right>
                <bottom>50</bottom>
                <height>50</height>
                <font>Tiny</font>
                <align>right</align>
                <aligny>center</aligny>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[ListItem.Label]</label>
            </control>
        </itemlayout>
        <itemlayout height="344" width="598.33" condition="String.IsEqual(Container(300).ListItem.Property(widgetaspect),Fanart) | String.IsEqual(Container(300).ListItem.Property(widgetaspect),Thumbnail)">
            <control type="image">
                <left>17</left>
                <top>10</top>
                <right>17</right>
                <bottom>10</bottom>
                <texture border="5" colordiffuse="Light4">common/black-back.png</texture>
            </control>
            <include content="def_weatherfanart.widgets">
                <param name="bordertopbottom" value="10"/>
                <param name="borderleftright" value="17"/>
            </include>
            <control type="image">
                <top>80</top>
                <left>30</left>
                <height>192</height>
                <width>192</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[ListItem.Property(FanartTexture)]</texture>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="multiimage">
                <top>80</top>
                <left>30</left>
                <height>192</height>
                <width>192</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <imagepath>$INFO[ListItem.Property(AnimatedFanartImagepath)]</imagepath>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="image">
                <top>80</top>
                <left>50</left>
                <height>192</height>
                <width>192</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[ListItem.Property(OutlookTexture)]</texture>
                <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
            </control>
            <control type="label">
                <left>292</left>
                <right>57</right>
                <top>70</top>
                <height>50</height>
                <font>NotificationBold</font>
                <align>right</align>
                <aligny>center</aligny>
                <textcolor>PanelWhite100</textcolor>
                <label fallback="10006">$INFO[ListItem.Property(Title)]</label>
            </control>
            <control type="label">
                <left>292</left>
                <right>57</right>
                <height>100%</height>
                <aligny>center</aligny>
                <scroll>false</scroll>
                <align>right</align>
                <font>Large</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$VAR[WeatherPropertyLabel]</label>
                <visible>String.IsEmpty(ListItem.Property(Today))</visible>
            </control>
            <control type="label">
                <left>292</left>
                <right>57</right>
                <height>100%</height>
                <aligny>center</aligny>
                <scroll>false</scroll>
                <align>right</align>
                <font>LargeX2</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[ListItem.Property(HighTemp)]</label>
                <visible>!String.IsEmpty(ListItem.Property(Today))</visible>
            </control>
            <control type="label">
                <left>242</left>
                <right>57</right>
                <bottom>70</bottom>
                <height>50</height>
                <font>Tiny</font>
                <align>right</align>
                <aligny>center</aligny>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[ListItem.Label]</label>
            </control>
        </itemlayout>
        <focusedlayout height="344" width="256" condition="String.IsEqual(Container(300).ListItem.Property(widgetaspect),Poster) | String.IsEmpty(Container(300).ListItem.Property(widgetaspect))">
            <control type="image">
                <left>17</left>
                <top>10</top>
                <right>17</right>
                <bottom>10</bottom>
                <texture border="5" colordiffuse="Light4">common/black-back.png</texture>
            </control>
            <include content="def_weatherfanart.widgets">
                <param name="bordertopbottom" value="10"/>
                <param name="borderleftright" value="17"/>
            </include>
            <control type="image">
                <top>90</top>
                <centerleft>50%</centerleft>
                <height>160</height>
                <width>160</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[ListItem.Property(FanartTexture)]</texture>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="multiimage">
                <top>90</top>
                <centerleft>50%</centerleft>
                <height>160</height>
                <width>160</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <imagepath>$INFO[ListItem.Property(AnimatedFanartImagepath)]</imagepath>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="image">
                <top>90</top>
                <centerleft>50%</centerleft>
                <height>160</height>
                <width>160</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[ListItem.Property(OutlookTexture)]</texture>
                <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
            </control>
            <control type="label">
                <top>30</top>
                <height>50</height>
                <font>NotificationBold</font>
                <align>center</align>
                <aligny>center</aligny>
                <textcolor>PanelWhite100</textcolor>
                <label fallback="10006">$INFO[ListItem.Property(Title)]</label>
            </control>
            <control type="label">
                <bottom>30</bottom>
                <aligny>center</aligny>
                <scroll>false</scroll>
                <align>center</align>
                <font>Home</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$VAR[WeatherPropertyLabel]</label>
                <visible>String.IsEmpty(ListItem.Property(Today))</visible>
            </control>
            <control type="label">
                <bottom>30</bottom>
                <aligny>center</aligny>
                <scroll>false</scroll>
                <align>center</align>
                <font>Large</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[ListItem.Property(HighTemp)]</label>
                <visible>!String.IsEmpty(ListItem.Property(Today))</visible>
            </control>
        </focusedlayout>
        <focusedlayout height="344" width="359" condition="!String.IsEqual(Container(300).ListItem.Property(widgetaspect),Fanart) + !String.IsEqual(Container(300).ListItem.Property(widgetaspect),Thumbnail) + !String.IsEqual(Container(300).ListItem.Property(widgetaspect),Poster) + !String.IsEmpty(Container(300).ListItem.Property(widgetaspect))">
            <control type="image">
                <left>17</left>
                <top>10</top>
                <right>17</right>
                <bottom>10</bottom>
                <texture border="5" colordiffuse="Light4">common/black-back.png</texture>
            </control>
            <include content="def_weatherfanart.widgets">
                <param name="bordertopbottom" value="10"/>
                <param name="borderleftright" value="17"/>
            </include>
            <control type="image">
                <top>100</top>
                <left>35</left>
                <height>140</height>
                <width>140</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[ListItem.Property(FanartTexture)]</texture>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="multiimage">
                <top>100</top>
                <left>35</left>
                <height>140</height>
                <width>140</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <imagepath>$INFO[ListItem.Property(AnimatedFanartImagepath)]</imagepath>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="image">
                <top>100</top>
                <left>35</left>
                <height>140</height>
                <width>140</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[ListItem.Property(OutlookTexture)]</texture>
                <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
            </control>
            <control type="label">
                <left>45</left>
                <right>50</right>
                <top>60</top>
                <height>50</height>
                <font>NotificationBold</font>
                <align>right</align>
                <aligny>center</aligny>
                <textcolor>PanelWhite100</textcolor>
                <label fallback="10006">$INFO[ListItem.Property(Title)]</label>
            </control>
            <control type="label">
                <bottom>130</bottom>
                <right>50</right>
                <aligny>center</aligny>
                <scroll>false</scroll>
                <align>right</align>
                <font>Home</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$VAR[WeatherPropertyLabel]</label>
                <visible>String.IsEmpty(ListItem.Property(Today))</visible>
            </control>
            <control type="label">
                <bottom>130</bottom>
                <right>50</right>
                <aligny>center</aligny>
                <scroll>false</scroll>
                <align>right</align>
                <font>Large</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[ListItem.Property(HighTemp)]</label>
                <visible>!String.IsEmpty(ListItem.Property(Today))</visible>
            </control>
            <control type="label">
                <left>42</left>
                <right>50</right>
                <bottom>50</bottom>
                <height>50</height>
                <font>Tiny</font>
                <align>right</align>
                <aligny>center</aligny>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[ListItem.Label]</label>
            </control>
        </focusedlayout>
        <focusedlayout height="344" width="598.33" condition="String.IsEqual(Container(300).ListItem.Property(widgetaspect),Fanart) | String.IsEqual(Container(300).ListItem.Property(widgetaspect),Thumbnail)">
            <control type="image">
                <left>17</left>
                <top>10</top>
                <right>17</right>
                <bottom>10</bottom>
                <texture border="5" colordiffuse="Light4">common/black-back.png</texture>
            </control>
            <include content="def_weatherfanart.widgets">
                <param name="bordertopbottom" value="10"/>
                <param name="borderleftright" value="17"/>
            </include>
            <control type="image">
                <top>80</top>
                <left>30</left>
                <height>192</height>
                <width>192</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[ListItem.Property(FanartTexture)]</texture>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + !String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="multiimage">
                <top>80</top>
                <left>30</left>
                <height>192</height>
                <width>192</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <imagepath>$INFO[ListItem.Property(AnimatedFanartImagepath)]</imagepath>
                <visible>!String.IsEmpty(Skin.String(weather.icons.path)) + String.Contains(Skin.String(weather.icons.path),animated)</visible>
            </control>
            <control type="image">
                <top>80</top>
                <left>50</left>
                <height>192</height>
                <width>192</width>
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture>$INFO[ListItem.Property(OutlookTexture)]</texture>
                <visible>String.IsEmpty(Skin.String(weather.icons.path))</visible>
            </control>
            <control type="label">
                <left>292</left>
                <right>57</right>
                <top>70</top>
                <height>50</height>
                <font>NotificationBold</font>
                <align>right</align>
                <aligny>center</aligny>
                <textcolor>PanelWhite100</textcolor>
                <label fallback="10006">$INFO[ListItem.Property(Title)]</label>
            </control>
            <control type="label">
                <left>292</left>
                <right>57</right>
                <height>100%</height>
                <aligny>center</aligny>
                <scroll>false</scroll>
                <align>right</align>
                <font>Large</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$VAR[WeatherPropertyLabel]</label>
                <visible>String.IsEmpty(ListItem.Property(Today))</visible>
            </control>
            <control type="label">
                <left>292</left>
                <right>57</right>
                <height>100%</height>
                <aligny>center</aligny>
                <scroll>false</scroll>
                <align>right</align>
                <font>LargeX2</font>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[ListItem.Property(HighTemp)]</label>
                <visible>!String.IsEmpty(ListItem.Property(Today))</visible>
            </control>
            <control type="label">
                <left>242</left>
                <right>57</right>
                <bottom>70</bottom>
                <height>50</height>
                <font>Tiny</font>
                <align>right</align>
                <aligny>center</aligny>
                <textcolor>PanelWhite100</textcolor>
                <label>$INFO[ListItem.Label]</label>
            </control>
        </focusedlayout>
    </include>

    <include name="include.widget.poster">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="height_reflection" value="$PARAM[height_reflection]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetposter">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]"/>
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height_reflection]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[PosterImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.season">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="height_reflection" value="$PARAM[height_reflection]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetseason">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]"/>
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height_reflection]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>212</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[PosterImageOnly]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <height>$PARAM[height_reflection]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>212</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[SeasonImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.square">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="height_reflection" value="$PARAM[height_reflection]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetsquare">
                <param name="aspectratio" value="$PARAM[aspectratio]"/>
                <param name="distance" value="$PARAM[distance]"/>
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height_reflection]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>$PARAM[distance]</left>
                <top>$PARAM[distance]</top>
                <right>$PARAM[distance]</right>
                <bottom>$PARAM[distance]</bottom>
                <aspectratio scalediffuse="false">$PARAM[aspectratio]</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[PosterImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.square.system">
        <include>def_widgetsquare_system</include>
    </include>

    <include name="include.widget.fanart">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="small" value="$PARAM[smallfanart]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetfanart">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="small" value="$PARAM[small]" default="false"/>
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[WidgetFanartImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.landscape">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetlandscape">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="clearlogo" value="$PARAM[clearlogo]" />
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[FanartImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.banner">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetbanner">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>305</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[BannerImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.thumb">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="small" value="$PARAM[smallthumb]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetthumb">
                <param name="clearlogo" value="$PARAM[clearlogo]"/>
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="small" value="$PARAM[small]" />
                <param name="poster" value="$PARAM[poster]" />
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[WidgetThumbnailImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.poster.focus">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]" default="false"/>
        <param name="zoom_condition" value="$PARAM[zoom_condition]" default="Skin.HasSetting(items.focus.zoom)"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[PosterImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <include condition="$PARAM[zoom_condition]" content="Animation.Focus.Zoom">
                <param name="zoom" value="$PARAM[zoom]"/>
            </include>
            <height>$PARAM[height]</height>
            <include content="def_widgetposter">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]" />
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
                <param name="glow_height" value="$PARAM[glow_height]" />
                <param name="glow_top" value="$PARAM[glow_top]"/>
                <param name="glow_zoom" value="$PARAM[glow_zoom]"/>
                <param name="glow_left" value="$PARAM[glow_left]"/>
                <param name="glow_right" value="$PARAM[glow_right]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.season.focus">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>212</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[PosterImageOnly]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>212</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[SeasonImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <include condition="Skin.HasSetting(items.focus.zoom)">Animation.Focus.Zoom</include>
            <height>$PARAM[height]</height>
            <include content="def_widgetseason">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]" />
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
                <param name="glow_height" value="$PARAM[glow_height]" />
                <param name="glow_top" value="$PARAM[glow_top]"/>
                <param name="glow_zoom" value="$PARAM[glow_zoom]"/>
                <param name="glow_left" value="$PARAM[glow_left]"/>
                <param name="glow_right" value="$PARAM[glow_right]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.square.focus">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="height_reflection" value="$PARAM[height_reflection]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <definition>
        <control type="group">
            <height>$PARAM[height_reflection]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>$PARAM[distance]</left>
                <top>$PARAM[distance]</top>
                <right>$PARAM[distance]</right>
                <bottom>$PARAM[distance]</bottom>
                <aspectratio scalediffuse="false">$PARAM[aspectratio]</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[PosterImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <include condition="Skin.HasSetting(items.focus.zoom)">Animation.Focus.Zoom</include>
            <height>$PARAM[height]</height>
            <include content="def_widgetsquare">
                <param name="aspectratio" value="$PARAM[aspectratio]"/>
                <param name="distance" value="$PARAM[distance]"/>
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
                <param name="glow_height" value="$PARAM[glow_height]" />
                <param name="glow_top" value="$PARAM[glow_top]"/>
                <param name="glow_zoom" value="$PARAM[glow_zoom]"/>
                <param name="glow_left" value="$PARAM[glow_left]"/>
                <param name="glow_right" value="$PARAM[glow_right]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.square.system.focus">
        <control type="group">
            <include condition="Skin.HasSetting(items.focus.zoom)">Animation.Focus.Zoom</include>
            <include>def_widgetsquare_system</include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
                <param name="glow_height" value="$PARAM[glow_height]" />
                <param name="glow_top" value="$PARAM[glow_top]"/>
                <param name="glow_zoom" value="$PARAM[glow_zoom]"/>
                <param name="glow_left" value="$PARAM[glow_left]"/>
                <param name="glow_right" value="$PARAM[glow_right]"/>
            </include>
        </control>
    </include>

    <include name="include.widget.fanart.focus">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="small" value="$PARAM[smallfanart]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[WidgetFanartImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <include condition="Skin.HasSetting(items.focus.zoom)">Animation.Focus.Zoom</include>
            <height>$PARAM[height]</height>
            <include content="def_widgetfanart">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="small" value="$PARAM[small]" default="false"/>
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
                <param name="glow_height" value="$PARAM[glow_height]" />
                <param name="glow_top" value="$PARAM[glow_top]"/>
                <param name="glow_zoom" value="$PARAM[glow_zoom]"/>
                <param name="glow_left" value="$PARAM[glow_left]"/>
                <param name="glow_right" value="$PARAM[glow_right]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.landscape.focus">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[FanartImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <include condition="Skin.HasSetting(items.focus.zoom)">Animation.Focus.Zoom</include>
            <height>$PARAM[height]</height>
            <include content="def_widgetlandscape">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="clearlogo" value="$PARAM[clearlogo]" />
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
                <param name="glow_height" value="$PARAM[glow_height]" />
                <param name="glow_top" value="$PARAM[glow_top]"/>
                <param name="glow_zoom" value="$PARAM[glow_zoom]"/>
                <param name="glow_left" value="$PARAM[glow_left]"/>
                <param name="glow_right" value="$PARAM[glow_right]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.banner.focus">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <definition>
        <control type="group">
            <include condition="Skin.HasSetting(items.focus.zoom)">Animation.Focus.Zoom</include>
            <height>$PARAM[height]</height>
            <include content="def_widgetbanner">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
                <param name="glow_height" value="$PARAM[glow_height]" />
                <param name="glow_top" value="$PARAM[glow_top]"/>
                <param name="glow_zoom" value="$PARAM[glow_zoom]"/>
                <param name="glow_left" value="$PARAM[glow_left]"/>
                <param name="glow_right" value="$PARAM[glow_right]"/>
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>305</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[BannerImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.thumb.focus">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="small" value="$PARAM[smallthumb]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[WidgetThumbnailImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <include condition="Skin.HasSetting(items.focus.zoom)">Animation.Focus.Zoom</include>
            <height>$PARAM[height]</height>
            <include content="def_widgetthumb">
                <param name="clearlogo" value="$PARAM[clearlogo]"/>
                <param name="small" value="$PARAM[small]" />
                <param name="poster" value="$PARAM[poster]" />
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
                <param name="glow_height" value="$PARAM[glow_height]" />
                <param name="glow_top" value="$PARAM[glow_top]"/>
                <param name="glow_zoom" value="$PARAM[glow_zoom]"/>
                <param name="glow_left" value="$PARAM[glow_left]"/>
                <param name="glow_right" value="$PARAM[glow_right]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.pvr">
        <include>def_widgetpvr</include>
    </include>

    <include name="include.widget.pvr.focus">
        <control type="group">
            <include condition="Skin.HasSetting(items.focus.zoom)" content="Animation.Focus.Zoom">
                <param name="zoom" value="101" />
            </include>
            <include>def_widgetpvr</include>
            <include content="def_widgetpvrfocus">
                <param name="shortcutsid" value="$PARAM[shortcutsid]" />
            </include>
            <include content="def_widget_glow">
                <param name="glow_height" value="$PARAM[glow_height]" />
                <param name="glow_top" value="$PARAM[glow_top]" />
                <param name="glow_left" value="$PARAM[glow_left]" />
                <param name="glow_right" value="$PARAM[glow_right]" />
                <param name="glow_zoom" value="$PARAM[glow_zoom]" />
                <param name="id" value="$PARAM[shortcutsid]" />
            </include>
        </control>
    </include>

    <variable name="PlayListStatsPath">
        <value condition="String.StartsWith(Container(300).ListItem.Property(path),ActivateWindow) + String.Contains(Container(300).ListItem.Property(path),Videos) + String.Contains(Container(300).ListItem.Property(path),playlists) + String.Contains(Container(300).ListItem.Property(path),.xsp)">plugin://script.embuary.helper/?info=getpathstats&amp;path=$INFO[Container(300).ListItem.Property(path)]&amp;prefix=Playlist</value>
    </variable>

    <variable name="PlaylistsCountItemPath">
        <value condition="String.StartsWith(Container(300).ListItem.Property(path),ActivateWindow) + String.Contains(Container(300).ListItem.Property(path),Videos) + String.Contains(Container(300).ListItem.Property(path),playlists) + !String.Contains(Container(300).ListItem.Property(path),.xsp)">special://videoplaylists/</value>
    </variable>

    <variable name="RandomMovies">
        <value condition="Skin.HasSetting(home.netflix.autoplay.trailer) + System.AddonIsEnabled(service.library.data.provider) + ![Skin.HasSetting(EnableEffects) + Skin.HasSetting(BlurOnHome)]">plugin://service.library.data.provider?type=randommovies&amp;reload=$INFO[Window.Property(randommovies)]</value>
        <value condition="Skin.HasSetting(home.netflix.autoplay.trailer)">special://skin/extras/playlists/Spotlight.xsp</value>
        <value>special://skin/extras/playlists/RandomMovies.xsp</value>
    </variable>
    
    <include name="BusySpinner">
        <param name="color" default="Dark1"/>
        <definition>
        <control type="image">
            <description>Busy animation</description>
            <centerleft>54</centerleft>
            <centertop>54</centertop>
            <width>100</width>
            <height>100</height>
            <texture>dialog/loading-back.png</texture>
            <aspectratio>keep</aspectratio>
        </control>
        <control type="image">
            <description>Busy animation</description>
            <centerleft>54</centerleft>
            <centertop>54</centertop>
            <width>100</width>
            <height>100</height>
            <animation effect="rotate" condition="true" start="360" end="0" loop="true" time="1000" center="auto">Conditional</animation>
            <texture colordiffuse="$VAR[ColorHighlight]">dialog/loading-spinner.png</texture>
            <aspectratio>keep</aspectratio>
        </control>
        <control type="label">
            <description>Busy label</description>
            <posx>105</posx>
            <posy>30</posy>
            <width>720</width>
            <height>48</height>
            <align>left</align>
            <label>$LOCALIZE[31138]...</label>
            <textcolor>$PARAM[color]</textcolor>
        </control>
        </definition>
    </include>
    
    <include name="MousePointer">
    
        <!-- Pointer -->
        <control type="image" id="1">
            <width>40</width>
            <height>40</height>
            <texture>mouse2.png</texture>
            <visible>Skin.HasSetting(hide.mouse.warning)</visible>
        </control>

        <!-- Pointer focus -->
        <control type="image" id="2">
            <width>40</width>
            <height>40</height>
            <texture>mouse2.png</texture>
            <visible>Skin.HasSetting(hide.mouse.warning)</visible>
        </control>

        <!-- Pointer drag -->
        <control type="image" id="3">
            <width>40</width>
            <height>40</height>
            <texture>mouse2.png</texture>
            <visible>Skin.HasSetting(hide.mouse.warning)</visible>
        </control>

        <!-- Pointer click -->
        <control type="image" id="4">
            <width>40</width>
            <height>40</height>
            <texture>mouse2.png</texture>
            <visible>Skin.HasSetting(hide.mouse.warning)</visible>
        </control>
    </include>
    
    <include name="MouseWarning">
    
        <!-- Pointer -->
        <control type="image" id="1">
            <width>200</width>
            <height>50</height>
            <texture>mouse.png</texture>
            <visible>!Skin.HasSetting(hide.mouse.warning)</visible>
        </control>

        <!-- Pointer focus -->
        <control type="image" id="2">
            <width>200</width>
            <height>50</height>
            <texture>mouse.png</texture>
            <visible>!Skin.HasSetting(hide.mouse.warning)</visible>
        </control>

        <!-- Pointer drag -->
        <control type="image" id="3">
            <width>200</width>
            <height>50</height>
            <texture>mouse.png</texture>
            <visible>!Skin.HasSetting(hide.mouse.warning)</visible>
        </control>

        <!-- Pointer click -->
        <control type="image" id="4">
            <width>200</width>
            <height>50</height>
            <texture>mouse.png</texture>
            <visible>!Skin.HasSetting(hide.mouse.warning)</visible>
        </control>
    </include>
    
    <include name="arrowdimensions">
        <width>16</width>
        <height>16</height>
    </include>
    
    <include name="EffectsPreviewImage">
        <control type="image">
            <texture background="true">$PARAM[texture]</texture>
            <include>BackgroundFanartFadetime</include>
            <animation effect="fade" end="5" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),5)">Conditional</animation>
            <animation effect="fade" end="0" start="100" time="0" condition="!String.IsEmpty(Skin.String(BackgroundBrightnessBlur)) + Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),0)">Conditional</animation>
            <animation effect="fade" end="10" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),10)">Conditional</animation>
            <animation effect="fade" end="15" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),15)">Conditional</animation>
            <animation effect="fade" end="20" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),20)">Conditional</animation>
            <animation effect="fade" end="25" start="100" time="0" condition="String.IsEmpty(Skin.String(BackgroundBrightnessBlur)) | Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),25)">Conditional</animation>
            <animation effect="fade" end="30" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),30)">Conditional</animation>
            <animation effect="fade" end="35" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),35)">Conditional</animation>
            <animation effect="fade" end="40" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),40)">Conditional</animation>
            <animation effect="fade" end="45" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),45)">Conditional</animation>
            <animation effect="fade" end="50" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),50)">Conditional</animation>
            <animation effect="fade" end="55" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),55)">Conditional</animation>
            <animation effect="fade" end="60" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),60)">Conditional</animation>
        </control>
    </include>
    
    <include name="border_texture">
        <param name="colordiffuse" default="BoxWidget"/>
        <definition>
        <bordersize>1</bordersize>
        <bordertexture border="4" colordiffuse="$PARAM[colordiffuse]">common/box21.png</bordertexture>
        </definition>
    </include>
    
    <variable name="UpNextEpisodePath">
        <value condition="String.IsEqual(ListItem.DBType,tvshow) + Integer.IsGreater(ListItem.Property(UnwatchedEpisodes),0) + !String.IsEmpty(ListItem.DBID)">videodb://inprogresstvshows/$INFO[ListItem.DBID]/-2/?tvshowid=$INFO[ListItem.DBID]</value>
    </variable>
    
    <variable name="TMDbHelper_InfoList_Content">
        <value condition="String.IsEqual(Window(home).Property(extendedtype),tv)">plugin://plugin.video.themoviedb.helper/?info=details&amp;type=tv&amp;query=$INFO[Container(10051).ListItem.Label]</value>
        <value>plugin://plugin.video.themoviedb.helper/?info=details&amp;type=movie&amp;query=$INFO[Container(10051).ListItem.Label]</value>
    </variable>
    
    <include name="PosterDiscCase">
        <param name="discposition" default="5"/>
        <definition>
        <control type="group">
            <left>1568</left>
            <top>548</top>
            <visible>!String.IsEqual(ListItem.Label,..)</visible>
            <control type="image">
                <visible>!ListItem.IsFolder + !String.IsEmpty(ListItem.Art(discart)) + Skin.HasSetting(discartfanart) + !Container.OnNext + !Container.OnPrevious</visible>
                <top>$PARAM[discposition]</top>
                <width>235</width>
                <height>235</height>
                <left>-117</left>
                <fadetime>1000</fadetime>
                <texture>$INFO[ListItem.Art(discart)]</texture>
                <animation type="Visible" reversible="false">
                    <effect type="fade" start="0" end="100" time="0" delay="450"/>
                    <effect type="slide" start="117" end="0" tween="sine" easing="out" time="600" delay="500"/>
                </animation>
                <animation type="Hidden" reversible="false">
                    <effect type="fade" start="100" end="0" time="0"/>
                </animation>
                <animation type="WindowOpen" reversible="false">
                    <effect type="fade" start="0" end="100" time="0" delay="450"/>
                    <effect type="slide" start="117" end="0" tween="sine" easing="out" time="600" delay="500"/>
                </animation>
                <animation type="WindowClose" reversible="false">
                    <effect type="slide" start="0" end="117" tween="sine" easing="out" time="250"/>
                    <effect type="fade" start="100" end="0" time="150"/>
                </animation>
            </control>
            <control type="image">
                <width>242</width>
                <height>342</height>
                <fadetime>PosterFanartFadetime</fadetime>
                <texture background="true">$VAR[PosterImage]</texture>
            </control>
            <control type="image">
                <width>278</width>
                <height>370</height>
                <left>-20</left>
                <top>-9</top>
                <fadetime>PosterFanartFadetime</fadetime>
                <texture>misc/poster_glass2.png</texture>
                <visible>Skin.HasSetting(ModernCase)</visible>
            </control>
            <control type="image">
                <width>244</width>
                <height>345</height>
                <fadetime>PosterFanartFadetime</fadetime>
                <texture>misc/br-case.png</texture>
                <visible>!Skin.HasSetting(ModernCase)</visible>
            </control>
        </control>
        </definition>
    </include>
</includes>
