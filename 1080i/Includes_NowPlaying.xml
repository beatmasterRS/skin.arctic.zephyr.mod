<?xml version="1.0" encoding="UTF-8"?>
<!-- Foundation -->
<includes>
    <include name="ExtendedNowPlaying">
        <control type="group">
            <visible>$EXP[ExtendedNowPlayingIsVisible]</visible>
            <animation effect="fade" start="100" end="0" tween="sine" reversible="false" easing="out" time="350">Hidden</animation>
            <animation effect="fade" start="0" end="100" tween="sine" reversible="false" easing="in" delay="350" time="450">Visible</animation>
            <height>770</height>
            <include content="def_bottom" condition="!Skin.HasSetting(home.widgets.show.reflections)">
                <param name="bottom" value="188" />
            </include>
            <include content="def_bottom" condition="Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
                <param name="bottom" value="200" />
            </include>
            <include content="def_bottom" condition="!Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
                <param name="bottom" value="230" />
            </include>
            <width>1270</width>
            <include content="def_left" condition="$EXP[HomeIsVerticalMultiWidgets]"><param name="left" value="526" /></include>
            <left>SidePad</left>

            <!-- Basics -->
            <include>NowPlaying_TopBottomInfo</include>
            <include>NowPlaying_AudioDiscArt</include>
            <include condition="Skin.HasSetting(extended.nowplaying.videowindow)">NowPlaying_VideoWindow</include>
            <include condition="[$EXP[HomeIsModernMultiWidgets] | [ $EXP[HomeIsVerticalMultiWidgets] + Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)]]">NowPlaying_ClearArt</include>

            <!-- DiscArt -->
            <include content="NowPlaying_VideoDiscArt">
                <param name="visible" value="!Skin.HasSetting(extended.nowplaying.videowindow)" />
            </include>
            <include content="NowPlaying_VideoDiscArt">
                <param name="left" value="667" />
                <param name="visible" value="Skin.HasSetting(extended.nowplaying.videowindow)" />
            </include>

            <!-- Poster -->
            <include content="NowPlaying_Poster">
                <param name="visible" value="!Skin.HasSetting(extended.nowplaying.videowindow)" />
            </include>
            <include content="NowPlaying_Poster">
                <param name="left" value="551" />
                <param name="visible" value="Skin.HasSetting(extended.nowplaying.videowindow)" />
            </include>
            <include content="NowPlaying_Square">
                <param name="visible" value="![Skin.HasSetting(extended.nowplaying.videowindow) + VideoPlayer.Content(livetv)]" />
            </include>
            <include content="NowPlaying_Square">
                <param name="left" value="551" />
                <param name="visible" value="$EXP[IsPVRVideo] + Skin.HasSetting(extended.nowplaying.videowindow)" />
            </include>
            <include content="NowPlaying_Square">
                <param name="left" value="-10" />
                <param name="visible" value="$EXP[IsPVRAudio] + Skin.HasSetting(extended.nowplaying.videowindow)" />
            </include>

            <!-- Info Right -->
            <include content="NowPlaying_InfoRight">
                <param name="left" value="561" />
                <param name="visible" value="$EXP[IsVideo] + Skin.HasSetting(extended.nowplaying.videowindow)" />
            </include>
            <include content="NowPlaying_InfoRight">
                <param name="left" value="0" />
                <param name="visible" value="[$EXP[IsVideo] + !Skin.HasSetting(extended.nowplaying.videowindow)] | [$EXP[IsAudio] + Skin.HasSetting(extended.nowplaying.hidecd)] | [$EXP[IsPVRAudio] + Skin.HasSetting(extended.nowplaying.hidecd)]" />
            </include>
            <include content="NowPlaying_InfoRight">
                <param name="left" value="661" />
                <param name="visible" value="$EXP[IsPVRVideo] + Skin.HasSetting(extended.nowplaying.videowindow)" />
            </include>
            <include content="NowPlaying_InfoRight">
                <param name="left" value="140" />
                <param name="visible" value="[$EXP[IsPVRAudio] + !Skin.HasSetting(extended.nowplaying.hidecd)] | [$EXP[IsAudio] + !Skin.HasSetting(extended.nowplaying.hidecd)]" />
            </include>
            <include content="NowPlaying_InfoRight">
                <param name="left" value="100" />
                <param name="visible" value="$EXP[IsPVRVideo] + !Skin.HasSetting(extended.nowplaying.videowindow)" />
            </include>
        </control>        
    </include>

    <include name="NowPlaying_Controls">
        <control type="grouplist" id="777">
            <defaultcontrol always="true">14</defaultcontrol>
            <width>100%</width>
            <itemgap>11</itemgap>
            <height>64</height>
            <top>35</top>
            <orientation>horizontal</orientation>
            <include>OSDControlsHome</include>
        </control>
    </include>
    
    <include name="NowPlaying_ClearArt">

        <!-- ClearArt -->
        <control type="group">
            <left>1360</left>
            <animation effect="slide" start="0" end="0,30" time="0" condition="true">Conditional</animation>
            <animation effect="slide" start="0" end="0,40" time="0" condition="!Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">Conditional</animation>
            <animation effect="slide" start="0" end="0,10" time="0" condition="Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">Conditional</animation>
            <animation effect="slide" start="0" end="0,-28" time="0" condition="Skin.HasSetting(home.oldmenuheight) | Skin.HasSetting(submenu.compatibility)">Conditional</animation>
            <animation effect="slide" start="0" end="-43,0" time="0" condition="$EXP[HomeIsVerticalMultiWidgets] + Skin.HasSetting(homemenu.only.icons) + Skin.HasSetting(home.showicons)">Conditional</animation>
            <animation type="WindowClose" condition="!$EXP[HomeIsVerticalMultiWidgets]">
                <effect type="slide" start="0" end="0,250" time="150"/>
                <effect type="fade" start="100" end="20" time="150"/>
            </animation>
            <animation effect="slide" start="0,150" end="0" time="150" reversible="false">WindowOpen</animation>
            <control type="image">
                <width>400</width>
                <texture>$VAR[PlayerArtNowPlaying]</texture>
                <aspectratio scalediffuse="true" align="left" aligny="bottom">keep</aspectratio>
                <visible>Skin.HasSetting(extended.nowplaying.clearart) + Player.HasVideo</visible>
            </control>
            <control type="image">
                <width>400</width>
                <include content="def_bottom" condition="Skin.HasSetting(ShowClearLogoMusicNowPlaying)">
                    <param name="bottom" value="15" />
                </include>
                <texture>$VAR[PlayerArtMusicNowPlaying]</texture>
                <aspectratio scalediffuse="true" align="left" aligny="bottom">keep</aspectratio>
                <visible>[Skin.HasSetting(ShowClearArtMusicNowPlaying) | Skin.HasSetting(ShowClearLogoMusicNowPlaying)] + Player.HasAudio</visible>
            </control>
        </control>
    </include>

    <include name="NowPlaying_PlayPause">

        <!-- Play Pause -->
        <control type="group">
            <left>-42</left>
            <top>-15</top>
            <width>100</width>
            <height>100</height>
            <control type="image" description="Play">
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture colordiffuse="$VAR[ColorHighlight]">progress/play.png</texture>
                <animation effect="fade" start="0" end="100" time="150">VisibleChange</animation>
                <visible>!Player.Paused + !Player.Forwarding + !Player.Forwarding</visible>
            </control>
            <control type="image" description="Pause">
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture colordiffuse="$VAR[ColorHighlight]">progress/pause.png</texture>
                <animation effect="fade" start="0" end="100" time="150">VisibleChange</animation>
                <visible>Player.Paused</visible>
            </control>
            <control type="image" description="Forwarding">
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture colordiffuse="$VAR[ColorHighlight]">progress/ff.png</texture>
                <animation effect="fade" start="0" end="100" time="150">VisibleChange</animation>
                <visible>Player.Forwarding</visible>
            </control>
            <control type="image" description="Rewinding">
                <aspectratio align="center" aligny="center">keep</aspectratio>
                <texture colordiffuse="$VAR[ColorHighlight]">progress/rw.png</texture>
                <animation effect="fade" start="0" end="100" time="150">VisibleChange</animation>
                <visible>Player.Rewinding</visible>
            </control>
        </control>
    </include>

    <include name="NowPlaying_Time">

        <!-- Time -->
        <control type="label">
            <left>30</left>
            <align>left</align>
            <font>Medium</font>
            <width>auto</width>
            <textcolor>Dark2</textcolor>
            <label>$VAR[Label_Time_NowPlaying]</label>
        </control>
    </include>

    <include name="NowPlaying_InfoRight">

        <!-- Info Right -->
        <param name="visible" value="$PARAM[visible]" default="true"/>
        <param name="left" value="$PARAM[left]" default="-42"/>
        <definition>
        <control type="group">
            <width>100%</width>
            <include content="def_top" condition="Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.nowplaying.controls)">
                <param name="top" value="546" />
            </include>
            <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.nowplaying.controls)">
                <param name="top" value="166" />
            </include>
            <include content="def_top" condition="Skin.HasSetting(homemenu.netflix)">
                <param name="top" value="610" />
            </include>
            <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix)">
                <param name="top" value="230" />
            </include>
            <left>$PARAM[left]</left>
            <visible>$PARAM[visible]</visible>
            <control type="group">
                <left>240</left>
                <include content="def_top" condition="Skin.HasSetting(home.nowplaying.controls)">
                    <param name="top" value="125" />
                </include>
                <top>60</top>
                <visible>Player.HasVideo</visible>
                <control type="group">
                    <include>NowPlaying_PlayPause</include>
                    <include>NowPlaying_Time</include>
                    <control type="label">
                        <top>55</top>
                        <width>1100</width>
                        <include>MultiWidgetsSubLabelDefinition</include>
                        <label fallback="19055">$VAR[Label_NowPlaying_Time_VideoSubInfo]</label>
                    </control>
                    <animation effect="slide" start="0" end="0,-70" time="150" condition="ControlGroup(777).HasFocus() + Skin.HasSetting(home.nowplaying.controls) + !Skin.HasSetting(home.nowplaying.controls.always.visible)" reversible="false">Conditional</animation>
                    <animation effect="slide" start="0,-70" end="0,0" delay="300" time="250" tween="sine" easing="out" condition="!ControlGroup(777).HasFocus() + Skin.HasSetting(home.nowplaying.controls) + !Skin.HasSetting(home.nowplaying.controls.always.visible)" reversible="false">Conditional</animation>
                    <animation effect="slide" start="0,0" end="0,-70" time="0" condition="Skin.HasSetting(home.nowplaying.controls.always.visible) + Skin.HasSetting(home.nowplaying.controls)" reversible="false">Conditional</animation>
                </control>
                <control type="group">
                    <include condition="Skin.HasSetting(home.nowplaying.controls)">NowPlaying_Controls</include>
                    <animation effect="fade" start="0" end="100" time="150" delay="150" condition="ControlGroup(777).HasFocus() + !Skin.HasSetting(home.nowplaying.controls.always.visible)" reversible="false">Conditional</animation>
                    <animation effect="fade" start="100" end="0" time="300" condition="!ControlGroup(777).HasFocus() + !Skin.HasSetting(home.nowplaying.controls.always.visible)" reversible="false">Conditional</animation>
                </control>
            </control>
            <control type="group">
                <left>340</left>
                <include content="def_top" condition="Skin.HasSetting(home.nowplaying.controls)">
                    <param name="top" value="125" />
                </include>
                <top>60</top>
                <visible>Player.HasAudio</visible>
                <control type="group">
                    <include>NowPlaying_PlayPause</include>
                    <include>NowPlaying_Time</include>
                    <control type="label">
                        <top>55</top>
                        <width>1100</width>
                        <include>MultiWidgetsSubLabelDefinition</include>
                        <label fallback="19055">$VAR[Label_NowPlaying_Time_MusicSubInfo]</label>
                    </control>
                    <animation effect="slide" start="0" end="0,-70" time="150" condition="ControlGroup(777).HasFocus() + Skin.HasSetting(home.nowplaying.controls) + !Skin.HasSetting(home.nowplaying.controls.always.visible)" reversible="false">Conditional</animation>
                    <animation effect="slide" start="0,-70" end="0,0" delay="300" time="250" tween="sine" easing="out" condition="!ControlGroup(777).HasFocus() + Skin.HasSetting(home.nowplaying.controls) + !Skin.HasSetting(home.nowplaying.controls.always.visible)" reversible="false">Conditional</animation>
                    <animation effect="slide" start="0,0" end="0,-70" time="0" condition="Skin.HasSetting(home.nowplaying.controls.always.visible) + Skin.HasSetting(home.nowplaying.controls)" reversible="false">Conditional</animation>
                </control>
                <control type="group">
                    <include condition="Skin.HasSetting(home.nowplaying.controls)">NowPlaying_Controls</include>
                    <animation effect="fade" start="0" end="100" time="150" delay="150" condition="ControlGroup(777).HasFocus() + !Skin.HasSetting(home.nowplaying.controls.always.visible)" reversible="false">Conditional</animation>
                    <animation effect="fade" start="100" end="0" time="300" condition="!ControlGroup(777).HasFocus() + !Skin.HasSetting(home.nowplaying.controls.always.visible)" reversible="false">Conditional</animation>
                </control>
            </control>
        </control>
        </definition>
    </include>

    <include name="NowPlaying_TopBottomInfo">

        <!-- Top/Bottom Info -->
        <control type="group">
            <control type="grouplist">
                <usecontrolcoords>true</usecontrolcoords>
                <height>40</height>
                <include content="def_top" condition="Skin.HasSetting(homemenu.netflix)">
                    <param name="top" value="395" />
                </include>
                <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix)">
                    <param name="top" value="10" />
                </include>
                <orientation>horizontal</orientation>
                <itemgap>10</itemgap>
                <include content="Kodi_Logo_Home">
                    <param name="dimensions" value="30"/>
                    <param name="top" value="5"/>
                    <param name="left" value="0"/>
                    <param name="left-gradient" value="-40"/>
                </include>
                <control type="label">
                    <height>38</height>
                    <font>SmallNavi</font>
                    <width>auto</width>
                    <textcolor>Dark1</textcolor>
                    <label>31236</label>
                </control>
            </control>
            <control type="grouplist">
                <include content="def_width" condition="Skin.HasSetting(homemenu.netflix)">
                    <param name="width" value="NetflixPlotWidth" />
                </include>
                <include content="def_width" condition="!Skin.HasSetting(homemenu.netflix)">
                    <param name="width" value="100%" />
                </include>
                <orientation>vertical</orientation>
                <include content="def_top" condition="Skin.HasSetting(homemenu.netflix)">
                    <param name="top" value="20" />
                </include>
                <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
                    <param name="top" value="413" />
                </include>
                <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix)">
                    <param name="top" value="407" />
                </include>
                <itemgap>15</itemgap>
                <include content="NowPlayingHeaderLabel">
                    <param name="label" value="$INFO[Player.Title]" />
                    <param name="visible" value="!VideoPlayer.Content(livetv)" />
                </include>
                <include content="NowPlayingHeaderLabel">
                    <param name="label" value="$INFO[Player.Title]$INFO[VideoPlayer.StartTime,  •  ,]$INFO[VideoPlayer.EndTime, - ]$INFO[VideoPlayer.Duration(mins),  •  , $LOCALIZE[31102]]" />
                    <param name="visible" value="VideoPlayer.Content(livetv)" />
                </include>
                <control type="grouplist">
                    <width>100%</width>
                    <orientation>vertical</orientation>
                    <visible>Player.HasVideo</visible>
                    <itemgap>15</itemgap>
                    <usecontrolcoords>true</usecontrolcoords>
                    <include condition="Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.netflix.clearlogo) | Skin.HasSetting(homemenu.clean.flix)">IntentButton</include>
                    <control type="textbox">
                        <include condition="Skin.HasSetting(homemenu.netflix)">MultiWidgetsPlotLabelDefinitionNetflix</include>
                        <include condition="!Skin.HasSetting(homemenu.netflix)">MultiWidgetsPlotLabelDefinition</include>
                        <label>$VAR[Label_NowPlaying_Plot]</label>
                        <visible>!String.IsEmpty(VideoPlayer.Plot)</visible>
                    </control>
                    <control type="label">
                        <include>MultiWidgetsSubLabelDefinition</include>
                        <label>$VAR[Label_NowPlaying_VideoSubInfo]</label>
                    </control>
                </control>
                <control type="grouplist">
                    <width>100%</width>
                    <orientation>vertical</orientation>
                    <visible>!Skin.HasSetting(home.extended.nowplaying.scrolling.text) + Player.HasAudio</visible>
                    <itemgap>15</itemgap>
                    <include condition="Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.netflix.clearlogo) | Skin.HasSetting(homemenu.clean.flix)">IntentButton</include>
                    <control type="textbox">
                        <include condition="Skin.HasSetting(homemenu.netflix)">MultiWidgetsPlotLabelDefinitionNetflix</include>
                        <include condition="!Skin.HasSetting(homemenu.netflix)">MultiWidgetsPlotLabelDefinition</include>
                        <label>$VAR[Label_NowPlaying_Plot]</label>
                        <visible>!String.IsEmpty(MusicPlayer.Property(Artist_Description)) | !String.IsEmpty(MusicPlayer.Property(Album_Description)) | Skin.HasSetting(home.extended.nowplaying.tracklist)</visible>
                    </control>
                    <control type="label">
                        <include>MultiWidgetsSubLabelDefinition</include>
                        <label>$VAR[Label_NowPlaying_MusicSubInfo]</label>
                        <visible>!Skin.HasSetting(home.extended.nowplaying.tracklist)</visible>
                    </control>
                </control>
            </control>
            
            <!-- Scrolling Text -->
            <control type="group">
                <include content="def_top" condition="Skin.HasSetting(homemenu.netflix)">
                    <param name="top" value="86" />
                </include>
                <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(home.widgets.show.reflections)">
                    <param name="top" value="456" />
                </include>
                <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix)">
                    <param name="top" value="450" />
                </include>
                <include content="def_left" condition="$EXP[HomeIsVerticalMultiWidgets]">
                    <param name="left" value="0" />
                </include>
                <left>-80</left>
                <width>1920</width>
                <visible>Skin.HasSetting(home.extended.nowplaying.scrolling.text) + Player.HasAudio</visible>
                <animation effect="fade" start="100" end="50" time="0" condition="true">Conditional</animation>
                <control type="label">
                    <description>Now Playing</description>
                    <left>0</left>
                    <top>100</top>
                    <right>0</right>
                    <label>$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]$INFO[MusicPlayer.Title,  ,]</label>
                    <scroll>true</scroll>
                    <font>Music_Biggest</font>
                    <textcolor>77ffffff</textcolor>
                    <align>left</align>
                    <scrollspeed>55</scrollspeed>
                    <visible>Integer.IsGreater(MusicPlayer.Time,0) + !String.IsEqual(Player.TimeRemaining(hh:mm:ss),00:00:01)</visible>
                    <animation effect="fade" start="0" end="100" time="950" delay="500" tween="cubic" easing="inout">Visible</animation>
                    <animation effect="fade" end="0" start="100" time="350">Hidden</animation>
                </control>
                <control type="label">
                    <description>Now Playing</description>
                    <left>0</left>
                    <top>130</top>
                    <right>0</right>
                    <label>$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album, ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]$INFO[MusicPlayer.Album,  ,]</label>
                    <scroll>true</scroll>
                    <font>Music_Bigger</font>
                    <textcolor>44cccccc</textcolor>
                    <align>left</align>
                    <scrollspeed>100</scrollspeed>
                    <visible>Integer.IsGreater(MusicPlayer.Time,0) + !String.IsEqual(Player.TimeRemaining(hh:mm:ss),00:00:01)</visible>                
                    <animation effect="fade" start="0" end="100" time="950" delay="500" tween="cubic" easing="inout">Visible</animation>
                    <animation effect="fade" end="0" start="100" time="350">Hidden</animation>
                </control>
                <control type="label">
                    <description>Now Playing</description>
                    <left>0</left>
                    <top>210</top>
                    <right>0</right>
                    <label>$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]$INFO[MusicPlayer.Artist,  ,]</label>
                    <scroll>true</scroll>
                    <font>Music_Big</font>
                    <textcolor>99cccccc</textcolor>
                    <align>left</align>
                    <scrollspeed>80</scrollspeed>
                    <visible>!Pvr.IsPlayingRadio</visible>
                    <visible>Integer.IsGreater(MusicPlayer.Time,0) + !String.IsEqual(Player.TimeRemaining(hh:mm:ss),00:00:01)</visible>                
                    <animation effect="fade" start="0" end="100" time="950" delay="500" tween="cubic" easing="inout">Visible</animation>
                    <animation effect="fade" end="0" start="100" time="350">Hidden</animation>
                </control>
            </control>
        </control>
    </include>

    <include name="NowPlaying_AudioDiscArt">

        <!-- Audio DiscArt -->
        <control type="group">
            <include content="def_top" condition="Skin.HasSetting(homemenu.netflix)">
                <param name="top" value="460" />
            </include>
            <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix)">
                <param name="top" value="75" />
            </include>
            <left>158</left>
            <animation type="WindowClose" reversible="false">
                <effect type="slide" start="0,0" end="-115,0" tween="sine" easing="out" time="300" delay="0"/>
                <effect type="fade" start="100" end="0" time="150" delay="0"/>
            </animation>
            <animation type="WindowOpen" reversible="false" condition="$EXP[ExtendedNowPlayingIsVisible]">
                <effect type="slide" start="-145,0" end="0,0" tween="sine" easing="out" time="600" delay="500"/>
            </animation>
            <animation type="Conditional" condition="!Control.HasFocus(300) + !Control.HasFocus(302) + !Control.HasFocus(2011) + !ControlGroup(777).HasFocus()" reversible="false">
                <effect type="slide" start="0,0" end="-115,0" tween="sine" easing="out" time="300" delay="0"/>
                <effect type="fade" start="100" end="0" time="150" delay="0"/>
            </animation>
            <animation type="Conditional" condition="Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011) | ControlGroup(777).HasFocus()" reversible="false">
                <effect type="slide" start="-145,0" end="0,0" tween="sine" easing="out" time="600" delay="500"/>
                <effect type="fade" start="0" end="100" time="1" delay="500"/>
            </animation>
            <visible>Player.HasMedia + Player.HasAudio</visible>
            <visible>!Skin.HasSetting(extended.nowplaying.hidecd)</visible>
            <include content="DefDiscArtNowPlaying">
                <param name="visible" value="Skin.HasSetting(osd.music.disc.fake.cd)" />
                <param name="diffuse" value="diffuse/diffuse_cd.png" />
                <param name="discart" value="$VAR[MusicDiscart]" />
            </include>
            <include content="DefDiscArtNowPlaying">
                <param name="visible" value="!Skin.HasSetting(osd.music.disc.fake.cd)" />
                <param name="discart" value="$VAR[MusicDiscart]" />
            </include>
        </control>
    </include>

    <include name="NowPlaying_VideoDiscArt">

        <!-- Video DiscArt -->
        <param name="visible" value="$PARAM[visible]" default="true"/>
        <param name="left" value="$PARAM[left]" default="106"/>
        <definition>
        <control type="group">
            <visible>$PARAM[visible]</visible>
            <include content="def_top" condition="Skin.HasSetting(homemenu.netflix)">
                <param name="top" value="460" />
            </include>
            <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix)">
                <param name="top" value="75" />
            </include>
            <left>$PARAM[left]</left>
            <animation type="WindowClose" reversible="false">
                <effect type="slide" start="0,0" end="-106,0" tween="sine" easing="out" time="300" delay="0"/>
                <effect type="fade" start="100" end="0" time="150" delay="0"/>
            </animation>
            <animation type="WindowOpen" reversible="false" condition="$EXP[ExtendedNowPlayingIsVisible]">
                <effect type="slide" start="-106,0" end="0,0" tween="sine" easing="out" time="600" delay="500"/>
            </animation>
            <animation type="Conditional" condition="!Control.HasFocus(300) + !Control.HasFocus(302) + !Control.HasFocus(2011)" reversible="false">
                <effect type="slide" start="0,0" end="-106,0" tween="sine" easing="out" time="300" delay="0"/>
                <effect type="fade" start="100" end="0" time="150" delay="0"/>
            </animation>
            <animation type="Conditional" condition="Control.HasFocus(300) | Control.HasFocus(302) | Control.HasFocus(2011)" reversible="false">
                <effect type="slide" start="-106,0" end="0,0" tween="sine" easing="out" time="600" delay="500"/>
                <effect type="fade" start="0" end="100" time="1" delay="500"/>
            </animation>
            <visible>Player.HasMedia + Player.HasVideo + VideoPlayer.Content(movies)</visible>
            <visible>!Skin.HasSetting(extended.nowplaying.hidecd)</visible>
            <include content="DefDiscArtNowPlaying">
                <param name="visible" value="Skin.HasSetting(home.video.disc.fake.bluray)" />
                <param name="diffuse" value="diffuse/diffuse_cd.png" />
                <param name="discart" value="$VAR[VideoDiscart]" />
                <param name="width" value="194" />
            </include>
            <include content="DefDiscArtNowPlaying">
                <param name="visible" value="!Skin.HasSetting(home.video.disc.fake.bluray)" />
                <param name="discart" value="$VAR[VideoDiscart]" />
                <param name="width" value="194" />
            </include>
        </control>
        </definition>
    </include>

    <include name="NowPlaying_VideoWindow">

        <!-- VideoWindow -->
        <control type="group">
            <visible>Player.HasVideo</visible>
            <height>305</height>
            <width>541</width>
            <include content="def_top" condition="Skin.HasSetting(homemenu.netflix)">
                <param name="top" value="455" />
            </include>
            <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix)">
                <param name="top" value="70" />
            </include>
            <control type="image">
                <texture colordiffuse="Fallback" border="4" background="true">common/diffuse_box.png</texture>
            </control>
            <control type="videowindow">
                <left>1</left>
                <top>1</top>
                <height>303</height>
                <width>539</width>
                <animation type="Hidden" reversible="false">
                    <effect type="fade" start="100" end="0" time="150" />
                </animation>
                <animation type="WindowClose" reversible="false">
                    <effect type="zoom" center="auto" start="100" end="0" time="1" />
                </animation>
                <animation type="WindowOpen" reversible="false">
                    <effect type="zoom" center="auto" start="0" end="100" time="1" />
                </animation>
                <visible>Player.HasVideo + !ControlGroup(301).HasFocus()</visible>
                <aspectratio align="center" aligny="center" scalediffuse="false">scale</aspectratio>
            </control>
            <control type="image">
                <texture border="4" colordiffuse="Box2">common/box21.png</texture>
            </control>
        </control>
    </include>

    <include name="NowPlaying_Poster">

        <!-- Poster -->
        <param name="visible" value="$PARAM[visible]" default="false"/>
        <param name="left" value="$PARAM[left]" default="-10"/>
        <definition>
        <control type="group">
            <height>325</height>
            <width>222</width>
            <left>$PARAM[left]</left>
            <include content="def_top" condition="Skin.HasSetting(homemenu.netflix)">
                <param name="top" value="445" />
            </include>
            <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix)">
                <param name="top" value="60" />
            </include>
            <visible>$PARAM[visible]</visible>
            <visible>Player.HasVideo + !VideoPlayer.Content(livetv)</visible>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <texture border="10">common/$VAR[nofocus-shadow10]</texture>
            </control>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <texture colordiffuse="ff181818" diffuse="diffuse/wall.png">common/white.png</texture>
            </control>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <texture colordiffuse="Fallback" border="4" background="true">common/diffuse_box.png</texture>
            </control>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture diffuse="diffuse/widgetposter_new.png" background="true" fallback="DefaultMovies.png">$VAR[PlayerPoster]</texture>
            </control>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <texture colordiffuse="BoxWidget" border="4" background="true">common/box21.png</texture>
                <visible>!Skin.HasSetting(thumbnails.white)</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="NowPlaying_Square">

        <!-- Square -->
        <param name="visible" value="$PARAM[visible]" default="false"/>
        <param name="left" value="$PARAM[left]" default="-10"/>
        <definition>
        <control type="group">
            <height>325</height>
            <width>325</width>
            <left>$PARAM[left]</left>
            <include content="def_top" condition="Skin.HasSetting(homemenu.netflix)">
                <param name="top" value="445" />
            </include>
            <include content="def_top" condition="!Skin.HasSetting(homemenu.netflix)">
                <param name="top" value="60" />
            </include>
            <visible>$PARAM[visible]</visible>
            <visible>Player.HasAudio | VideoPlayer.Content(livetv)</visible>
            <control type="image">
                <left>0</left>
                <top>0</top>
                <right>0</right>
                <bottom>0</bottom>
                <texture border="10">common/$VAR[nofocus-shadow10]</texture>
            </control>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <texture colordiffuse="ff181818" diffuse="diffuse/wall.png">common/white.png</texture>
            </control>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <texture colordiffuse="Fallback" border="4" background="true">common/diffuse_box.png</texture>
            </control>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">keep</aspectratio>
                <texture diffuse="diffuse/widgetposter_new.png" background="true" fallback="DefaultMovies.png">$VAR[PlayerPoster]</texture>
            </control>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <texture colordiffuse="BoxWidget" border="4" background="true">common/box21.png</texture>
                <visible>!Skin.HasSetting(thumbnails.white)</visible>
            </control>
        </control>
        </definition>
    </include>
</includes>
